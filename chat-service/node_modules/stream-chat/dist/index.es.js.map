{"version":3,"file":"index.es.js","sources":["../src/channel_state.js","../src/events.js","../src/utils.js","../src/channel.js","../src/client_state.js","../src/connection.js","../src/base64.js","../src/signing.js","../src/token_manager.js","../src/client.js","../src/permissions.js"],"sourcesContent":["import Immutable from 'seamless-immutable';\n\n/**\n * ChannelState - A container class for the channel state.\n */\n\nfunction byDate(a, b) {\n\treturn a.created_at - b.created_at;\n}\n\nexport class ChannelState {\n\tconstructor(channel) {\n\t\tthis._channel = channel;\n\t\tthis.watcher_count = 0;\n\t\tthis.typing = Immutable({});\n\t\tthis.read = Immutable({});\n\t\tthis.messages = Immutable([]);\n\t\tthis.threads = Immutable({});\n\t\t// a list of users to hide messages from\n\t\tthis.mutedUsers = Immutable([]);\n\t\tthis.watchers = Immutable({});\n\t\tthis.members = Immutable({});\n\t\tthis.membership = Immutable({});\n\t\tthis.last_message_at =\n\t\t\tchannel.last_message_at != null ? new Date(channel.last_message_at) : null;\n\t}\n\n\t/**\n\t * addMessageSorted - Add a message to the state\n\t *\n\t * @param {object} newMessage A new message\n\t *\n\t */\n\taddMessageSorted(newMessage) {\n\t\treturn this.addMessagesSorted([newMessage]);\n\t}\n\n\t/**\n\t * messageToImmutable - Takes the message object. Parses the dates, sets __html\n\t * and sets the status to received if missing. Returns an immutable message object\n\t *\n\t * @param {object} message an Immutable message object\n\t *\n\t */\n\tmessageToImmutable(message) {\n\t\tmessage.__html = message.html;\n\t\t// parse the date..\n\t\tmessage.created_at = new Date(message.created_at);\n\t\tmessage.updated_at = new Date(message.updated_at);\n\t\tif (!message.status) {\n\t\t\tmessage.status = 'received';\n\t\t}\n\t\treturn Immutable(message);\n\t}\n\n\t/**\n\t * addMessagesSorted - Add the list of messages to state and resorts the messages\n\t *\n\t * @param {array}   newMessages    A list of messages\n\t * @param {boolean} initializing   Weather channel is being initialized.\n\t *\n\t */\n\taddMessagesSorted(newMessages, initializing = false) {\n\t\t// parse all the new message dates and add __html for react\n\t\tconst parsedMessages = [];\n\t\tfor (const message of newMessages) {\n\t\t\tif (initializing && this.threads[message.id]) {\n\t\t\t\t// If we are initializing the state of channel (e.g., in case of connection recovery),\n\t\t\t\t// then in that case we remove thread related to this message from threads object.\n\t\t\t\t// This way we can ensure that we don't have any stale data in thread object\n\t\t\t\t// and consumer can refetch the replies.\n\t\t\t\tthis.threads = Immutable.without(this.threads, message.id);\n\t\t\t}\n\t\t\tconst parsedMsg = this.messageToImmutable(message);\n\t\t\tparsedMessages.push(parsedMsg);\n\t\t\tif (parsedMsg.created_at > this.last_message_at) {\n\t\t\t\tthis.last_message_at = parsedMsg.created_at;\n\t\t\t}\n\t\t}\n\n\t\t// update or append the messages...\n\t\tconst updatedThreads = [];\n\t\tfor (const message of parsedMessages) {\n\t\t\tconst isThreadReply = message.parent_id && !message.show_in_channel;\n\t\t\t// add to the main message list\n\t\t\tif (!isThreadReply) {\n\t\t\t\tthis.messages = this._addToMessageList(this.messages, message);\n\t\t\t}\n\t\t\t// add to the thread if applicable..\n\t\t\tconst parentID = message.parent_id;\n\t\t\tif (parentID) {\n\t\t\t\tconst thread = this.threads[parentID] || Immutable([]);\n\t\t\t\tconst threadMessages = this._addToMessageList(thread, message);\n\t\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t\t\tupdatedThreads.push(parentID);\n\t\t\t}\n\t\t}\n\n\t\t// Resort the main messages and the threads that changed...\n\t\tconst messages = [...this.messages];\n\t\tmessages.sort(byDate);\n\t\tthis.messages = Immutable(messages);\n\t\tfor (const parentID of updatedThreads) {\n\t\t\tconst threadMessages = this.threads[parentID]\n\t\t\t\t? [...this.threads[parentID]]\n\t\t\t\t: [];\n\t\t\tthreadMessages.sort(byDate);\n\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t}\n\t}\n\n\taddReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t_addReactionToMessage(message, reaction) {\n\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\tif (!idMatch) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\tif (this._channel.getClient().userID === reaction.user.id) {\n\t\t\tmessage = message.update('own_reactions', (old = []) =>\n\t\t\t\told.concat([reaction]),\n\t\t\t);\n\t\t}\n\t\tmessage = message.update('latest_reactions', (old = []) =>\n\t\t\told.concat([reaction]),\n\t\t);\n\n\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\told ? old + 1 : 1,\n\t\t);\n\n\t\treturn message;\n\t}\n\n\t_removeReactionFromMessage(message, reaction) {\n\t\tconst filterReaction = old =>\n\t\t\told.filter(\n\t\t\t\titem => item.type !== reaction.type || item.user.id !== reaction.user.id,\n\t\t\t);\n\t\tmessage = message.update('own_reactions', filterReaction);\n\t\tmessage = message.update('latest_reactions', filterReaction);\n\t\treturn message;\n\t}\n\n\tremoveReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isnt found\n\t *\n\t * @param {array} messages A list of messages\n\t * @param {object} newMessage The new message\n\t *\n\t */\n\t_addToMessageList(messages, newMessage) {\n\t\tlet updated = false;\n\n\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\tconst message = messages[i];\n\t\t\tconst idMatch = message.id && newMessage.id && message.id === newMessage.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\tmessages = messages.set(i, newMessage);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!updated) {\n\t\t\tmessages = messages.concat([newMessage]);\n\t\t}\n\n\t\treturn messages;\n\t}\n\n\t/**\n\t * removeMessage - Description\n\t *\n\t * @param {type} messageToRemove Object of the message to remove. Needs to have at id specified.\n\t *\n\t * @return {boolean} Returns if the message was removed\n\t */\n\tremoveMessage(messageToRemove) {\n\t\tlet isRemoved = false;\n\t\tif (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n\t\t\tconst { removed, result: threadMessages } = this.removeMessageFromArray(\n\t\t\t\tthis.threads[messageToRemove.parent_id],\n\t\t\t\tmessageToRemove,\n\t\t\t);\n\t\t\tthis.threads = this.threads[messageToRemove.parent_id].set(\n\t\t\t\tmessageToRemove.parent_id,\n\t\t\t\tthreadMessages,\n\t\t\t);\n\t\t\tisRemoved = removed;\n\t\t} else {\n\t\t\tconst { removed, result: messages } = this.removeMessageFromArray(\n\t\t\t\tthis.messages,\n\t\t\t\tmessageToRemove,\n\t\t\t);\n\t\t\tthis.messages = messages;\n\t\t\tisRemoved = removed;\n\t\t}\n\n\t\treturn isRemoved;\n\t}\n\n\tremoveMessageFromArray = (msgArray, msg) => {\n\t\tlet removed = false;\n\t\tconst result = msgArray.flatMap(message => {\n\t\t\tconst idMatch = message.id && msg.id && message.id === msg.id;\n\t\t\tif (idMatch) {\n\t\t\t\tremoved = true;\n\t\t\t\treturn [];\n\t\t\t} else {\n\t\t\t\treturn message;\n\t\t\t}\n\t\t});\n\n\t\treturn { removed, result };\n\t};\n\t/**\n\t * filterErrorMessages - Removes error messages from the channel state.\n\t *\n\t */\n\tfilterErrorMessages() {\n\t\tconst filteredMessages = this.messages.flatMap(message => {\n\t\t\tif (message.type !== 'error') {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = Immutable(filteredMessages);\n\t}\n\n\t/**\n\t * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n\t */\n\tclean() {\n\t\tconst now = new Date();\n\t\t// prevent old users from showing up as typing\n\t\tfor (const [userID, lastEvent] of Object.entries(this.typing)) {\n\t\t\tconst since = now - new Date(lastEvent.received_at);\n\t\t\tif (since > 7000) {\n\t\t\t\tthis.typing = this.typing.without(userID);\n\t\t\t\tthis._channel.getClient().dispatchEvent({\n\t\t\t\t\ttype: 'typing.stop',\n\t\t\t\t\tuser: { id: userID },\n\t\t\t\t\tcid: this._channel.cid,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tclearMessages() {\n\t\tthis.messages = Immutable([]);\n\t}\n}\n","export const EVENT_MAP = {\n\t'user.presence.changed': true,\n\t'user.watching.start': true,\n\t'user.watching.stop': true,\n\t'user.updated': true,\n\t'user.deleted': true,\n\t'typing.start': true,\n\t'typing.stop': true,\n\t'message.new': true,\n\t'message.updated': true,\n\t'message.deleted': true,\n\t'message.read': true,\n\t'reaction.new': true,\n\t'reaction.deleted': true,\n\t'member.added': true,\n\t'member.updated': true,\n\t'member.removed': true,\n\t'channel.updated': true,\n\t'channel.muted': true,\n\t'channel.unmuted': true,\n\t'channel.deleted': true,\n\t'channel.truncated': true,\n\t'channel.created': true,\n\t'channel.hidden': true,\n\t'channel.visible': true,\n\t'health.check': true,\n\t'notification.message_new': true,\n\t'notification.mark_read': true,\n\t'notification.invited': true,\n\t'notification.invite_accepted': true,\n\t'notification.added_to_channel': true,\n\t'notification.removed_from_channel': true,\n\t'notification.mutes_updated': true,\n\t'notification.channel_deleted': true,\n\t'notification.channel_truncated': true,\n\t'notification.channel_mutes_updated': true,\n\t// local events\n\t'connection.changed': true,\n\t'connection.recovered': true,\n};\n\nexport function isValidEventType(eventType) {\n\tif (eventType === 'all') {\n\t\treturn true;\n\t}\n\treturn EVENT_MAP[eventType] || false;\n}\n","/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {type} promise The promise you want to run and log\n * @param {type} name    A descriptive name of what the promise does for log output\n *\n */\n\nexport function logChatPromiseExecution(promise, name) {\n\tpromise\n\t\t.then(() => {\n\t\t\t// do nothing...\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.warn(`failed to do ${name}, ran into error: `, error);\n\t\t});\n}\n\nexport const sleep = m => new Promise(r => setTimeout(r, m));\n\nexport function isFunction(value) {\n\treturn (\n\t\tvalue &&\n\t\t(Object.prototype.toString.call(value) === '[object Function]' ||\n\t\t\t'function' === typeof value ||\n\t\t\tvalue instanceof Function)\n\t);\n}\n\nexport const chatCodes = {\n\tTOKEN_EXPIRED: 40,\n\tWS_CLOSED_SUCCESS: 1000,\n};\n","import Immutable from 'seamless-immutable';\nimport { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution } from './utils';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel {\n\t/**\n\t * constructor - Create a channel\n\t *\n\t * @param {Client} client the chat client\n\t * @param {string} type  the type of channel\n\t * @param {string} [id]  the id of the chat\n\t * @param {type} custom any additional custom params\n\t *\n\t * @return {Channel} Returns a new uninitialized channel\n\t */\n\tconstructor(client, type, id, data) {\n\t\tconst validTypeRe = /^[\\w_-]+$/;\n\t\tconst validIDRe = /^[\\w!_-]+$/;\n\n\t\tif (!validTypeRe.test(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`,\n\t\t\t);\n\t\t}\n\t\tif (!validIDRe.test(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`,\n\t\t\t);\n\t\t}\n\n\t\tthis._client = client;\n\t\tthis.type = type;\n\t\tthis.id = id;\n\t\t// used by the frontend, gets updated:\n\t\tthis.data = data;\n\t\t// this._data is used for the requests...\n\t\tthis._data = { ...data };\n\n\t\tthis.cid = `${type}:${id}`;\n\t\tthis.listeners = {};\n\t\t// perhaps the state variable should be private\n\t\tthis.state = new ChannelState(this);\n\t\tthis.initialized = false;\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tthis.disconnected = false;\n\t}\n\n\t/**\n\t * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n\t *\n\t * @return {object}\n\t */\n\tgetClient() {\n\t\tif (this.disconnected === true) {\n\t\t\tthrow Error(`You can't use a channel after client.disconnect() was called`);\n\t\t}\n\t\treturn this._client;\n\t}\n\n\t/**\n\t * getConfig - Get the configs for this channel type\n\t *\n\t * @return {object}\n\t */\n\tgetConfig() {\n\t\tconst client = this.getClient();\n\t\treturn client.configs[this.type];\n\t}\n\n\t/**\n\t * sendMessage - Send a message to this channel\n\t *\n\t * @param {object} message The Message object\n\t *\n\t * @return {object} The Server Response\n\t */\n\n\tasync sendMessage(message) {\n\t\treturn await this.getClient().post(this._channelURL() + '/message', {\n\t\t\tmessage,\n\t\t});\n\t}\n\n\tsendFile(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/file`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tsendImage(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/image`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tdeleteFile(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/file`, { url });\n\t}\n\n\tdeleteImage(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/image`, { url });\n\t}\n\n\t/**\n\t * sendEvent - Send an event on this channel\n\t *\n\t * @param {object} event for example {type: 'message.read'}\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendEvent(event) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(this._channelURL() + '/event', {\n\t\t\tevent,\n\t\t});\n\t}\n\n\t/**\n\t * search - Query messages\n\t *\n\t * @param {object|string}  message search query or object MongoDB style filters\n\t * @param {object} options       Option object, {user_id: 'tommaso'}\n\t *\n\t * @return {object} search messages response\n\t */\n\tasync search(query, options = {}) {\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: { cid: this.cid },\n\t\t\t...options,\n\t\t};\n\t\tif (typeof query === 'string') {\n\t\t\tpayload.query = query;\n\t\t} else if (typeof query === 'object') {\n\t\t\tpayload.message_filter_conditions = query;\n\t\t} else {\n\t\t\tthrow Error(`Invalid type ${typeof query} for query parameter`);\n\t\t}\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\treturn await this.getClient().get(this.getClient().baseURL + '/search', {\n\t\t\tpayload,\n\t\t});\n\t}\n\n\t/**\n\t * search - Query Members\n\t *\n\t * @param {object}  filterConditions object MongoDB style filters\n\t * @param {object} sort             Sort options, for instance {created_at: -1}\n\t * @param {object} options        Option object, {limit: 10, offset:10}\n\t *\n\t * @return {object} search members response\n\t */\n\tasync queryMembers(filterConditions, sort = {}, options = {}) {\n\t\tconst sortFields = [];\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\t\tlet id;\n\t\tconst type = this.type;\n\t\tlet members;\n\t\tif (this.id) {\n\t\t\tid = this.id;\n\t\t} else if (this.data && Array.isArray(this.data.members)) {\n\t\t\tmembers = this.data.members;\n\t\t}\n\t\t// Return a list of members\n\t\treturn await this.getClient().get(this.getClient().baseURL + '/members', {\n\t\t\tpayload: {\n\t\t\t\ttype,\n\t\t\t\tid,\n\t\t\t\tmembers,\n\t\t\t\tsort: sortFields,\n\t\t\t\tfilter_conditions: filterConditions,\n\t\t\t\t...options,\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * sendReaction - Send a reaction about a message\n\t *\n\t * @param {string} messageID the message id\n\t * @param {object} reaction the reaction object for instance {type: 'love'}\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendReaction(messageID, reaction, user_id) {\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\tif (!reaction || Object.keys(reaction).length === 0) {\n\t\t\tthrow Error(`Reaction object is missing`);\n\t\t}\n\t\tconst body = {\n\t\t\treaction,\n\t\t};\n\t\tif (user_id != null) {\n\t\t\tbody.reaction = { ...reaction, user: { id: user_id } };\n\t\t}\n\t\treturn await this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction`,\n\t\t\tbody,\n\t\t);\n\t}\n\n\t/**\n\t * deleteReaction - Delete a reaction by user and type\n\t *\n\t * @param {string} messageID the id of the message from which te remove the reaction\n\t * @param {string} reactionType the type of reaction that should be removed\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tdeleteReaction(messageID, reactionType, user_id) {\n\t\tthis._checkInitialized();\n\t\tif (!reactionType || !messageID) {\n\t\t\tthrow Error(\n\t\t\t\t'Deleting a reaction requires specifying both the message and reaction type',\n\t\t\t);\n\t\t}\n\n\t\tconst url =\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n\t\t//provided when server side request\n\t\tif (user_id) {\n\t\t\treturn this.getClient().delete(url, { user_id });\n\t\t}\n\n\t\treturn this.getClient().delete(url);\n\t}\n\n\t/**\n\t * update - Edit the channel's custom properties\n\t *\n\t * @param {object} channelData The object to update the custom properties of this channel with\n\t * @param {object} updateMessage Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync update(channelData, updateMessage) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tmessage: updateMessage,\n\t\t\tdata: channelData,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * delete - Delete the channel. Messages are permanently removed.\n\t *\n\t * @return {object} The server response\n\t */\n\tasync delete() {\n\t\treturn await this.getClient().delete(this._channelURL());\n\t}\n\n\t/**\n\t * truncate - Removes all messages from the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync truncate() {\n\t\treturn await this.getClient().post(this._channelURL() + '/truncate');\n\t}\n\n\t/**\n\t * acceptInvite - accept invitation to the channel\n\t *\n\t * @param {object} options The object to update the custom properties of this channel with\n\t *\n\t * @return {type} The server response\n\t */\n\tasync acceptInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\taccept_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * acceptInvite - reject invitation to the channel\n\t *\n\t * @param {object} options The object to update the custom properties of this channel with\n\t *\n\t * @return {type} The server response\n\t */\n\tasync rejectInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\treject_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * addMembers - add members to the channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync addMembers(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_members: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * addModerators - add moderators to the channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync addModerators(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_moderators: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * inviteMembers - invite members to the channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync inviteMembers(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tinvites: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * removeMembers - remove members from channel\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync removeMembers(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tremove_members: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * demoteModerators - remove moderator role from channel members\n\t *\n\t * @param {array} members An array of member identifiers\n\t * @param {object} message Optional message object for channel members notification\n\t * @return {type} The server response\n\t */\n\tasync demoteModerators(members, message) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tdemote_moderators: members,\n\t\t\tmessage,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * mute - mutes the current channel\n\t * @param {object} \t\t\t\topts expiration or user_id\n\t * @return {object} \t\t\tThe server response\n\t *\n\t * example with expiration:\n\t * await channel.mute({expiration: moment.duration(2, 'weeks')});\n\t *\n\t * example server side:\n\t * await channel.mute({user_id: userId});\n\t *\n\t */\n\tasync mute(opts = {}) {\n\t\treturn await this.getClient().post(\n\t\t\tthis.getClient().baseURL + '/moderation/mute/channel',\n\t\t\t{\n\t\t\t\tchannel_cid: this.cid,\n\t\t\t\t...opts,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * unmute - mutes the current channel\n\t * @param {object} opts user_id\n\t * @return {object} \t\t\tThe server response\n\t *\n\t * example server side:\n\t * await channel.unmute({user_id: userId});\n\t */\n\tasync unmute(opts = {}) {\n\t\treturn await this.getClient().post(\n\t\t\tthis.getClient().baseURL + '/moderation/unmute/channel',\n\t\t\t{\n\t\t\t\tchannel_cid: this.cid,\n\t\t\t\t...opts,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * muteStatus - returns the mute status for the current channel\n\t * @return {object} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n\t */\n\tmuteStatus() {\n\t\tthis._checkInitialized();\n\t\treturn this.getClient()._muteStatus(this.cid);\n\t}\n\n\tsendAction(messageID, formData) {\n\t\tthis._checkInitialized();\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\treturn this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/action`,\n\t\t\t{\n\t\t\t\tmessage_id: messageID,\n\t\t\t\tform_data: formData,\n\t\t\t\tid: this.id,\n\t\t\t\ttype: this.type,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n\t *  Call this on every keystroke\n\t */\n\tasync keystroke() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tconst now = new Date();\n\t\tconst diff = now - this.lastTypingEvent;\n\t\tthis.lastKeyStroke = now;\n\t\tthis.isTyping = true;\n\t\t// send a typing.start every 2 seconds\n\t\tif (diff > 2000) {\n\t\t\tthis.lastTypingEvent = new Date();\n\t\t\tawait this.sendEvent({\n\t\t\t\ttype: 'typing.start',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * stopTyping - Sets last typing to null and sends the typing.stop event\n\t */\n\tasync stopTyping() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tawait this.sendEvent({\n\t\t\ttype: 'typing.stop',\n\t\t});\n\t}\n\n\t/**\n\t * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n\t *\n\t * @return {type} Description\n\t */\n\tlastMessage() {\n\t\t// get last 5 messages, sort, return the latest\n\t\t// get a slice of the last 5\n\t\tlet min = this.state.messages.length - 5;\n\t\tif (min < 0) {\n\t\t\tmin = 0;\n\t\t}\n\t\tconst max = this.state.messages.length + 1;\n\t\tconst messageSlice = this.state.messages.slice(min, max).asMutable();\n\n\t\t// sort by pk desc\n\t\tmessageSlice.sort((a, b) => b.created_at - a.created_at);\n\n\t\tlet lastMessage;\n\t\tif (messageSlice.length > 0) {\n\t\t\tlastMessage = messageSlice[0];\n\t\t}\n\t\treturn lastMessage;\n\t}\n\n\t/**\n\t * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markRead(data = {}) {\n\t\tthis._checkInitialized();\n\n\t\tif (!this.getConfig().read_events) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\treturn await this.getClient().post(this._channelURL() + '/read', {\n\t\t\t...data,\n\t\t});\n\t}\n\n\t/**\n\t * clean - Cleans the channel state and fires stop typing if needed\n\t */\n\tclean() {\n\t\tif (this.lastKeyStroke) {\n\t\t\tconst now = new Date();\n\t\t\tconst diff = now - this.lastKeyStroke;\n\t\t\tif (diff > 1000 && this.isTyping) {\n\t\t\t\tlogChatPromiseExecution(this.stopTyping(), 'stop typing event');\n\t\t\t}\n\t\t}\n\n\t\tthis.state.clean();\n\t}\n\n\t/**\n\t * watch - Loads the initial channel state and watches for changes\n\t *\n\t * @param {object} options additional options for the query endpoint\n\t *\n\t * @return {object} The server response\n\t */\n\tasync watch(options) {\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tif (!this.getClient()._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\tconst combined = { ...defaultOptions, ...options };\n\t\tconst state = await this.query(combined);\n\t\tthis.initialized = true;\n\t\tthis._initializeState(state);\n\t\tthis.data = state.channel;\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - started watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\t\treturn state;\n\t}\n\n\t/**\n\t * stopwatching - Stops watching the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync stopWatching() {\n\t\tconst response = await this.getClient().post(\n\t\t\tthis._channelURL() + '/stop-watching',\n\t\t\t{},\n\t\t);\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - stopped watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * getReplies - List the message replies for a parent message\n\t *\n\t * @param {type} parent_id The message parent id, ie the top of the thread\n\t * @param {type} options   Pagination params, ie {limit:10, idlte: 10}\n\t *\n\t * @return {type} A response with a list of messages\n\t */\n\tasync getReplies(parent_id, options) {\n\t\tconst data = await this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${parent_id}/replies`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\t// add any messages to our thread state\n\t\tif (data.messages) {\n\t\t\tthis.state.addMessagesSorted(data.messages);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * getReactions - List the reactions, supports pagination\n\t *\n\t * @param {string} message_id The message id\n\t * @param {object} options    The pagination options\n\t *\n\t * @return {object} Server response\n\t */\n\tgetReactions(message_id, options) {\n\t\treturn this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${message_id}/reactions`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * getMessagesById - Retrieves a list of messages by ID\n\t *\n\t * @param {string} messageIds The ids of the messages to retrieve from this channel\n\t *\n\t * @return {object} Server response\n\t */\n\tgetMessagesById(messageIds) {\n\t\treturn this.getClient().get(this._channelURL() + '/messages', {\n\t\t\tids: messageIds.join(','),\n\t\t});\n\t}\n\n\t/**\n\t * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n\t * @return {date}\n\t */\n\tlastRead() {\n\t\tthis._checkInitialized();\n\t\treturn this.state.read[this.getClient().userID]\n\t\t\t? this.state.read[this.getClient().userID].last_read\n\t\t\t: null;\n\t}\n\n\t/**\n\t * countUnread - Count the number of messages with a date thats newer than the last read timestamp\n\t *\n\t * @param [date] lastRead the time that the user read a message, defaults to current user's read state\n\t *\n\t * @return {int} Unread count\n\t */\n\tcountUnread(lastRead) {\n\t\tif (lastRead == null) {\n\t\t\tlastRead = this.lastRead();\n\t\t}\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.silent) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * countUnread - Count the number of unread messages mentioning the current user\n\t *\n\t * @return {int} Unread mentions count\n\t */\n\tcountUnreadMentions() {\n\t\tconst lastRead = this.lastRead();\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.silent) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tconst userID = this.getClient().userID;\n\t\t\t\tif (m.mentioned_users.findIndex(u => u.id === userID) !== -1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * create - Creates a new channel\n\t *\n\t * @return {type} The Server Response\n\t */\n\tcreate = async () => {\n\t\tconst options = {\n\t\t\twatch: false,\n\t\t\tstate: false,\n\t\t\tpresence: false,\n\t\t};\n\t\treturn await this.query(options);\n\t};\n\n\t/**\n\t * query - Query the API, get messages, members or other channel fields\n\t *\n\t * @param {object} options The query options\n\t *\n\t * @return {object} Returns a query response\n\t */\n\tasync query(options) {\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tlet queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n\t\tif (this.id) {\n\t\t\tqueryURL += `/${this.id}`;\n\t\t}\n\n\t\tconst state = await this.getClient().post(queryURL + '/query', {\n\t\t\tdata: this._data,\n\t\t\tstate: true,\n\t\t\t...options,\n\t\t});\n\n\t\t// update the channel id if it was missing\n\t\tif (!this.id) {\n\t\t\tthis.id = state.channel.id;\n\t\t\tthis.cid = state.channel.cid;\n\t\t\t// set the channel as active...\n\t\t\tif (!(this.cid in this.getClient().activeChannels)) {\n\t\t\t\tthis.getClient().activeChannels[this.cid] = this;\n\t\t\t}\n\t\t}\n\n\t\tthis.getClient()._addChannelConfig(state);\n\n\t\t// add any messages to our channel state\n\t\tthis._initializeState(state);\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * banUser - Bans a user from a channel\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().banUser(targetUserID, {\n\t\t\t...options,\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * hides the channel from queryChannels for the user until a message is added\n\t * If clearHistory is set to true - all messages will be removed for the user\n\t *\n\t * @param userId\n\t * @param clearHistory\n\t * @returns {Promise<*>}\n\t */\n\tasync hide(userId = null, clearHistory = false) {\n\t\tthis._checkInitialized();\n\n\t\treturn await this.getClient().post(`${this._channelURL()}/hide`, {\n\t\t\tuser_id: userId,\n\t\t\tclear_history: clearHistory,\n\t\t});\n\t}\n\n\t/**\n\t * removes the hidden status for a channel\n\t *\n\t * @param userId\n\t * @returns {Promise<*>}\n\t */\n\tasync show(userId = null) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(`${this._channelURL()}/show`, {\n\t\t\tuser_id: userId,\n\t\t});\n\t}\n\n\t/**\n\t * banUser - Removes the bans for a user on a channel\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().unbanUser(targetUserID, {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * on - Listen to events on this channel.\n\t *\n\t * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * channel.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Attaching listener for ${key} event on channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.listeners[key].push(callback);\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Removing listener for ${key} event from channel ${this.cid}`,\n\t\t\t{ tags: ['event', 'channel'], channel: this },\n\t\t);\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_handleChannelEvent(event) {\n\t\tconst channel = this;\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tconst s = channel.state;\n\t\tswitch (event.type) {\n\t\t\tcase 'typing.start':\n\t\t\t\ts.typing = s.typing.set(event.user.id, Immutable(event));\n\t\t\t\tbreak;\n\t\t\tcase 'typing.stop':\n\t\t\t\ts.typing = s.typing.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.read':\n\t\t\t\ts.read = s.read.set(\n\t\t\t\t\tevent.user.id,\n\t\t\t\t\tImmutable({ user: { ...event.user }, last_read: event.received_at }),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.start':\n\t\t\tcase 'user.updated':\n\t\t\t\ts.watchers = s.watchers.set(event.user.id, Immutable(event.user));\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.stop':\n\t\t\t\ts.watchers = s.watchers.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.new':\n\t\t\tcase 'message.updated':\n\t\t\tcase 'message.deleted':\n\t\t\t\ts.addMessageSorted(event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.truncated':\n\t\t\t\ts.clearMessages();\n\t\t\t\tbreak;\n\t\t\tcase 'member.added':\n\t\t\tcase 'member.updated':\n\t\t\t\ts.members = s.members.set(event.member.user_id, Immutable(event.member));\n\t\t\t\tbreak;\n\t\t\tcase 'member.removed':\n\t\t\t\ts.members = s.members.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.updated':\n\t\t\t\tchannel.data = Immutable(event.channel);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.new':\n\t\t\t\ts.addReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.deleted':\n\t\t\t\ts.removeReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.hidden':\n\t\t\t\tif (event.clear_history) {\n\t\t\t\t\ts.clearMessages();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\t// any event can send over the online count\n\t\tif (event.watcher_count !== undefined) {\n\t\t\tchannel.state.watcher_count = event.watcher_count;\n\t\t}\n\t}\n\n\t_callChannelListeners = event => {\n\t\tconst channel = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (channel.listeners.all) {\n\t\t\tlisteners.push(...channel.listeners.all);\n\t\t}\n\t\tif (channel.listeners[event.type]) {\n\t\t\tlisteners.push(...channel.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\t/**\n\t * _channelURL - Returns the channel url\n\t *\n\t * @return {string} The channel url\n\t */\n\t_channelURL = () => {\n\t\tif (!this.id) {\n\t\t\tthrow new Error('channel id is not defined');\n\t\t}\n\t\treturn `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n\t};\n\n\t_checkInitialized() {\n\t\tif (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n\t\t\tthrow Error(\n\t\t\t\t`Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n\t\t\t);\n\t\t}\n\t}\n\n\t_initializeState(state) {\n\t\t// add the Users\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.getClient().state.updateUserReference(m.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\tthis.state.membership = Immutable(state.membership ? state.membership : {});\n\n\t\tif (state.watchers) {\n\t\t\tfor (const w of state.watchers) {\n\t\t\t\tthis.getClient().state.updateUserReference(w.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\t// immutable list of maps\n\t\tconst messages = state.messages || [];\n\t\tif (!this.state.messages) {\n\t\t\tthis.state.messages = Immutable([]);\n\t\t}\n\t\tthis.state.addMessagesSorted(messages, true);\n\t\tthis.state.watcher_count = state.watcher_count;\n\t\t// convert the arrays into objects for easier syncing...\n\t\tif (state.watchers) {\n\t\t\tfor (const watcher of state.watchers) {\n\t\t\t\tthis.state.watchers = this.state.watchers.set(watcher.id, watcher);\n\t\t\t}\n\t\t}\n\n\t\t// initialize read state to last message or current time if the channel is empty\n\t\t// if the user is a member, this value will be overwritten later on otherwise this ensures\n\t\t// that eveything up to this point is not marked as unread\n\t\tif (this.getClient().userID != null) {\n\t\t\tconst last_read =\n\t\t\t\tthis.state.last_message_at != null\n\t\t\t\t\t? this.state.last_message_at\n\t\t\t\t\t: new Date();\n\t\t\tthis.state.read = this.state.read.set(this.getClient().user.id, {\n\t\t\t\tuser: this.getClient().user,\n\t\t\t\tlast_read,\n\t\t\t});\n\t\t}\n\n\t\t// apply read state if part of the state\n\t\tif (state.read) {\n\t\t\tfor (const read of state.read) {\n\t\t\t\tconst parsedRead = Object.assign({ ...read });\n\t\t\t\tparsedRead.last_read = new Date(read.last_read);\n\t\t\t\tthis.state.read = this.state.read.set(read.user.id, parsedRead);\n\t\t\t}\n\t\t}\n\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.state.members = this.state.members.set(m.user.id, m);\n\t\t\t}\n\t\t}\n\t}\n\n\t_disconnect() {\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:disconnect() - Disconnecting the channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['connection', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.disconnected = true;\n\t}\n}\n","import Immutable from 'seamless-immutable';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState {\n\tconstructor() {\n\t\t// show the status for a certain user...\n\t\t// ie online, offline etc\n\t\tthis.users = Immutable({});\n\t\t// store which channels contain references to the specified user...\n\t\tthis.userChannelReferences = {};\n\t}\n\n\tupdateUsers(users) {\n\t\tfor (const user of users) {\n\t\t\tthis.updateUser(user);\n\t\t}\n\t}\n\n\tupdateUser(user) {\n\t\tif (user != null) {\n\t\t\tthis.users = this.users.set(user.id, Immutable(user));\n\t\t}\n\t}\n\n\tupdateUserReference(user, channelID) {\n\t\tif (user == null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.updateUser(user);\n\t\tif (!this.userChannelReferences[user.id]) {\n\t\t\tthis.userChannelReferences[user.id] = {};\n\t\t}\n\t\tthis.userChannelReferences[user.id][channelID] = true;\n\t}\n}\n","import isoWS from 'isomorphic-ws';\nimport { sleep, chatCodes } from './utils';\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n\tconstructor({\n\t\twsBaseURL,\n\t\tclientID,\n\t\tuserID,\n\t\tuser,\n\t\tuserAgent,\n\t\tapiKey,\n\t\ttokenManager,\n\t\tauthType,\n\t\tmessageCallback,\n\t\trecoverCallback,\n\t\teventCallback,\n\t\tlogger,\n\t}) {\n\t\tthis.wsBaseURL = wsBaseURL;\n\t\tthis.clientID = clientID;\n\t\tthis.userID = userID;\n\t\tthis.user = user;\n\t\tthis.authType = authType;\n\t\tthis.userAgent = userAgent;\n\t\tthis.apiKey = apiKey;\n\t\tthis.tokenManager = tokenManager;\n\t\t/** consecutive failures influence the duration of the timeout */\n\t\tthis.consecutiveFailures = 0;\n\t\t/** keep track of the total number of failures */\n\t\tthis.totalFailures = 0;\n\n\t\t/** We only make 1 attempt to reconnect at the same time.. */\n\t\tthis.isConnecting = false;\n\t\t/** Boolean that indicates if we have a working connection to the server */\n\t\tthis.isHealthy = false;\n\n\t\t/** Callback when the connection fails and recovers */\n\t\tthis.recoverCallback = recoverCallback;\n\t\tthis.messageCallback = messageCallback;\n\t\tthis.eventCallback = eventCallback;\n\n\t\tthis.logger = logger;\n\n\t\t/** Incremented when a new WS connection is made */\n\t\tthis.wsID = 1;\n\n\t\t/** Store the last event time for health checks */\n\t\tthis.lastEvent = null;\n\n\t\t/** Send a health check message every 30 seconds */\n\t\tthis.healthCheckInterval = 30 * 1000;\n\t\t/** Every second we verify that we didn't miss any health checks */\n\t\tthis.monitorInterval = 1 * 1000;\n\n\t\tthis._listenForConnectionChanges();\n\t}\n\n\t/**\n\t * connect - Connect to the WS URL\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync connect() {\n\t\tlet healthCheck;\n\t\tif (this.isConnecting) {\n\t\t\tthrow Error(\n\t\t\t\t`You've called connect twice, can only attempt 1 connection at the time`,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tthis.isConnecting = true;\n\t\t\thealthCheck = await this._connect();\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t\tthis._startMonitor();\n\t\t\tthis._startHealthCheck();\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:connect() - Established ws connection with healthcheck: ${healthCheck}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn healthCheck;\n\t\t} catch (error) {\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.isHealthy = false;\n\t\t\tthis.consecutiveFailures += 1;\n\t\t\tif (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\treturn this._reconnect({ refreshToken: true });\n\t\t\t}\n\n\t\t\tif (!error.isWSFailure) {\n\t\t\t\t// This is a permanent failure, throw the error...\n\t\t\t\t// We are keeping the error consistent with http error.\n\t\t\t\tthrow new Error(\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tcode: error.code,\n\t\t\t\t\t\tStatusCode: error.StatusCode,\n\t\t\t\t\t\tmessage: error.message,\n\t\t\t\t\t\tisWSFailure: error.isWSFailure,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t_buildUrl = () => {\n\t\tconst params = {\n\t\t\tuser_id: this.user.id,\n\t\t\tuser_details: this.user,\n\t\t\tuser_token: this.tokenManager.getToken(),\n\t\t\tserver_determines_connection_id: true,\n\t\t};\n\t\tconst qs = encodeURIComponent(JSON.stringify(params));\n\t\tconst token = this.tokenManager.getToken();\n\t\treturn `${this.wsBaseURL}/connect?json=${qs}&api_key=${this.apiKey}&authorization=${token}&stream-auth-type=${this.authType}&x-stream-client=${this.userAgent}`;\n\t};\n\n\t/**\n\t * disconnect - Disconnect the connection and doesn't recover...\n\t *\n\t */\n\tdisconnect(timeout) {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`connection:disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\n\t\tthis.wsID += 1;\n\n\t\t// start by removing all the listeners\n\t\tif (this.healthCheckIntervalRef) {\n\t\t\tclearInterval(this.healthCheckIntervalRef);\n\t\t}\n\t\tif (this.monitorIntervalRef) {\n\t\t\tclearInterval(this.monitorIntervalRef);\n\t\t}\n\n\t\tthis._removeConnectionListeners();\n\n\t\tthis.isHealthy = false;\n\n\t\t// remove ws handlers...\n\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\tthis.ws.removeAllListeners();\n\t\t}\n\n\t\tlet isClosedPromise;\n\t\t// and finally close...\n\t\t// Assigning to local here because we will remove it from this before the\n\t\t// promise resolves.\n\t\tconst { ws } = this;\n\t\tif (ws && ws.close && ws.readyState === ws.OPEN) {\n\t\t\tisClosedPromise = new Promise(resolve => {\n\t\t\t\tconst onclose = event => {\n\t\t\t\t\tthis.logger(\n\t\t\t\t\t\t'info',\n\t\t\t\t\t\t`connection:disconnect() - resolving isClosedPromise ${\n\t\t\t\t\t\t\tevent ? 'with' : 'without'\n\t\t\t\t\t\t} close frame`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t\t\tevent,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\n\t\t\t\tws.onclose = onclose;\n\t\t\t\t// In case we don't receive close frame websocket server in time,\n\t\t\t\t// lets not wait for more than 1 seconds.\n\t\t\t\tsetTimeout(onclose, timeout != null ? timeout : 1000);\n\t\t\t});\n\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:disconnect() - Manually closed connection by calling client.disconnect()`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tws.close(\n\t\t\t\tchatCodes.WS_CLOSED_SUCCESS,\n\t\t\t\t'Manually closed connection by calling client.disconnect()',\n\t\t\t);\n\t\t} else {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:disconnect() - ws connection doesn't exist or it is already closed.`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tisClosedPromise = Promise.resolve();\n\t\t}\n\n\t\tdelete this.ws;\n\n\t\treturn isClosedPromise;\n\t}\n\n\t/**\n\t * _connect - Connect to the WS endpoint\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync _connect() {\n\t\tawait this.tokenManager.tokenReady();\n\t\tthis._setupConnectionPromise();\n\t\tconst wsURL = this._buildUrl();\n\t\tthis.ws = new isoWS(wsURL);\n\t\tthis.ws.onopen = this.onopen.bind(this, this.wsID);\n\t\tthis.ws.onclose = this.onclose.bind(this, this.wsID);\n\t\tthis.ws.onerror = this.onerror.bind(this, this.wsID);\n\t\tthis.ws.onmessage = this.onmessage.bind(this, this.wsID);\n\t\tconst response = await this.connectionOpen;\n\n\t\tthis.connectionID = response.connection_id;\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * _reconnect - Retry the connection to WS endpoint\n\t *\n\t * @param {object} options Following options are available\n\t *\n\t * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n\t * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n\t */\n\tasync _reconnect(options = {}) {\n\t\tthis.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t\t// only allow 1 connection at the time\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (1) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// reconnect in case of on error or on close\n\t\t// also reconnect if the health check cycle fails\n\t\tlet interval = options.interval;\n\t\tif (!interval) {\n\t\t\tinterval = this._retryInterval();\n\t\t}\n\t\t// reconnect, or try again after a little while...\n\t\tawait sleep(interval);\n\n\t\t// Check once again if by some other call to _reconnect is active or connection is\n\t\t// already restored, then no need to proceed.\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (2) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isConnecting = true;\n\n\t\t// cleanup the old connection\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t'connection:_reconnect() - Destroying current WS connection',\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\n\t\tthis._destroyCurrentWSConnection();\n\n\t\tif (options.refreshToken) {\n\t\t\tawait this.tokenManager.loadToken();\n\t\t}\n\n\t\ttry {\n\t\t\tconst open = await this._connect();\n\t\t\tif (this.recoverCallback) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() - Waiting for recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tawait this.recoverCallback(open);\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() - Finished recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t} catch (error) {\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.isHealthy = false;\n\t\t\tthis.consecutiveFailures += 1;\n\t\t\tif (error.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\treturn this._reconnect({ refreshToken: true });\n\t\t\t}\n\n\t\t\t// reconnect on WS failures, dont reconnect if there is a code bug\n\t\t\tif (error.isWSFailure) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() - WS failure, so going to try to reconnect',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\n\t\t\t\tthis._reconnect();\n\t\t\t}\n\t\t}\n\t\tthis.logger('info', 'connection:_reconnect() - == END ==', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t}\n\n\t/**\n\t * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n\t *\n\t * @param {object} event Event with type online or offline\n\t *\n\t */\n\tonlineStatusChanged = event => {\n\t\tif (event.type === 'offline') {\n\t\t\t// mark the connection as down\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:onlineStatusChanged() - Status changing to offline',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._setHealth(false);\n\t\t} else if (event.type === 'online') {\n\t\t\t// retry right now...\n\t\t\t// We check this.isHealthy, not sure if it's always\n\t\t\t// smart to create a new WS connection if the old one is still up and running.\n\t\t\t// it's possible we didnt miss any messages, so this process is just expensive and not needed.\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!this.isHealthy) {\n\t\t\t\tthis._reconnect({ interval: 10 });\n\t\t\t}\n\t\t}\n\t};\n\n\tonopen = wsID => {\n\t\tif (this.wsID !== wsID) return;\n\t\tthis.logger('info', 'connection:onopen() - onopen callback', {\n\t\t\ttags: ['connection'],\n\t\t\twsID,\n\t\t});\n\n\t\t// set healthy..\n\t\tthis._setHealth(true);\n\t};\n\n\tonmessage = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// we wait till the first message before we consider the connection open..\n\t\t// the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n\t\t// after that a ws.onclose..\n\t\tif (!this.isResolved) {\n\t\t\tconst data = JSON.parse(event.data);\n\t\t\tif (data.error != null) {\n\t\t\t\tthis.rejectPromise(this._errorFromWSEvent(data.error, false));\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.resolvePromise(event);\n\t\t\t}\n\t\t}\n\n\t\t// trigger the event..\n\t\tthis.lastEvent = new Date();\n\t\tthis.logger('info', 'connection:onmessage() - onmessage callback', {\n\t\t\ttags: ['connection'],\n\t\t\tevent,\n\t\t\twsID,\n\t\t});\n\n\t\tthis.messageCallback(event);\n\t};\n\n\tonclose = (wsID, event) => {\n\t\tthis.logger('info', 'connection:onclose() - onclose callback - ' + event.code, {\n\t\t\ttags: ['connection'],\n\t\t\tevent,\n\t\t\twsID,\n\t\t});\n\n\t\tif (this.wsID !== wsID) return;\n\n\t\tif (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n\t\t\t// this is a permanent error raised by stream..\n\t\t\t// usually caused by invalid auth details\n\t\t\tconst error = new Error(`WS connection reject with error ${event.reason}`);\n\t\t\terror.reason = event.reason;\n\t\t\tthis.rejectPromise(error);\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onclose() - WS connection reject with error ${event.reason}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\tevent,\n\t\t\t\t},\n\t\t\t);\n\t\t} else {\n\t\t\tthis.consecutiveFailures += 1;\n\t\t\tthis.totalFailures += 1;\n\t\t\tthis._setHealth(false);\n\n\t\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onclose() - WS connection closed. Calling reconnect ...`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\tevent,\n\t\t\t\t},\n\t\t\t);\n\n\t\t\t// reconnect if its an abnormal failure\n\t\t\tthis._reconnect();\n\t\t}\n\t};\n\n\tonerror = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tthis.consecutiveFailures += 1;\n\t\tthis.totalFailures += 1;\n\t\tthis._setHealth(false);\n\n\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\t\tthis.logger('info', `connection:onerror() - WS connection resulted into error`, {\n\t\t\ttags: ['connection'],\n\t\t\tevent,\n\t\t});\n\n\t\tthis._reconnect();\n\t};\n\n\t/**\n\t * _setHealth - Sets the connection to healthy or unhealthy.\n\t * Broadcasts an event in case the connection status changed.\n\t *\n\t * @param {bool} healthy boolean indicating if the connection is healthy or not\n\t *\n\t */\n\t_setHealth = healthy => {\n\t\tif (healthy && !this.isHealthy) {\n\t\t\t// yee we are online:\n\t\t\tthis.isHealthy = true;\n\t\t\tthis.eventCallback({\n\t\t\t\ttype: 'connection.changed',\n\t\t\t\tonline: true,\n\t\t\t});\n\t\t}\n\n\t\tif (!healthy && this.isHealthy) {\n\t\t\t// bummer we are offline\n\t\t\tthis.isHealthy = false;\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!this.isHealthy) {\n\t\t\t\t\tthis.eventCallback({\n\t\t\t\t\t\ttype: 'connection.changed',\n\t\t\t\t\t\tonline: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t}\n\t};\n\n\t/**\n\t * _errorFromWSEvent - Creates an error object for the WS event\n\t *\n\t */\n\t_errorFromWSEvent = (event, isWSFailure = true) => {\n\t\t// Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n\t\tthis.logger(\n\t\t\t'warn',\n\t\t\t`connection:_errorFromWSEvent() - WS failed with code ${event.code}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t\tevent,\n\t\t\t},\n\t\t);\n\n\t\tconst error = new Error(\n\t\t\t`WS failed with code ${event.code} and reason - ${event.message}`,\n\t\t);\n\t\terror.code = event.code;\n\t\terror.StatusCode = event.StatusCode;\n\t\terror.isWSFailure = isWSFailure;\n\t\treturn error;\n\t};\n\n\t/**\n\t * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n\t *\n\t */\n\t_listenForConnectionChanges = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.addEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.addEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t_removeConnectionListeners = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.removeEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.removeEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t/**\n\t * _destroyCurrentWSConnection - Removes the current WS connnection\n\t *\n\t */\n\t_destroyCurrentWSConnection() {\n\t\t// increment the ID, meaning we will ignore all messages from the old\n\t\t// ws connection from now on.\n\t\tthis.wsID += 1;\n\n\t\ttry {\n\t\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\t\tthis.ws.removeAllListeners();\n\t\t\t}\n\n\t\t\tif (this.ws && this.ws.close) {\n\t\t\t\tthis.ws.close();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// we dont care\n\t\t}\n\t}\n\n\t/**\n\t * _retryInterval - A retry interval which increases after consecutive failures\n\t *\n\t * @return {int} Duration to wait in milliseconds\n\t */\n\t_retryInterval = () => {\n\t\t// try to reconnect in 0-5 seconds (random to spread out the load from failures)\n\t\tconst max = Math.min(500 + this.consecutiveFailures * 2000, 25000);\n\t\tconst min = Math.min(Math.max(250, (this.consecutiveFailures - 1) * 2000), 25000);\n\t\treturn Math.floor(Math.random() * (max - min) + min);\n\t};\n\n\t/**\n\t * _setupPromise - sets up the this.connectOpen promise\n\t */\n\t_setupConnectionPromise = () => {\n\t\tconst that = this;\n\t\tthis.isResolved = false;\n\t\t/** a promise that is resolved once ws.open is called */\n\t\tthis.connectionOpen = new Promise(function(resolve, reject) {\n\t\t\tthat.resolvePromise = resolve;\n\t\t\tthat.rejectPromise = reject;\n\t\t}).then(\n\t\t\te => {\n\t\t\t\tconst data = JSON.parse(e.data);\n\t\t\t\tif (data.error != null) {\n\t\t\t\t\tthrow new Error(JSON.stringify(data.error));\n\t\t\t\t}\n\t\t\t\treturn data;\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tthrow error;\n\t\t\t},\n\t\t);\n\t};\n\n\t/**\n\t * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works\n\t *\n\t */\n\t_startHealthCheck() {\n\t\tconst that = this;\n\t\t// 30 seconds is the recommended interval (messenger uses this)\n\t\tthis.healthCheckIntervalRef = setInterval(() => {\n\t\t\t// send the healthcheck.., server replies with a health check event\n\t\t\tconst data = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'health.check',\n\t\t\t\t\tclient_id: that.clientID,\n\t\t\t\t\tuser_id: that.userID,\n\t\t\t\t},\n\t\t\t];\n\t\t\t// try to send on the connection\n\t\t\ttry {\n\t\t\t\tthat.ws.send(JSON.stringify(data));\n\t\t\t} catch (e) {\n\t\t\t\t// error will already be detected elsewhere\n\t\t\t}\n\t\t}, that.healthCheckInterval);\n\t}\n\n\t/**\n\t * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.\n\t *\n\t */\n\t_startMonitor() {\n\t\tconst that = this;\n\t\tthis.monitorIntervalRef = setInterval(() => {\n\t\t\tconst now = new Date();\n\t\t\t// means we missed a health check\n\t\t\tif (now - that.lastEvent > this.healthCheckInterval + 10 * 1000) {\n\t\t\t\tthis.logger('info', 'connection:_startMonitor - going to reconnect', {\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t});\n\t\t\t\tthat._setHealth(false);\n\t\t\t\tthat._reconnect();\n\t\t\t}\n\t\t}, that.monitorInterval);\n\t}\n}\n","import { fromByteArray } from 'base64-js';\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nconst map = (arr, callback) => {\n\tconst res = [];\n\tlet kValue, mappedValue;\n\n\tfor (let k = 0, len = arr.length; k < len; k++) {\n\t\tif (typeof arr === 'string' && !!arr.charAt(k)) {\n\t\t\tkValue = arr.charAt(k);\n\t\t\tmappedValue = callback(kValue, k, arr);\n\t\t\tres[k] = mappedValue;\n\t\t} else if (typeof arr !== 'string' && k in arr) {\n\t\t\tkValue = arr[k];\n\t\t\tmappedValue = callback(kValue, k, arr);\n\t\t\tres[k] = mappedValue;\n\t\t}\n\t}\n\treturn res;\n};\n\nexport function encodeBase64(data) {\n\treturn fromByteArray(\n\t\tmap(data, function(char) {\n\t\t\treturn char.charCodeAt(0);\n\t\t}),\n\t);\n}\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport function decodeBase64(s) {\n\tconst e = {},\n\t\tw = String.fromCharCode,\n\t\tL = s.length;\n\tlet i,\n\t\tb = 0,\n\t\tc,\n\t\tx,\n\t\tl = 0,\n\t\ta,\n\t\tr = '';\n\tconst A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\tfor (i = 0; i < 64; i++) {\n\t\te[A.charAt(i)] = i;\n\t}\n\tfor (x = 0; x < L; x++) {\n\t\tc = e[s.charAt(x)];\n\t\tb = (b << 6) + c;\n\t\tl += 6;\n\t\twhile (l >= 8) {\n\t\t\t((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n\t\t}\n\t}\n\treturn r;\n}\n","import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserSessionToken\n * @memberof signing\n * @private\n * @param {string} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {object} [extraData] - Extra that should be part of the JWT token\n * @param {object} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n\tif (typeof userId !== 'string') {\n\t\tthrow new TypeError('userId should be a string');\n\t}\n\n\tconst payload = {\n\t\tuser_id: userId,\n\t\t...extraData,\n\t};\n\n\t// make sure we return a clear error when jwt is shimmed (ie. browser build)\n\tif (jwt == null || jwt.sign == null) {\n\t\tthrow Error(\n\t\t\t`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n\t\t);\n\t}\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret, jwtOptions = {}) {\n\tconst payload = {\n\t\tserver: true,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\n/**\n * @return {string}\n */\nexport function UserFromToken(token) {\n\tconst fragments = token.split('.');\n\tif (fragments.length !== 3) {\n\t\treturn '';\n\t}\n\tconst b64Payload = fragments[1];\n\tconst payload = decodeBase64(b64Payload);\n\tconst data = JSON.parse(payload);\n\treturn data.user_id;\n}\n\n/**\n *\n * @param userId {string} the id of the user\n * @return {string}\n */\nexport function DevToken(userId) {\n\treturn [\n\t\t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n\t\tencodeBase64(JSON.stringify({ user_id: userId })),\n\t\t'devtoken', // hardcoded signature\n\t].join('.');\n}\n\n/**\n *\n * @param body {string} the signed message\n * @param secret {string} the shared secret used to generate the signature (Stream API secret)\n * @param signature {string} the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body, secret, signature) {\n\tconst key = Buffer.from(secret, 'ascii');\n\tconst hash = crypto\n\t\t.createHmac('sha256', key)\n\t\t.update(body)\n\t\t.digest('hex');\n\treturn hash === signature;\n}\n","import { UserFromToken, JWTServerToken, JWTUserToken } from './signing';\nimport { isFunction } from './utils';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager {\n\t/**\n\t * Constructor\n\t *\n\t * @param {object} secret\n\t */\n\tconstructor(secret) {\n\t\tthis.loadTokenPromise = null;\n\t\tif (secret) {\n\t\t\tthis.secret = secret;\n\t\t}\n\n\t\tthis.type = 'static';\n\n\t\tif (this.secret) {\n\t\t\tthis.token = JWTServerToken(this.secret);\n\t\t}\n\t}\n\n\t/**\n\t * Set the static string token or token provider.\n\t * Token provider should return a token string or a promise which resolves to string token.\n\t *\n\t * @param {string | function} tokenOrProvider\n\t */\n\tsetTokenOrProvider = async (tokenOrProvider, user) => {\n\t\tthis.validateToken(tokenOrProvider, user);\n\t\tthis.user = user;\n\n\t\tif (isFunction(tokenOrProvider)) {\n\t\t\tthis.tokenProvider = tokenOrProvider;\n\t\t\tthis.type = 'provider';\n\t\t}\n\n\t\tif (typeof tokenOrProvider === 'string') {\n\t\t\tthis.token = tokenOrProvider;\n\t\t\tthis.type = 'static';\n\t\t}\n\n\t\tif (!tokenOrProvider && this.user && this.secret) {\n\t\t\tthis.token = JWTUserToken(this.secret, user.id, {}, {});\n\t\t\tthis.type = 'static';\n\t\t}\n\n\t\tawait this.loadToken();\n\t};\n\n\t/**\n\t * Resets the token manager.\n\t * Useful for client disconnection or switching user.\n\t */\n\treset = () => {\n\t\tthis.token = null;\n\t\tthis.user = null;\n\t\tthis.loadTokenPromise = null;\n\t};\n\n\t// Validates the user token.\n\tvalidateToken = (tokenOrProvider, user) => {\n\t\t// allow empty token for anon user\n\t\tif (user && user.anon && !tokenOrProvider) return;\n\n\t\t// Don't allow empty token for non-server side client.\n\t\tif (!this.secret && !tokenOrProvider) {\n\t\t\tthrow new Error('User token can not be empty');\n\t\t}\n\n\t\tif (\n\t\t\ttokenOrProvider &&\n\t\t\ttypeof tokenOrProvider !== 'string' &&\n\t\t\t!isFunction(tokenOrProvider)\n\t\t) {\n\t\t\tthrow new Error('user token should either be a string or a function');\n\t\t}\n\n\t\tif (typeof tokenOrProvider === 'string') {\n\t\t\t// Allow empty token for anonymous users\n\t\t\tif (user.anon && tokenOrProvider === '') return;\n\n\t\t\tconst tokenUserId = UserFromToken(tokenOrProvider);\n\t\t\tif (\n\t\t\t\ttokenOrProvider != null &&\n\t\t\t\t(tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'userToken does not have a user_id or is not matching with user.id',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n\n\t// Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n\t// case a function should wait.\n\ttokenReady = () => this.loadTokenPromise;\n\n\t// Fetches a token from tokenProvider function and sets in tokenManager.\n\t// In case of static token, it will simply resolve to static token.\n\tloadToken = () => {\n\t\tthis.loadTokenPromise = new Promise(async resolve => {\n\t\t\tif (this.type === 'static') {\n\t\t\t\treturn resolve(this.token);\n\t\t\t}\n\n\t\t\tthis.token = await this.tokenProvider();\n\n\t\t\tresolve(this.token);\n\t\t});\n\n\t\treturn this.loadTokenPromise;\n\t};\n\n\t// Returns a current token\n\tgetToken = () => {\n\t\tif (this.token) {\n\t\t\treturn this.token;\n\t\t}\n\n\t\tif (this.user && this.user.anon && !this.token) {\n\t\t\treturn this.token;\n\t\t}\n\n\t\tif (this.secret) {\n\t\t\treturn JWTServerToken(this.secret);\n\t\t}\n\n\t\tthrow new Error(\n\t\t\t`Both secret and user tokens are not set. Either client.setUser wasn't called or client.disconnect was called`,\n\t\t);\n\t};\n\n\tisStatic = () => this.type === 'static';\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\n\nimport { isValidEventType } from './events';\n\nimport { JWTUserToken, DevToken, CheckSignature } from './signing';\nimport http from 'http';\nimport https from 'https';\nimport FormData from 'form-data';\nimport pkg from '../package.json';\nimport { TokenManager } from './token_manager';\nimport { isFunction, chatCodes } from './utils';\n\nfunction isReadableStream(obj) {\n\treturn (\n\t\tobj !== null &&\n\t\ttypeof obj === 'object' &&\n\t\ttypeof obj._read === 'function' &&\n\t\ttypeof obj._readableState === 'object'\n\t);\n}\n\nexport class StreamChat {\n\tconstructor(key, secretOrOptions, options) {\n\t\t// set the key\n\t\tthis.key = key;\n\t\tthis.secret = null;\n\t\tthis.listeners = {};\n\t\tthis.state = new ClientState();\n\t\t// a list of channels to hide ws events from\n\t\tthis.mutedChannels = [];\n\n\t\t// set the secret\n\t\tif (secretOrOptions && secretOrOptions.indexOf) {\n\t\t\tthis.secret = secretOrOptions;\n\t\t}\n\n\t\t// set the options... and figure out defaults...\n\t\toptions = options || secretOrOptions;\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.browser =\n\t\t\ttypeof options.browser !== 'undefined'\n\t\t\t\t? options.browser\n\t\t\t\t: typeof window !== 'undefined';\n\t\tthis.node = !this.browser;\n\n\t\tconst defaultOptions = {\n\t\t\ttimeout: 3000,\n\t\t\twithCredentials: false, // making sure cookies are not sent\n\t\t};\n\n\t\tif (this.node) {\n\t\t\tconst nodeOptions = {\n\t\t\t\thttpAgent: new http.Agent({ keepAlive: 3000 }),\n\t\t\t\thttpsAgent: new https.Agent({ keepAlive: 3000 }),\n\t\t\t};\n\t\t\tthis.options = { ...nodeOptions, ...defaultOptions, ...options };\n\t\t} else {\n\t\t\tthis.options = { ...defaultOptions, ...options };\n\t\t\tdelete this.options.httpAgent;\n\t\t\tdelete this.options.httpsAgent;\n\t\t}\n\n\t\tthis.axiosInstance = axios.create(this.options);\n\n\t\tthis.setBaseURL('https://chat-us-east-1.stream-io-api.com');\n\n\t\tif (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n\t\t\tthis.setBaseURL('http://localhost:3030');\n\t\t}\n\n\t\t// WS connection is initialized when setUser is called\n\t\tthis.wsConnection = null;\n\t\tthis.wsPromise = null;\n\t\tthis.setUserPromise = null;\n\t\t// keeps a reference to all the channels that are in use\n\t\tthis.activeChannels = {};\n\t\t// mapping between channel groups and configs\n\t\tthis.configs = {};\n\t\tthis.anonymous = false;\n\n\t\t// If its a server-side client, then lets initialize the tokenManager, since token will be\n\t\t// generated from secret.\n\t\tthis.tokenManager = new TokenManager(this.secret);\n\n\t\t/**\n\t\t * logger function should accept 3 parameters:\n\t\t * @param logLevel string\n\t\t * @param message   string\n\t\t * @param extraData object\n\t\t *\n\t\t * e.g.,\n\t\t * const client = new StreamChat('api_key', {}, {\n\t\t * \t\tlogger = (logLevel, message, extraData) => {\n\t\t * \t\t\tconsole.log(message);\n\t\t * \t\t}\n\t\t * })\n\t\t *\n\t\t * extraData contains tags array attached to log message. Tags can have one/many of following values:\n\t\t * 1. api\n\t\t * 2. api_request\n\t\t * 3. api_response\n\t\t * 4. client\n\t\t * 5. channel\n\t\t * 6. connection\n\t\t * 7. event\n\t\t *\n\t\t * It may also contains some extra data, some examples have been mentioned below:\n\t\t * 1. {\n\t\t * \t\ttags: ['api', 'api_request', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tpayload: object,\n\t\t * \t\tconfig: object\n\t\t * }\n\t\t * 2. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tresponse: object\n\t\t * }\n\t\t * 3. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\terror: object\n\t\t * }\n\t\t * 4. {\n\t\t * \t\ttags: ['event', 'client'],\n\t\t * \t\tevent: object\n\t\t * }\n\t\t * 5. {\n\t\t * \t\ttags: ['channel'],\n\t\t * \t\tchannel: object\n\t\t * }\n\t\t */\n\t\tthis.logger = isFunction(options.logger) ? options.logger : () => {};\n\t}\n\n\tdevToken(userID) {\n\t\treturn DevToken(userID);\n\t}\n\n\tgetAuthType() {\n\t\treturn this.anonymous ? 'anonymous' : 'jwt';\n\t}\n\n\tsetBaseURL(baseURL) {\n\t\tthis.baseURL = baseURL;\n\t\tthis.wsBaseURL = this.baseURL.replace('http', 'ws');\n\t}\n\n\t_setupConnection = () => {\n\t\tthis.UUID = uuidv4();\n\t\tthis.clientID = `${this.userID}--${this.UUID}`;\n\t\tthis.wsPromise = this.connect();\n\t\tthis._startCleaning();\n\t\treturn this.wsPromise;\n\t};\n\n\t_hasConnectionID = () => Boolean(this.connectionID);\n\n\t/**\n\t * setUser - Set the current user, this triggers a connection to the API\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t * @param {string} userToken   Token\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tsetUser = (user, userTokenOrProvider) => {\n\t\tif (this.userID) {\n\t\t\tthrow new Error(\n\t\t\t\t'Use client.disconnect() before trying to connect as a different user. setUser was called twice.',\n\t\t\t);\n\t\t}\n\t\t// we generate the client id client side\n\t\tthis.userID = user.id;\n\n\t\tif (!this.userID) {\n\t\t\tthrow new Error('The \"id\" field on the user is missing');\n\t\t}\n\n\t\tconst setTokenPromise = this._setToken(user, userTokenOrProvider);\n\t\tthis._setUser(user);\n\n\t\tconst wsPromise = this._setupConnection();\n\n\t\tthis.anonymous = false;\n\n\t\tthis.setUserPromise = Promise.all([setTokenPromise, wsPromise])\n\t\t\t.then(\n\t\t\t\tresult =>\n\t\t\t\t\t// We only return connection promise;\n\t\t\t\t\tresult[1],\n\t\t\t)\n\t\t\t.catch(e => {\n\t\t\t\tthrow e;\n\t\t\t});\n\n\t\treturn this.setUserPromise;\n\t};\n\n\t_setToken = (user, userTokenOrProvider) =>\n\t\tthis.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n\t_setUser(user) {\n\t\t// this one is used by the frontend\n\t\tthis.user = user;\n\t\t// this one is actually used for requests...\n\t\tthis._user = { ...user };\n\t}\n\n\t/**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {object} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"server_key\": \"server key from fcm\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t\t\"data_template\": \"data handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n\tasync updateAppSettings(options) {\n\t\tif (options.apn_config && options.apn_config.p12_cert) {\n\t\t\toptions.apn_config.p12_cert = Buffer.from(\n\t\t\t\toptions.apn_config.p12_cert,\n\t\t\t).toString('base64');\n\t\t}\n\t\treturn await this.patch(this.baseURL + '/app', options);\n\t}\n\n\t/**\n\t * getAppSettings - retrieves application settings\n\t */\n\tasync getAppSettings() {\n\t\treturn await this.get(this.baseURL + '/app');\n\t}\n\n\t/**\n\t * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n\t *\n\t * @param {string} userID User ID. If user has no devices, it will error\n\t * @param {object} [data] Overrides for push templates/message used\n\t * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t}\n\t */\n\tasync testPushSettings(userID, data = {}) {\n\t\treturn await this.post(this.baseURL + '/check_push', {\n\t\t\tuser_id: userID,\n\t\t\t...(data.messageID ? { message_id: data.messageID } : {}),\n\t\t\t...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n\t\t\t...(data.firebaseTemplate\n\t\t\t\t? { firebase_template: data.firebaseTemplate }\n\t\t\t\t: {}),\n\t\t\t...(data.firebaseDataTemplate\n\t\t\t\t? { firebase_data_template: data.firebaseDataTemplate }\n\t\t\t\t: {}),\n\t\t});\n\t}\n\n\t/**\n\t * disconnect - closes the WS connection\n\t */\n\tdisconnect(timeout) {\n\t\tthis.logger('info', 'client:disconnect() - Disconnecting the client', {\n\t\t\ttags: ['connection', 'client'],\n\t\t});\n\t\t// remove the user specific fields\n\t\tdelete this.user;\n\t\tdelete this._user;\n\t\tdelete this.userID;\n\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\tclearInterval(this.cleaningIntervalRef);\n\t\t\tthis.cleaningIntervalRef = null;\n\t\t}\n\n\t\tthis.anonymous = false;\n\n\t\tthis.connectionEstablishedCount = 0;\n\n\t\tfor (const channel of Object.values(this.activeChannels)) {\n\t\t\tchannel._disconnect();\n\t\t}\n\t\t// ensure we no longer return inactive channels\n\t\tthis.activeChannels = {};\n\t\t// reset client state\n\t\tthis.state = new ClientState();\n\t\t// reset token manager\n\t\tthis.tokenManager.reset();\n\n\t\t// close the WS connection\n\t\tif (this.wsConnection) {\n\t\t\treturn this.wsConnection.disconnect(timeout);\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\tsetAnonymousUser = () => {\n\t\tthis.anonymous = true;\n\t\tthis.userID = uuidv4();\n\t\tconst anonymousUser = {\n\t\t\tid: this.userID,\n\t\t\tanon: true,\n\t\t};\n\n\t\tthis._setToken(anonymousUser, '');\n\t\tthis._setUser(anonymousUser);\n\n\t\treturn this._setupConnection();\n\t};\n\n\t/**\n\t * setGuestUser - Setup a temporary guest user\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tasync setGuestUser(user) {\n\t\tlet response;\n\t\tthis.anonymous = true;\n\t\ttry {\n\t\t\tresponse = await this.post(this.baseURL + '/guest', { user });\n\t\t} catch (e) {\n\t\t\tthis.anonymous = false;\n\t\t\tthrow e;\n\t\t}\n\t\tthis.anonymous = false;\n\t\tconst {\n\t\t\tcreated_at,\n\t\t\tupdated_at,\n\t\t\tlast_active,\n\t\t\tonline,\n\t\t\t...guestUser\n\t\t} = response.user;\n\t\treturn await this.setUser(guestUser, response.access_token);\n\t}\n\n\t/**\n\t * createToken - Creates a token to authenticate this user. This function is used server side.\n\t * The resulting token should be passed to the client side when the users registers or logs in\n\t *\n\t * @param {string}   userID         The User ID\n\t * @param {string}   exp            The expiration time for the token expressed in the number of seconds since the epoch\n\t *\n\t * @return {string} Returns a token\n\t */\n\tcreateToken(userID, exp) {\n\t\tif (this.secret == null) {\n\t\t\tthrow Error(`tokens can only be created server-side using the API Secret`);\n\t\t}\n\t\tconst extra = {};\n\n\t\tif (exp) {\n\t\t\textra.exp = exp;\n\t\t}\n\n\t\treturn JWTUserToken(this.secret, userID, extra, {});\n\t}\n\n\t/**\n\t * on - Listen to events on all channels and users your watching\n\t *\n\t * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * client.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis.logger('info', `Attaching listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key].push(callback);\n\t\treturn {\n\t\t\tunsubscribe: () => {\n\t\t\t\tthis.listeners[key] = this.listeners[key].filter(el => el !== callback);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis.logger('info', `Removing listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_logApiRequest(type, url, data, config) {\n\t\tthis.logger('info', `client: ${type} - Request - ${url}`, {\n\t\t\ttags: ['api', 'api_request', 'client'],\n\t\t\turl,\n\t\t\tpayload: data,\n\t\t\tconfig,\n\t\t});\n\t}\n\n\t_logApiResponse(type, url, response) {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:${type} - Response - url: ${url} > status ${response.status}`,\n\t\t\t{\n\t\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\t\turl,\n\t\t\t\tresponse,\n\t\t\t},\n\t\t);\n\t}\n\n\t_logApiError(type, url, error) {\n\t\tthis.logger('error', `client:${type} - Error - url: ${url}`, {\n\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\turl,\n\t\t\terror,\n\t\t});\n\t}\n\n\tdoAxiosRequest = async (type, url, data, options = {}) => {\n\t\tawait this.tokenManager.tokenReady();\n\t\tconst requestConfig = this._enrichAxiosOptions(options);\n\t\ttry {\n\t\t\tlet response;\n\t\t\tthis._logApiRequest(type, url, data, requestConfig);\n\t\t\tswitch (type) {\n\t\t\t\tcase 'get':\n\t\t\t\t\tresponse = await this.axiosInstance.get(url, requestConfig);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'delete':\n\t\t\t\t\tresponse = await this.axiosInstance.delete(url, requestConfig);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'post':\n\t\t\t\t\tresponse = await this.axiosInstance.post(url, data, requestConfig);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'put':\n\t\t\t\t\tresponse = await this.axiosInstance.put(url, data, requestConfig);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'patch':\n\t\t\t\t\tresponse = await this.axiosInstance.patch(url, data, requestConfig);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._logApiResponse(type, url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError(type, url, e);\n\n\t\t\tif (e.response) {\n\t\t\t\tif (\n\t\t\t\t\te.response.data.code === chatCodes.TOKEN_EXPIRED &&\n\t\t\t\t\t!this.tokenManager.isStatic()\n\t\t\t\t) {\n\t\t\t\t\tthis.tokenManager.loadToken();\n\t\t\t\t\treturn await this.doAxiosRequest(type, url, data, options);\n\t\t\t\t}\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t};\n\n\tget(url, params) {\n\t\treturn this.doAxiosRequest('get', url, null, { params });\n\t}\n\n\tput(url, data) {\n\t\treturn this.doAxiosRequest('put', url, data);\n\t}\n\n\tpost(url, data) {\n\t\treturn this.doAxiosRequest('post', url, data);\n\t}\n\n\tpatch(url, data) {\n\t\treturn this.doAxiosRequest('patch', url, data);\n\t}\n\n\tdelete(url, params) {\n\t\treturn this.doAxiosRequest('delete', url, null, { params });\n\t}\n\n\tsendFile(url, uri, name, contentType, user) {\n\t\tconst data = new FormData();\n\t\tlet fileField;\n\n\t\tif (isReadableStream(uri) || uri instanceof File) {\n\t\t\tfileField = uri;\n\t\t} else {\n\t\t\tfileField = {\n\t\t\t\turi,\n\t\t\t\tname: name || uri.split('/').reverse()[0],\n\t\t\t};\n\t\t\tif (contentType != null) {\n\t\t\t\tfileField.type = contentType;\n\t\t\t}\n\t\t}\n\n\t\tif (user != null) {\n\t\t\tdata.append('user', JSON.stringify(user));\n\t\t}\n\t\tdata.append('file', fileField);\n\t\treturn this.doAxiosRequest('post', url, data, {\n\t\t\theaders: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n\t\t\tconfig: {\n\t\t\t\ttimeout: 0,\n\t\t\t\tmaxContentLength: Infinity,\n\t\t\t\tmaxBodyLength: Infinity,\n\t\t\t},\n\t\t});\n\t}\n\n\terrorFromResponse(response) {\n\t\tlet err;\n\t\terr = new Error(`StreamChat error HTTP code: ${response.status}`);\n\t\tif (response.data && response.data.code) {\n\t\t\terr = new Error(\n\t\t\t\t`StreamChat error code ${response.data.code}: ${response.data.message}`,\n\t\t\t);\n\t\t\terr.code = response.data.code;\n\t\t}\n\t\terr.response = response;\n\t\terr.status = response.status;\n\t\treturn err;\n\t}\n\n\thandleResponse(response) {\n\t\tconst data = response.data;\n\t\tif ((response.status + '')[0] !== '2') {\n\t\t\tthrow this.errorFromResponse(response);\n\t\t}\n\t\treturn data;\n\t}\n\n\tdispatchEvent = event => {\n\t\t// client event handlers\n\t\tthis._handleClientEvent(event);\n\n\t\t// channel event handlers\n\t\tconst cid = event.cid;\n\t\tconst channel = this.activeChannels[cid];\n\t\tif (channel) {\n\t\t\tchannel._handleChannelEvent(event);\n\t\t}\n\n\t\tthis._callClientListeners(event);\n\n\t\tif (channel) {\n\t\t\tchannel._callChannelListeners(event);\n\t\t}\n\t};\n\n\thandleEvent = messageEvent => {\n\t\t// dispatch the event to the channel listeners\n\t\tconst jsonString = messageEvent.data;\n\t\tconst event = JSON.parse(jsonString);\n\t\tevent.received_at = new Date();\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t_handleClientEvent(event) {\n\t\tconst client = this;\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:_handleClientEvent - Received event of type { ${event.type} }`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'client'],\n\t\t\t\tevent,\n\t\t\t},\n\t\t);\n\n\t\t// update the client.state with any changes to users\n\t\tif (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n\t\t\tif (event.user.id === this.userID) {\n\t\t\t\tthis.user = { ...this.user, ...event.user };\n\t\t\t\t// Updating only available properties in _user object.\n\t\t\t\tObject.keys(event.user).forEach(function(key) {\n\t\t\t\t\tif (key in client._user) {\n\t\t\t\t\t\tclient._user[key] = event.user[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tclient.state.updateUser(event.user);\n\t\t\tclient._updateUserReferences(event.user);\n\t\t}\n\t\tif (event.type === 'health.check' && event.me) {\n\t\t\tclient.user = event.me;\n\t\t\tclient.state.updateUser(event.me);\n\t\t\tclient.mutedChannels = event.me.channel_mutes;\n\t\t}\n\n\t\tif (event.type === 'notification.message_new') {\n\t\t\tthis.configs[event.channel.type] = event.channel.config;\n\t\t}\n\n\t\tif (event.type === 'notification.channel_mutes_updated') {\n\t\t\tthis.mutedChannels = event.me.channel_mutes;\n\t\t}\n\t}\n\n\t_muteStatus(cid) {\n\t\tlet muteStatus;\n\t\tthis.mutedChannels.forEach(function(mute) {\n\t\t\tif (mute.channel.cid === cid) {\n\t\t\t\tlet muted = true;\n\t\t\t\tif (mute.expires) {\n\t\t\t\t\tmuted = new Date(mute.expires).getTime() > new Date().getTime();\n\t\t\t\t}\n\t\t\t\tmuteStatus = {\n\t\t\t\t\tmuted,\n\t\t\t\t\tcreatedAt: new Date(mute.created_at),\n\t\t\t\t\texpiresAt: mute.expires ? new Date(mute.expires) : null,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (muteStatus) {\n\t\t\treturn muteStatus;\n\t\t}\n\n\t\treturn {\n\t\t\tmuted: false,\n\t\t\tcreatedAt: null,\n\t\t\texpiresAt: null,\n\t\t};\n\t}\n\n\t_callClientListeners = event => {\n\t\tconst client = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (client.listeners.all) {\n\t\t\tlisteners.push(...client.listeners.all);\n\t\t}\n\t\tif (client.listeners[event.type]) {\n\t\t\tlisteners.push(...client.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\trecoverState = async () => {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:recoverState() - Start of recoverState with connectionID ${this.wsConnection.connectionID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\tconst cids = Object.keys(this.activeChannels);\n\t\tconst lastMessageIDs = {};\n\t\tfor (const c of Object.values(this.activeChannels)) {\n\t\t\tconst lastMessage = c.lastMessage();\n\t\t\tlet lastMessageId;\n\t\t\tif (lastMessage) {\n\t\t\t\tlastMessageId = lastMessage.id;\n\t\t\t}\n\t\t\tlastMessageIDs[c.cid] = lastMessageId;\n\t\t}\n\t\tif (cids.length) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`client:recoverState() - Start the querying of ${cids.length} channels`,\n\t\t\t\t{ tags: ['connection', 'client'] },\n\t\t\t);\n\n\t\t\tawait this.queryChannels(\n\t\t\t\t{ cid: { $in: cids } },\n\t\t\t\t{ last_message_at: -1 },\n\t\t\t\t{ limit: 30, recovery: true, last_message_ids: lastMessageIDs },\n\t\t\t);\n\n\t\t\tthis.logger('info', 'client:recoverState() - Querying channels finished', {\n\t\t\t\ttags: ['connection', 'client'],\n\t\t\t});\n\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'connection.recovered',\n\t\t\t});\n\t\t}\n\n\t\tthis.wsPromise = Promise.resolve();\n\t\tthis.setUserPromise = Promise.resolve();\n\t};\n\n\t/*\n\t_updateUserReferences updates the members and watchers of the currently active channels\n\tthat contain this user\n\t*/\n\t_updateUserReferences(user) {\n\t\tconst refMap = this.state.userChannelReferences[user.id] || {};\n\t\tconst refs = Object.keys(refMap);\n\t\tfor (const channelID of refs) {\n\t\t\tconst c = this.activeChannels[channelID];\n\t\t\t// search the members and watchers and update as needed...\n\t\t\tif (c && c.state) {\n\t\t\t\tif (c.state.members[user.id]) {\n\t\t\t\t\tc.state.members = c.state.members.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t\tif (c.state.watchers[user.id]) {\n\t\t\t\t\tc.state.watchers = c.state.watchers.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync connect() {\n\t\tthis.connecting = true;\n\t\tconst client = this;\n\t\tthis.failures = 0;\n\n\t\tif (client.userID == null) {\n\t\t\tthrow Error(\n\t\t\t\t'Call setUser or setAnonymousUser before starting the connection',\n\t\t\t);\n\t\t}\n\n\t\t// The StableWSConnection handles all the reconnection logic.\n\t\tthis.wsConnection = new StableWSConnection({\n\t\t\twsBaseURL: client.wsBaseURL,\n\t\t\ttokenManager: client.tokenManager,\n\t\t\tuser: this._user,\n\t\t\tauthType: this.getAuthType(),\n\t\t\tuserAgent: this._userAgent(),\n\t\t\tapiKey: this.key,\n\t\t\trecoverCallback: this.recoverState,\n\t\t\tmessageCallback: this.handleEvent,\n\t\t\teventCallback: this.dispatchEvent,\n\t\t\tlogger: this.logger,\n\t\t});\n\n\t\tconst handshake = await this.wsConnection.connect();\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\treturn handshake;\n\t}\n\n\t/**\n\t * queryUsers - Query users and watch user presence\n\t *\n\t * @param {object} filterConditions MongoDB style filter conditions\n\t * @param {object} sort             Sort options, for instance {last_active: -1}\n\t * @param {object} options          Option object, {presence: true}\n\t *\n\t * @return {object} User Query Response\n\t */\n\tasync queryUsers(filterConditions, sort, options) {\n\t\tif (!sort) {\n\t\t\tsort = {};\n\t\t}\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\tconst sortFields = [];\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.setUserPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.presence = false;\n\t\t}\n\n\t\t// Return a list of users\n\t\tconst data = await this.get(this.baseURL + '/users', {\n\t\t\tpayload: {\n\t\t\t\tfilter_conditions: filterConditions,\n\t\t\t\tsort: sortFields,\n\t\t\t\t...defaultOptions,\n\t\t\t\t...options,\n\t\t\t},\n\t\t});\n\n\t\tthis.state.updateUsers(data.users);\n\n\t\treturn data;\n\t}\n\n\tasync queryChannels(filterConditions, sort = {}, options = {}) {\n\t\tconst sortFields = [];\n\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.setUserPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tsort: sortFields,\n\t\t\tuser_details: this._user,\n\t\t\t...defaultOptions,\n\t\t\t...options,\n\t\t};\n\n\t\tconst data = await this.get(this.baseURL + '/channels', {\n\t\t\tpayload,\n\t\t});\n\n\t\tconst channels = [];\n\n\t\t// update our cache of the configs\n\t\tfor (const channelState of data.channels) {\n\t\t\tthis._addChannelConfig(channelState);\n\t\t}\n\n\t\tfor (const channelState of data.channels) {\n\t\t\tconst c = this.channel(channelState.channel.type, channelState.channel.id);\n\t\t\tc.data = channelState.channel;\n\t\t\tc.initialized = true;\n\t\t\tc._initializeState(channelState);\n\t\t\tchannels.push(c);\n\t\t}\n\t\treturn channels;\n\t}\n\n\t/**\n\t * search - Query messages\n\t *\n\t * @param {object} channels MongoDB style filter conditions\n\t * @param {object|string}  message search query or object MongoDB style filters\n\t * @param {object} options       Option object, {user_id: 'tommaso'}\n\t *\n\t * @return {object} search messages response\n\t */\n\tasync search(filterConditions, query, options = {}) {\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\t...options,\n\t\t};\n\t\tif (typeof query === 'string') {\n\t\t\tpayload.query = query;\n\t\t} else if (typeof query === 'object') {\n\t\t\tpayload.message_filter_conditions = query;\n\t\t} else {\n\t\t\tthrow Error(`Invalid type ${typeof query} for query parameter`);\n\t\t}\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.setUserPromise;\n\n\t\treturn await this.get(this.baseURL + '/search', {\n\t\t\tpayload,\n\t\t});\n\t}\n\n\t/**\n\t * addDevice - Adds a push device for a user.\n\t *\n\t * @param {string} id the device id\n\t * @param {string} push_provider the push provider (apn or firebase)\n\t * @param {string} [userID] the user id (defaults to current user)\n\t *\n\t */\n\tasync addDevice(id, push_provider, userID = null) {\n\t\treturn await this.post(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\tpush_provider,\n\t\t\t...(userID != null ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/**\n\t * getDevices - Returns the devices associated with a current user\n\t *\n\t * @param {string} [userID] User ID. Only works on serversidex\n\t *\n\t * @return {devices} Array of devices\n\t */\n\tasync getDevices(userID) {\n\t\treturn await this.get(\n\t\t\tthis.baseURL + '/devices',\n\t\t\tuserID ? { user_id: userID } : {},\n\t\t);\n\t}\n\n\t/**\n\t * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n\t *\n\t * @param {string} id The device id\n\t * @param {string} [userID] The user id. Only specify this for serverside requests\n\t *\n\t */\n\tasync removeDevice(id, userID = null) {\n\t\treturn await this.delete(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t_addChannelConfig(channelState) {\n\t\tthis.configs[channelState.channel.type] = channelState.channel.config;\n\t}\n\n\t/**\n\t * channel - Returns a new channel with the given type, id and custom data\n\t *\n\t * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter\n\t * and only provide ID and the list of members\n\t *\n\t * ie. client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n\t *\n\t * @param {string} channelType The channel type\n\t * @param {string} channelID   The channel ID, you can leave this out if you want to create a conversation channel\n\t * @param {object} [custom]    Custom data to attach to the channel\n\t *\n\t * @return {channel} The channel object, initialize it using channel.watch()\n\t */\n\tchannel(channelType, channelID, custom = {}) {\n\t\tif (!this.userID && !this._isUsingServerAuth()) {\n\t\t\tthrow Error('Call setUser or setAnonymousUser before creating a channel');\n\t\t}\n\n\t\tif (~channelType.indexOf(':')) {\n\t\t\tthrow Error(\n\t\t\t\t`Invalid channel group ${channelType}, can't contain the : character`,\n\t\t\t);\n\t\t}\n\n\t\t// support channel(\"messaging\", null, {options})\n\t\t// support channel(\"messaging\", undefined, {options})\n\t\t// support channel(\"messaging\", \"\", {options})\n\t\tif (channelID == null || channelID === '') {\n\t\t\treturn new Channel(this, channelType, undefined, custom || {});\n\t\t}\n\t\t// support channel(\"messaging\", {options})\n\t\tif (typeof channelID === 'object' && arguments.length === 2) {\n\t\t\treturn new Channel(this, channelType, undefined, channelID);\n\t\t}\n\n\t\tif (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n\t\t\tthrow Error(`Invalid channel id ${channelID}, can't contain the : character`);\n\t\t}\n\n\t\t// only allow 1 channel object per cid\n\t\tconst cid = `${channelType}:${channelID}`;\n\t\tif (cid in this.activeChannels) {\n\t\t\tconst channel = this.activeChannels[cid];\n\t\t\tif (Object.keys(custom).length > 0) {\n\t\t\t\tchannel.data = custom;\n\t\t\t\tchannel._data = custom;\n\t\t\t}\n\t\t\treturn channel;\n\t\t}\n\t\tconst channel = new Channel(this, channelType, channelID, custom);\n\t\tthis.activeChannels[channel.cid] = channel;\n\n\t\treturn channel;\n\t}\n\n\t/**\n\t * @deprecated Please use upsertUser() function instead.\n\t *\n\t * updateUser - Update or Create the given user object\n\t *\n\t * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n\t *\n\t * @return {object}\n\t */\n\tasync updateUser(userObject) {\n\t\treturn await this.upsertUsers([userObject]);\n\t}\n\n\t/**\n\t * partialUpdateUser - Update the given user object\n\t *\n\t * @param {object} Object which should contain id and any of \"set\" or \"unset\" params;\n\t * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n\t *\n\t * @return {object} list of updated users\n\t */\n\tasync partialUpdateUser(userObject) {\n\t\treturn await this.partialUpdateUsers([userObject]);\n\t}\n\n\t/**\n\t * upsertUsers - Batch upsert the list of users\n\t *\n\t * @param {array} A list of users\n\t *\n\t * @return {object}\n\t */\n\tasync upsertUsers(users) {\n\t\tconst userMap = {};\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t\tuserMap[userObject.id] = userObject;\n\t\t}\n\n\t\treturn await this.post(this.baseURL + '/users', {\n\t\t\tusers: userMap,\n\t\t});\n\t}\n\n\t/**\n\t * upsertUser - Update or Create the given user object\n\t *\n\t * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n\t *\n\t * @return {object}\n\t */\n\tupsertUser(userObject) {\n\t\treturn this.upsertUsers([userObject]);\n\t}\n\n\t/**\n\t * @deprecated Please use upsertUsers() function instead.\n\t *\n\t * updateUsers - Batch update the list of users\n\t *\n\t * @param {array} A list of users\n\t *\n\t * @return {object}\n\t */\n\tupdateUsers(users) {\n\t\treturn this.upsertUsers(users);\n\t}\n\n\t/**\n\t * updateUsers - Batch partial update of users\n\t *\n\t * @param {array} A list of partial update requests\n\t *\n\t * @return {object}\n\t */\n\tasync partialUpdateUsers(users) {\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t}\n\n\t\treturn await this.patch(this.baseURL + '/users', {\n\t\t\tusers,\n\t\t});\n\t}\n\n\tasync deleteUser(userID, params) {\n\t\treturn await this.delete(this.baseURL + `/users/${userID}`, params);\n\t}\n\n\tasync reactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/reactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync deactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/deactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync exportUser(userID, options) {\n\t\treturn await this.get(this.baseURL + `/users/${userID}/export`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** banUser - bans a user from all channels\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\treturn await this.post(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** unbanUser - revoke global ban for a user\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID, options) {\n\t\treturn await this.delete(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** muteUser - mutes a user\n\t *\n\t * @param targetUserID\n\t * @param [userID] Only used with serverside auth\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync muteUser(targetUserID, userID = null, options = {}) {\n\t\treturn await this.post(this.baseURL + '/moderation/mute', {\n\t\t\ttarget_id: targetUserID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** unmuteUser - unmutes a user\n\t *\n\t * @param targetID\n\t * @param [currentUserID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync unmuteUser(targetID, currentUserID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/unmute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(currentUserID ? { user_id: currentUserID } : {}),\n\t\t});\n\t}\n\n\tasync flagMessage(messageID, options = {}) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_message_id: messageID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync flagUser(userID, options = {}) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_user_id: userID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync unflagMessage(messageID, options = {}) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_message_id: messageID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync unflagUser(userID, options = {}) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_user_id: userID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/**\n\t * markAllRead - marks all channels for this user as read\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markAllRead(data = {}) {\n\t\tconst response = await this.post(this.baseURL + '/channels/read', {\n\t\t\t...data,\n\t\t});\n\t}\n\n\tcreateChannelType(data) {\n\t\tconst channelData = Object.assign({}, { commands: ['all'] }, data);\n\t\treturn this.post(this.baseURL + '/channeltypes', channelData);\n\t}\n\n\tgetChannelType(channelType) {\n\t\treturn this.get(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tupdateChannelType(channelType, data) {\n\t\treturn this.put(this.baseURL + `/channeltypes/${channelType}`, data);\n\t}\n\n\tdeleteChannelType(channelType) {\n\t\treturn this.delete(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tlistChannelTypes() {\n\t\treturn this.get(this.baseURL + `/channeltypes`);\n\t}\n\n\t/**\n\t * translateMessage - adds the translation to the message\n\t *\n\t * @param {string} messageId\n\t *\n\t * @return {object} Response that includes the message\n\t */\n\tasync translateMessage(messageId, language) {\n\t\treturn await this.post(this.baseURL + `/messages/${messageId}/translate`, {\n\t\t\tlanguage,\n\t\t});\n\t}\n\n\t/**\n\t * updateMessage - Update the given message\n\t *\n\t * @param {object} message object, id needs to be specified\n\t *\n\t * @return {object} Response that includes the message\n\t */\n\tasync updateMessage(message, userId) {\n\t\tif (!message.id) {\n\t\t\tthrow Error('Please specify the message id when calling updateMesssage');\n\t\t}\n\n\t\tconst clonedMessage = Object.assign({}, message);\n\t\tdelete clonedMessage.id;\n\n\t\tconst reservedMessageFields = [\n\t\t\t'latest_reactions',\n\t\t\t'own_reactions',\n\t\t\t'reply_count',\n\t\t\t'reaction_counts',\n\t\t\t'created_at',\n\t\t\t'updated_at',\n\t\t\t'html',\n\t\t\t'command',\n\t\t\t'type',\n\t\t\t'user',\n\t\t];\n\n\t\treservedMessageFields.forEach(function(item) {\n\t\t\tif (clonedMessage[item] != null) {\n\t\t\t\tdelete clonedMessage[item];\n\t\t\t}\n\t\t});\n\n\t\tif (userId != null) {\n\t\t\tif (typeof userId == 'string' || userId instanceof String) {\n\t\t\t\tclonedMessage.user_id = userId;\n\t\t\t} else {\n\t\t\t\tclonedMessage.user = { id: userId.id };\n\t\t\t}\n\t\t}\n\t\treturn await this.post(this.baseURL + `/messages/${message.id}`, {\n\t\t\tmessage: clonedMessage,\n\t\t});\n\t}\n\n\tasync deleteMessage(messageID, hardDelete) {\n\t\tlet params = {};\n\t\tif (hardDelete) {\n\t\t\tparams = { hard: true };\n\t\t}\n\t\treturn await this.delete(this.baseURL + `/messages/${messageID}`, params);\n\t}\n\n\tasync getMessage(messageID) {\n\t\treturn await this.get(this.baseURL + `/messages/${messageID}`);\n\t}\n\n\t/**\n\t * @deprecated Please use getUserAgent instead\n\t */\n\t_userAgent() {\n\t\treturn this.getUserAgent();\n\t}\n\n\tgetUserAgent() {\n\t\treturn (\n\t\t\tthis.userAgent ||\n\t\t\t`stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${\n\t\t\t\tpkg.version\n\t\t\t}`\n\t\t);\n\t}\n\n\tsetUserAgent(userAgent) {\n\t\tthis.userAgent = userAgent;\n\t}\n\n\t/**\n\t * _isUsingServerAuth - Returns true if we're using server side auth\n\t */\n\t_isUsingServerAuth = () => !!this.secret;\n\n\t_enrichAxiosOptions(options = { params: {}, headers: {}, config: {} }) {\n\t\tconst token = this._getToken();\n\n\t\treturn {\n\t\t\tparams: {\n\t\t\t\tuser_id: this.userID,\n\t\t\t\t...options.params,\n\t\t\t\tapi_key: this.key,\n\t\t\t\tconnection_id: this.connectionID,\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\tAuthorization: token,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t\t'x-stream-client': this._userAgent(),\n\t\t\t\t...options.headers,\n\t\t\t},\n\t\t\t...options.config,\n\t\t};\n\t}\n\n\t_getToken() {\n\t\tif (!this.tokenManager || this.anonymous) return null;\n\n\t\treturn this.tokenManager.getToken();\n\t}\n\n\t_startCleaning() {\n\t\tconst that = this;\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cleaningIntervalRef = setInterval(() => {\n\t\t\t// call clean on the channel, used for calling the stop.typing event etc.\n\t\t\tfor (const channel of Object.values(that.activeChannels)) {\n\t\t\t\tchannel.clean();\n\t\t\t}\n\t\t}, 500);\n\t}\n\n\tverifyWebhook(requestBody, xSignature) {\n\t\treturn CheckSignature(requestBody, this.secret, xSignature);\n\t}\n\n\t/** getPermission - gets the definition for a permission\n\t *\n\t * @param {string} name\n\t * @returns {Promise<*>}\n\t */\n\tgetPermission(name) {\n\t\treturn this.get(`${this.baseURL}/custom_permission/${name}`);\n\t}\n\n\t/** createPermission - creates a custom permission\n\t *\n\t * @param {object} permissionData the permission data\n\t * @returns {Promise<*>}\n\t */\n\tcreatePermission(permissionData) {\n\t\treturn this.post(`${this.baseURL}/custom_permission`, { ...permissionData });\n\t}\n\n\t/** updatePermission - updates an existing custom permission\n\t *\n\t * @param {string} name\n\t * @param {object} permissionData the permission data\n\t * @returns {Promise<*>}\n\t */\n\tupdatePermission(name, permissionData) {\n\t\treturn this.post(`${this.baseURL}/custom_permission/${name}`, {\n\t\t\t...permissionData,\n\t\t});\n\t}\n\n\t/** deletePermission - deletes a custom permission\n\t *\n\t * @param {name}\n\t * @returns {Promise<*>}\n\t */\n\tdeletePermission(name) {\n\t\treturn this.delete(`${this.baseURL}/custom_permission/${name}`);\n\t}\n\n\t/** listPermissions - returns the list of custom permissions for this application\n\t *\n\t * @returns {Promise<*>}\n\t */\n\tlistPermissions() {\n\t\treturn this.get(`${this.baseURL}/custom_permission`);\n\t}\n\n\t/** createRole - creates a custom role\n\t *\n\t * @param {string} name the new role name\n\t * @returns {Promise<*>}\n\t */\n\tcreateRole(name) {\n\t\treturn this.post(`${this.baseURL}/custom_role`, { name });\n\t}\n\n\t/** listRoles - returns the list of custom roles for this application\n\t *\n\t * @returns {Promise<*>}\n\t */\n\tlistRoles() {\n\t\treturn this.get(`${this.baseURL}/custom_role`);\n\t}\n\n\t/** deleteRole - deletes a custom role\n\t *\n\t * @param {string} name the role name\n\t * @returns {Promise<*>}\n\t */\n\tdeleteRole(name) {\n\t\treturn this.delete(`${this.baseURL}/custom_role/${name}`);\n\t}\n\n\t/** sync - returns all events that happened for a list of channels since last sync\n\t * @param {array} channel_cids list of channel CIDs\n\t * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n\t */\n\tsync(channel_cids, last_sync_at) {\n\t\treturn this.post(`${this.baseURL}/sync`, { channel_cids, last_sync_at });\n\t}\n}\n","export const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\nexport class Permission {\n\tconstructor(\n\t\tname,\n\t\tpriority,\n\t\tresources = AnyResource,\n\t\troles = AnyRole,\n\t\towner = false,\n\t\taction = Allow,\n\t) {\n\t\tthis.name = name;\n\t\tthis.action = action;\n\t\tthis.owner = owner;\n\t\tthis.priority = priority;\n\t\tthis.resources = resources;\n\t\tthis.roles = roles;\n\t}\n}\n\n// deprecated\nexport const AllowAll = new Permission(\n\t'Allow all',\n\tMaxPriority,\n\tAnyResource,\n\tAnyRole,\n\tfalse,\n\tAllow,\n);\n\n// deprecated\nexport const DenyAll = new Permission(\n\t'Deny all',\n\tMinPriority,\n\tAnyResource,\n\tAnyRole,\n\tfalse,\n\tDeny,\n);\n\nexport const BuiltinRoles = {\n\tAnonymous: 'anonymous',\n\tGuest: 'guest',\n\tUser: 'user',\n\tAdmin: 'admin',\n\tChannelModerator: 'channel_moderator',\n\tChannelMember: 'channel_member',\n};\n\nexport const BuiltinPermissions = {\n\tCreateMessage: 'Create Message',\n\tUpdateAnyMessage: 'Update Any Message',\n\tUpdateOwnMessage: 'Update Own Message',\n\tDeleteAnyMessage: 'Delete Any Message',\n\tDeleteOwnMessage: 'Delete Own Message',\n\tCreateChannel: 'Create Channel',\n\tReadAnyChannel: 'Read Any Channel',\n\tReadOwnChannel: 'Read Own Channel',\n\tUpdateMembersAnyChannel: 'Update Members Any Channel',\n\tUpdateMembersOwnChannel: 'Update Members Own Channel',\n\tUpdateAnyChannel: 'Update Any Channel',\n\tUpdateOwnChannel: 'Update Own Channel',\n\tDeleteAnyChannel: 'Delete Any Channel',\n\tDeleteOwnChannel: 'Delete Own Channel',\n\tRunMessageAction: 'Run Message Action',\n\tBanUser: 'Ban User',\n\tUploadAttachment: 'Upload Attachment',\n\tDeleteAnyAttachment: 'Delete Any Attachment',\n\tDeleteOwnAttachment: 'Delete Own Attachment',\n\tAddLinks: 'Add Links',\n\tCreateReaction: 'Create Reaction',\n\tDeleteAnyReaction: 'Delete Any Reaction',\n\tDeleteOwnReaction: 'Delete Own Reaction',\n};\n"],"names":["byDate","a","b","created_at","ChannelState","channel","msgArray","msg","removed","result","flatMap","message","idMatch","id","_channel","watcher_count","typing","Immutable","read","messages","threads","mutedUsers","watchers","members","membership","last_message_at","Date","newMessage","addMessagesSorted","__html","html","updated_at","status","newMessages","initializing","parsedMessages","without","parsedMsg","messageToImmutable","push","updatedThreads","isThreadReply","parent_id","show_in_channel","_addToMessageList","parentID","thread","threadMessages","set","sort","reaction","i","length","_addReactionToMessage","message_id","_removeReactionFromMessage","getClient","userID","user","update","old","concat","updateIn","type","filterReaction","filter","item","updated","messageToRemove","isRemoved","removeMessageFromArray","filteredMessages","now","Object","entries","lastEvent","since","received_at","dispatchEvent","cid","EVENT_MAP","isValidEventType","eventType","logChatPromiseExecution","promise","name","then","catch","error","console","warn","sleep","m","Promise","r","setTimeout","isFunction","value","prototype","toString","call","Function","chatCodes","TOKEN_EXPIRED","WS_CLOSED_SUCCESS","Channel","client","data","options","watch","state","presence","query","event","listeners","all","listener","Error","baseURL","validTypeRe","validIDRe","test","_client","_data","initialized","lastTypingEvent","isTyping","disconnected","configs","post","_channelURL","uri","contentType","sendFile","url","delete","_checkInitialized","payload","filter_conditions","message_filter_conditions","wsPromise","get","filterConditions","sortFields","k","v","field","direction","Array","isArray","messageID","user_id","keys","body","reactionType","channelData","updateMessage","accept_invite","reject_invite","add_members","add_moderators","invites","remove_members","demote_moderators","opts","channel_cid","_muteStatus","formData","form_data","getConfig","typing_events","diff","lastKeyStroke","sendEvent","min","max","messageSlice","slice","asMutable","lastMessage","read_events","resolve","stopTyping","clean","defaultOptions","_hasConnectionID","combined","_initializeState","logger","tags","response","messageIds","ids","join","last_read","lastRead","count","silent","mentioned_users","findIndex","u","queryURL","activeChannels","_addChannelConfig","targetUserID","banUser","userId","clearHistory","clear_history","unbanUser","callbackOrString","callbackOrNothing","key","valid","callback","s","addMessageSorted","clearMessages","member","addReaction","removeReaction","undefined","_isUsingServerAuth","updateUserReference","w","watcher","parsedRead","ClientState","users","userChannelReferences","updateUser","channelID","StableWSConnection","wsBaseURL","clientID","userAgent","apiKey","tokenManager","authType","messageCallback","recoverCallback","eventCallback","params","user_details","user_token","getToken","server_determines_connection_id","qs","encodeURIComponent","JSON","stringify","token","_setHealth","isHealthy","_reconnect","interval","wsID","isResolved","parse","rejectPromise","_errorFromWSEvent","resolvePromise","code","reason","consecutiveFailures","totalFailures","healthy","online","isWSFailure","StatusCode","window","addEventListener","onlineStatusChanged","removeEventListener","Math","floor","random","that","connectionOpen","reject","e","isConnecting","healthCheckInterval","monitorInterval","_listenForConnectionChanges","_connect","healthCheck","_startMonitor","_startHealthCheck","isStatic","refreshToken","timeout","healthCheckIntervalRef","clearInterval","monitorIntervalRef","_removeConnectionListeners","ws","removeAllListeners","isClosedPromise","close","readyState","OPEN","onclose","tokenReady","_setupConnectionPromise","wsURL","_buildUrl","isoWS","onopen","bind","onerror","onmessage","connectionID","connection_id","_retryInterval","_destroyCurrentWSConnection","loadToken","open","setInterval","client_id","send","map","arr","res","kValue","mappedValue","len","charAt","encodeBase64","fromByteArray","char","charCodeAt","decodeBase64","String","fromCharCode","L","c","x","l","A","JWTUserToken","apiSecret","extraData","jwtOptions","TypeError","jwt","sign","algorithm","noTimestamp","JWTServerToken","server","UserFromToken","fragments","split","b64Payload","DevToken","CheckSignature","secret","signature","Buffer","from","hash","crypto","createHmac","digest","TokenManager","tokenOrProvider","validateToken","tokenProvider","loadTokenPromise","anon","tokenUserId","isReadableStream","obj","_read","_readableState","StreamChat","secretOrOptions","UUID","uuidv4","connect","_startCleaning","Boolean","userTokenOrProvider","setTokenPromise","_setToken","_setUser","_setupConnection","anonymous","setUserPromise","setTokenOrProvider","anonymousUser","requestConfig","_enrichAxiosOptions","_logApiRequest","axiosInstance","put","patch","_logApiResponse","handleResponse","_logApiError","doAxiosRequest","_handleClientEvent","_handleChannelEvent","_callClientListeners","_callChannelListeners","messageEvent","jsonString","wsConnection","cids","lastMessageIDs","values","lastMessageId","queryChannels","$in","limit","recovery","last_message_ids","mutedChannels","indexOf","browser","node","withCredentials","nodeOptions","httpAgent","http","Agent","keepAlive","httpsAgent","https","axios","create","setBaseURL","process","env","STREAM_LOCAL_TEST_RUN","replace","_user","apn_config","p12_cert","apnTemplate","apn_template","firebaseTemplate","firebase_template","firebaseDataTemplate","firebase_data_template","cleaningIntervalRef","connectionEstablishedCount","_disconnect","reset","disconnect","last_active","guestUser","setUser","access_token","exp","extra","unsubscribe","el","config","FormData","fileField","File","reverse","append","headers","getHeaders","maxContentLength","Infinity","maxBodyLength","err","errorFromResponse","forEach","_updateUserReferences","me","channel_mutes","muteStatus","mute","muted","expires","getTime","createdAt","expiresAt","refMap","refs","setIn","connecting","failures","getAuthType","_userAgent","recoverState","handleEvent","handshake","updateUsers","channels","channelState","push_provider","channelType","custom","arguments","userObject","upsertUsers","partialUpdateUsers","userMap","target_user_id","target_id","targetID","currentUserID","target_message_id","commands","messageId","language","clonedMessage","reservedMessageFields","hardDelete","hard","getUserAgent","pkg","version","_getToken","api_key","Authorization","requestBody","xSignature","permissionData","channel_cids","last_sync_at","Allow","Deny","AnyResource","AnyRole","MaxPriority","MinPriority","Permission","priority","resources","roles","owner","action","AllowAll","DenyAll","BuiltinRoles","Anonymous","Guest","User","Admin","ChannelModerator","ChannelMember","BuiltinPermissions","CreateMessage","UpdateAnyMessage","UpdateOwnMessage","DeleteAnyMessage","DeleteOwnMessage","CreateChannel","ReadAnyChannel","ReadOwnChannel","UpdateMembersAnyChannel","UpdateMembersOwnChannel","UpdateAnyChannel","UpdateOwnChannel","DeleteAnyChannel","DeleteOwnChannel","RunMessageAction","BanUser","UploadAttachment","DeleteAnyAttachment","DeleteOwnAttachment","AddLinks","CreateReaction","DeleteAnyReaction","DeleteOwnReaction"],"mappings":"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"}