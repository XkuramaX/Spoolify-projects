'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _slicedToArray = _interopDefault(require('@babel/runtime/helpers/slicedToArray'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var _toConsumableArray = _interopDefault(require('@babel/runtime/helpers/toConsumableArray'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var _asyncToGenerator = _interopDefault(require('@babel/runtime/helpers/asyncToGenerator'));
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var _typeof = _interopDefault(require('@babel/runtime/helpers/typeof'));
var axios = _interopDefault(require('axios'));
var uuidv4 = _interopDefault(require('uuid/v4'));
var Immutable = _interopDefault(require('seamless-immutable'));
var isoWS = _interopDefault(require('isomorphic-ws'));
var base64Js = require('base64-js');
var FormData = _interopDefault(require('form-data'));

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/**
 * ChannelState - A container class for the channel state.
 */

function byDate(a, b) {
  return a.created_at - b.created_at;
}

var ChannelState = /*#__PURE__*/function () {
  function ChannelState(channel) {
    _classCallCheck(this, ChannelState);

    _defineProperty(this, "removeMessageFromArray", function (msgArray, msg) {
      var removed = false;
      var result = msgArray.flatMap(function (message) {
        var idMatch = message.id && msg.id && message.id === msg.id;

        if (idMatch) {
          removed = true;
          return [];
        } else {
          return message;
        }
      });
      return {
        removed: removed,
        result: result
      };
    });

    this._channel = channel;
    this.watcher_count = 0;
    this.typing = Immutable({});
    this.read = Immutable({});
    this.messages = Immutable([]);
    this.threads = Immutable({}); // a list of users to hide messages from

    this.mutedUsers = Immutable([]);
    this.watchers = Immutable({});
    this.members = Immutable({});
    this.membership = Immutable({});
    this.last_message_at = channel.last_message_at != null ? new Date(channel.last_message_at) : null;
  }
  /**
   * addMessageSorted - Add a message to the state
   *
   * @param {object} newMessage A new message
   *
   */


  _createClass(ChannelState, [{
    key: "addMessageSorted",
    value: function addMessageSorted(newMessage) {
      return this.addMessagesSorted([newMessage]);
    }
    /**
     * messageToImmutable - Takes the message object. Parses the dates, sets __html
     * and sets the status to received if missing. Returns an immutable message object
     *
     * @param {object} message an Immutable message object
     *
     */

  }, {
    key: "messageToImmutable",
    value: function messageToImmutable(message) {
      message.__html = message.html; // parse the date..

      message.created_at = new Date(message.created_at);
      message.updated_at = new Date(message.updated_at);

      if (!message.status) {
        message.status = 'received';
      }

      return Immutable(message);
    }
    /**
     * addMessagesSorted - Add the list of messages to state and resorts the messages
     *
     * @param {array}   newMessages    A list of messages
     * @param {boolean} initializing   Weather channel is being initialized.
     *
     */

  }, {
    key: "addMessagesSorted",
    value: function addMessagesSorted(newMessages) {
      var initializing = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      // parse all the new message dates and add __html for react
      var parsedMessages = [];

      var _iterator = _createForOfIteratorHelper(newMessages),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _message = _step.value;

          if (initializing && this.threads[_message.id]) {
            // If we are initializing the state of channel (e.g., in case of connection recovery),
            // then in that case we remove thread related to this message from threads object.
            // This way we can ensure that we don't have any stale data in thread object
            // and consumer can refetch the replies.
            this.threads = Immutable.without(this.threads, _message.id);
          }

          var parsedMsg = this.messageToImmutable(_message);
          parsedMessages.push(parsedMsg);

          if (parsedMsg.created_at > this.last_message_at) {
            this.last_message_at = parsedMsg.created_at;
          }
        } // update or append the messages...

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var updatedThreads = [];

      for (var _i = 0, _parsedMessages = parsedMessages; _i < _parsedMessages.length; _i++) {
        var message = _parsedMessages[_i];
        var isThreadReply = message.parent_id && !message.show_in_channel; // add to the main message list

        if (!isThreadReply) {
          this.messages = this._addToMessageList(this.messages, message);
        } // add to the thread if applicable..


        var parentID = message.parent_id;

        if (parentID) {
          var thread = this.threads[parentID] || Immutable([]);

          var threadMessages = this._addToMessageList(thread, message);

          this.threads = this.threads.set(parentID, threadMessages);
          updatedThreads.push(parentID);
        }
      } // Resort the main messages and the threads that changed...


      var messages = _toConsumableArray(this.messages);

      messages.sort(byDate);
      this.messages = Immutable(messages);

      for (var _i2 = 0, _updatedThreads = updatedThreads; _i2 < _updatedThreads.length; _i2++) {
        var _parentID = _updatedThreads[_i2];

        var _threadMessages = this.threads[_parentID] ? _toConsumableArray(this.threads[_parentID]) : [];

        _threadMessages.sort(byDate);

        this.threads = this.threads.set(_parentID, _threadMessages);
      }
    }
  }, {
    key: "addReaction",
    value: function addReaction(reaction, message) {
      var messages = this.messages;
      if (!message) return;
      var parent_id = message.parent_id,
          show_in_channel = message.show_in_channel;

      if (parent_id && this.threads[parent_id]) {
        var thread = this.threads[parent_id];

        for (var i = 0; i < thread.length; i++) {
          var _message2 = thread[i];
          _message2 = this._addReactionToMessage(_message2, reaction);

          if (!_message2) {
            continue;
          }

          this.threads = this.threads.set(parent_id, thread.set(i, _message2));
          break;
        }
      }

      if (!show_in_channel && !parent_id || show_in_channel) {
        for (var _i3 = 0; _i3 < messages.length; _i3++) {
          var _message3 = messages[_i3];
          _message3 = this._addReactionToMessage(_message3, reaction);

          if (!_message3) {
            continue;
          }

          this.messages = messages.set(_i3, _message3);
          break;
        }
      }
    }
  }, {
    key: "_addReactionToMessage",
    value: function _addReactionToMessage(message, reaction) {
      var idMatch = message.id && message.id === reaction.message_id;

      if (!idMatch) {
        return false;
      }

      message = this._removeReactionFromMessage(message, reaction);

      if (this._channel.getClient().userID === reaction.user.id) {
        message = message.update('own_reactions', function () {
          var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
          return old.concat([reaction]);
        });
      }

      message = message.update('latest_reactions', function () {
        var old = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        return old.concat([reaction]);
      });
      message = message.updateIn(['reaction_counts', reaction.type], function (old) {
        return old ? old + 1 : 1;
      });
      return message;
    }
  }, {
    key: "_removeReactionFromMessage",
    value: function _removeReactionFromMessage(message, reaction) {
      var filterReaction = function filterReaction(old) {
        return old.filter(function (item) {
          return item.type !== reaction.type || item.user.id !== reaction.user.id;
        });
      };

      message = message.update('own_reactions', filterReaction);
      message = message.update('latest_reactions', filterReaction);
      return message;
    }
  }, {
    key: "removeReaction",
    value: function removeReaction(reaction, message) {
      var messages = this.messages;
      if (!message) return;
      var parent_id = message.parent_id,
          show_in_channel = message.show_in_channel;

      if (parent_id && this.threads[parent_id]) {
        var thread = this.threads[parent_id];

        for (var i = 0; i < thread.length; i++) {
          var _message4 = thread[i];
          var idMatch = _message4.id && _message4.id === reaction.message_id;

          if (!idMatch) {
            continue;
          }

          _message4 = this._removeReactionFromMessage(_message4, reaction);
          _message4 = _message4.updateIn(['reaction_counts', reaction.type], function (old) {
            return old ? old - 1 : 0;
          });
          this.threads = this.threads.set(parent_id, thread.set(i, _message4));
          break;
        }
      }

      if (!show_in_channel && !parent_id || show_in_channel) {
        for (var _i4 = 0; _i4 < messages.length; _i4++) {
          var _message5 = messages[_i4];

          var _idMatch = _message5.id && _message5.id === reaction.message_id;

          if (!_idMatch) {
            continue;
          }

          _message5 = this._removeReactionFromMessage(_message5, reaction);
          _message5 = _message5.updateIn(['reaction_counts', reaction.type], function (old) {
            return old ? old - 1 : 0;
          });
          this.messages = messages.set(_i4, _message5);
          break;
        }
      }
    }
    /**
     * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isnt found
     *
     * @param {array} messages A list of messages
     * @param {object} newMessage The new message
     *
     */

  }, {
    key: "_addToMessageList",
    value: function _addToMessageList(messages, newMessage) {
      var updated = false;

      for (var i = 0; i < messages.length; i++) {
        var message = messages[i];
        var idMatch = message.id && newMessage.id && message.id === newMessage.id;

        if (idMatch) {
          messages = messages.set(i, newMessage);
          updated = true;
        }
      }

      if (!updated) {
        messages = messages.concat([newMessage]);
      }

      return messages;
    }
    /**
     * removeMessage - Description
     *
     * @param {type} messageToRemove Object of the message to remove. Needs to have at id specified.
     *
     * @return {boolean} Returns if the message was removed
     */

  }, {
    key: "removeMessage",
    value: function removeMessage(messageToRemove) {
      var isRemoved = false;

      if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {
        var _this$removeMessageFr = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove),
            removed = _this$removeMessageFr.removed,
            threadMessages = _this$removeMessageFr.result;

        this.threads = this.threads[messageToRemove.parent_id].set(messageToRemove.parent_id, threadMessages);
        isRemoved = removed;
      } else {
        var _this$removeMessageFr2 = this.removeMessageFromArray(this.messages, messageToRemove),
            _removed = _this$removeMessageFr2.removed,
            messages = _this$removeMessageFr2.result;

        this.messages = messages;
        isRemoved = _removed;
      }

      return isRemoved;
    }
  }, {
    key: "filterErrorMessages",

    /**
     * filterErrorMessages - Removes error messages from the channel state.
     *
     */
    value: function filterErrorMessages() {
      var filteredMessages = this.messages.flatMap(function (message) {
        if (message.type !== 'error') {
          return message;
        } else {
          return [];
        }
      });
      this.messages = Immutable(filteredMessages);
    }
    /**
     * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds
     */

  }, {
    key: "clean",
    value: function clean() {
      var now = new Date(); // prevent old users from showing up as typing

      for (var _i5 = 0, _Object$entries = Object.entries(this.typing); _i5 < _Object$entries.length; _i5++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),
            userID = _Object$entries$_i[0],
            lastEvent = _Object$entries$_i[1];

        var since = now - new Date(lastEvent.received_at);

        if (since > 7000) {
          this.typing = this.typing.without(userID);

          this._channel.getClient().dispatchEvent({
            type: 'typing.stop',
            user: {
              id: userID
            },
            cid: this._channel.cid
          });
        }
      }
    }
  }, {
    key: "clearMessages",
    value: function clearMessages() {
      this.messages = Immutable([]);
    }
  }]);

  return ChannelState;
}();

var EVENT_MAP = {
  'user.presence.changed': true,
  'user.watching.start': true,
  'user.watching.stop': true,
  'user.updated': true,
  'user.deleted': true,
  'typing.start': true,
  'typing.stop': true,
  'message.new': true,
  'message.updated': true,
  'message.deleted': true,
  'message.read': true,
  'reaction.new': true,
  'reaction.deleted': true,
  'member.added': true,
  'member.updated': true,
  'member.removed': true,
  'channel.updated': true,
  'channel.muted': true,
  'channel.unmuted': true,
  'channel.deleted': true,
  'channel.truncated': true,
  'channel.created': true,
  'channel.hidden': true,
  'channel.visible': true,
  'health.check': true,
  'notification.message_new': true,
  'notification.mark_read': true,
  'notification.invited': true,
  'notification.invite_accepted': true,
  'notification.added_to_channel': true,
  'notification.removed_from_channel': true,
  'notification.mutes_updated': true,
  'notification.channel_deleted': true,
  'notification.channel_truncated': true,
  'notification.channel_mutes_updated': true,
  // local events
  'connection.changed': true,
  'connection.recovered': true
};
function isValidEventType(eventType) {
  if (eventType === 'all') {
    return true;
  }

  return EVENT_MAP[eventType] || false;
}

/**
 * logChatPromiseExecution - utility function for logging the execution of a promise..
 *  use this when you want to run the promise and handle errors by logging a warning
 *
 * @param {type} promise The promise you want to run and log
 * @param {type} name    A descriptive name of what the promise does for log output
 *
 */
function logChatPromiseExecution(promise, name) {
  promise.then(function () {// do nothing...
  }).catch(function (error) {
    console.warn("failed to do ".concat(name, ", ran into error: "), error);
  });
}
var sleep = function sleep(m) {
  return new Promise(function (r) {
    return setTimeout(r, m);
  });
};
function isFunction(value) {
  return value && (Object.prototype.toString.call(value) === '[object Function]' || 'function' === typeof value || value instanceof Function);
}
var chatCodes = {
  TOKEN_EXPIRED: 40,
  WS_CLOSED_SUCCESS: 1000
};

function _createForOfIteratorHelper$1(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray$1(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Channel - The Channel class manages it's own state.
 */

var Channel = /*#__PURE__*/function () {
  /**
   * constructor - Create a channel
   *
   * @param {Client} client the chat client
   * @param {string} type  the type of channel
   * @param {string} [id]  the id of the chat
   * @param {type} custom any additional custom params
   *
   * @return {Channel} Returns a new uninitialized channel
   */
  function Channel(client, type, id, data) {
    var _this = this;

    _classCallCheck(this, Channel);

    _defineProperty(this, "create", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var options;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = {
                watch: false,
                state: false,
                presence: false
              };
              _context.next = 3;
              return _this.query(options);

            case 3:
              return _context.abrupt("return", _context.sent);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));

    _defineProperty(this, "_callChannelListeners", function (event) {
      var channel = _this; // gather and call the listeners

      var listeners = [];

      if (channel.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray(channel.listeners.all));
      }

      if (channel.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray(channel.listeners[event.type]));
      } // call the event and send it to the listeners


      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {
        var listener = _listeners[_i];
        listener(event);
      }
    });

    _defineProperty(this, "_channelURL", function () {
      if (!_this.id) {
        throw new Error('channel id is not defined');
      }

      return "".concat(_this.getClient().baseURL, "/channels/").concat(_this.type, "/").concat(_this.id);
    });

    var validTypeRe = /^[\w_-]+$/;
    var validIDRe = /^[\w!_-]+$/;

    if (!validTypeRe.test(type)) {
      throw new Error("Invalid chat type ".concat(type, ", letters, numbers and \"_-\" are allowed"));
    }

    if (!validIDRe.test(id)) {
      throw new Error("Invalid chat id ".concat(id, ", letters, numbers and \"!-_\" are allowed"));
    }

    this._client = client;
    this.type = type;
    this.id = id; // used by the frontend, gets updated:

    this.data = data; // this._data is used for the requests...

    this._data = _objectSpread({}, data);
    this.cid = "".concat(type, ":").concat(id);
    this.listeners = {}; // perhaps the state variable should be private

    this.state = new ChannelState(this);
    this.initialized = false;
    this.lastTypingEvent = null;
    this.isTyping = false;
    this.disconnected = false;
  }
  /**
   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error
   *
   * @return {object}
   */


  _createClass(Channel, [{
    key: "getClient",
    value: function getClient() {
      if (this.disconnected === true) {
        throw Error("You can't use a channel after client.disconnect() was called");
      }

      return this._client;
    }
    /**
     * getConfig - Get the configs for this channel type
     *
     * @return {object}
     */

  }, {
    key: "getConfig",
    value: function getConfig() {
      var client = this.getClient();
      return client.configs[this.type];
    }
    /**
     * sendMessage - Send a message to this channel
     *
     * @param {object} message The Message object
     *
     * @return {object} The Server Response
     */

  }, {
    key: "sendMessage",
    value: function () {
      var _sendMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getClient().post(this._channelURL() + '/message', {
                  message: message
                });

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function sendMessage(_x) {
        return _sendMessage.apply(this, arguments);
      }

      return sendMessage;
    }()
  }, {
    key: "sendFile",
    value: function sendFile(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/file"), uri, name, contentType, user);
    }
  }, {
    key: "sendImage",
    value: function sendImage(uri, name, contentType, user) {
      return this.getClient().sendFile("".concat(this._channelURL(), "/image"), uri, name, contentType, user);
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/file"), {
        url: url
      });
    }
  }, {
    key: "deleteImage",
    value: function deleteImage(url) {
      return this.getClient().delete("".concat(this._channelURL(), "/image"), {
        url: url
      });
    }
    /**
     * sendEvent - Send an event on this channel
     *
     * @param {object} event for example {type: 'message.read'}
     *
     * @return {object} The Server Response
     */

  }, {
    key: "sendEvent",
    value: function () {
      var _sendEvent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this._checkInitialized();

                _context3.next = 3;
                return this.getClient().post(this._channelURL() + '/event', {
                  event: event
                });

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function sendEvent(_x2) {
        return _sendEvent.apply(this, arguments);
      }

      return sendEvent;
    }()
    /**
     * search - Query messages
     *
     * @param {object|string}  message search query or object MongoDB style filters
     * @param {object} options       Option object, {user_id: 'tommaso'}
     *
     * @return {object} search messages response
     */

  }, {
    key: "search",
    value: function () {
      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(query) {
        var options,
            payload,
            _args4 = arguments;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                // Return a list of channels
                payload = _objectSpread({
                  filter_conditions: {
                    cid: this.cid
                  }
                }, options);

                if (!(typeof query === 'string')) {
                  _context4.next = 6;
                  break;
                }

                payload.query = query;
                _context4.next = 11;
                break;

              case 6:
                if (!(_typeof(query) === 'object')) {
                  _context4.next = 10;
                  break;
                }

                payload.message_filter_conditions = query;
                _context4.next = 11;
                break;

              case 10:
                throw Error("Invalid type ".concat(_typeof(query), " for query parameter"));

              case 11:
                _context4.next = 13;
                return this.wsPromise;

              case 13:
                _context4.next = 15;
                return this.getClient().get(this.getClient().baseURL + '/search', {
                  payload: payload
                });

              case 15:
                return _context4.abrupt("return", _context4.sent);

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function search(_x3) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
    /**
     * search - Query Members
     *
     * @param {object}  filterConditions object MongoDB style filters
     * @param {object} sort             Sort options, for instance {created_at: -1}
     * @param {object} options        Option object, {limit: 10, offset:10}
     *
     * @return {object} search members response
     */

  }, {
    key: "queryMembers",
    value: function () {
      var _queryMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(filterConditions) {
        var sort,
            options,
            sortFields,
            _i2,
            _Object$entries,
            _Object$entries$_i,
            k,
            v,
            id,
            type,
            members,
            _args5 = arguments;

        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                sort = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};
                sortFields = [];

                for (_i2 = 0, _Object$entries = Object.entries(sort); _i2 < _Object$entries.length; _i2++) {
                  _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2), k = _Object$entries$_i[0], v = _Object$entries$_i[1];
                  sortFields.push({
                    field: k,
                    direction: v
                  });
                }

                type = this.type;

                if (this.id) {
                  id = this.id;
                } else if (this.data && Array.isArray(this.data.members)) {
                  members = this.data.members;
                } // Return a list of members


                _context5.next = 8;
                return this.getClient().get(this.getClient().baseURL + '/members', {
                  payload: _objectSpread({
                    type: type,
                    id: id,
                    members: members,
                    sort: sortFields,
                    filter_conditions: filterConditions
                  }, options)
                });

              case 8:
                return _context5.abrupt("return", _context5.sent);

              case 9:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function queryMembers(_x4) {
        return _queryMembers.apply(this, arguments);
      }

      return queryMembers;
    }()
    /**
     * sendReaction - Send a reaction about a message
     *
     * @param {string} messageID the message id
     * @param {object} reaction the reaction object for instance {type: 'love'}
     * @param {string} user_id the id of the user (used only for server side request) default null
     *
     * @return {object} The Server Response
     */

  }, {
    key: "sendReaction",
    value: function () {
      var _sendReaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(messageID, reaction, user_id) {
        var body;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (messageID) {
                  _context6.next = 2;
                  break;
                }

                throw Error("Message id is missing");

              case 2:
                if (!(!reaction || Object.keys(reaction).length === 0)) {
                  _context6.next = 4;
                  break;
                }

                throw Error("Reaction object is missing");

              case 4:
                body = {
                  reaction: reaction
                };

                if (user_id != null) {
                  body.reaction = _objectSpread(_objectSpread({}, reaction), {}, {
                    user: {
                      id: user_id
                    }
                  });
                }

                _context6.next = 8;
                return this.getClient().post(this.getClient().baseURL + "/messages/".concat(messageID, "/reaction"), body);

              case 8:
                return _context6.abrupt("return", _context6.sent);

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function sendReaction(_x5, _x6, _x7) {
        return _sendReaction.apply(this, arguments);
      }

      return sendReaction;
    }()
    /**
     * deleteReaction - Delete a reaction by user and type
     *
     * @param {string} messageID the id of the message from which te remove the reaction
     * @param {string} reactionType the type of reaction that should be removed
     * @param {string} user_id the id of the user (used only for server side request) default null
     *
     * @return {object} The Server Response
     */

  }, {
    key: "deleteReaction",
    value: function deleteReaction(messageID, reactionType, user_id) {
      this._checkInitialized();

      if (!reactionType || !messageID) {
        throw Error('Deleting a reaction requires specifying both the message and reaction type');
      }

      var url = this.getClient().baseURL + "/messages/".concat(messageID, "/reaction/").concat(reactionType); //provided when server side request

      if (user_id) {
        return this.getClient().delete(url, {
          user_id: user_id
        });
      }

      return this.getClient().delete(url);
    }
    /**
     * update - Edit the channel's custom properties
     *
     * @param {object} channelData The object to update the custom properties of this channel with
     * @param {object} updateMessage Optional message object for channel members notification
     * @return {type} The server response
     */

  }, {
    key: "update",
    value: function () {
      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(channelData, updateMessage) {
        var data;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.getClient().post(this._channelURL(), {
                  message: updateMessage,
                  data: channelData
                });

              case 2:
                data = _context7.sent;
                this.data = data.channel;
                return _context7.abrupt("return", data);

              case 5:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function update(_x8, _x9) {
        return _update.apply(this, arguments);
      }

      return update;
    }()
    /**
     * delete - Delete the channel. Messages are permanently removed.
     *
     * @return {object} The server response
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return this.getClient().delete(this._channelURL());

              case 2:
                return _context8.abrupt("return", _context8.sent);

              case 3:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function _delete() {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * truncate - Removes all messages from the channel
     *
     * @return {object} The server response
     */

  }, {
    key: "truncate",
    value: function () {
      var _truncate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getClient().post(this._channelURL() + '/truncate');

              case 2:
                return _context9.abrupt("return", _context9.sent);

              case 3:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function truncate() {
        return _truncate.apply(this, arguments);
      }

      return truncate;
    }()
    /**
     * acceptInvite - accept invitation to the channel
     *
     * @param {object} options The object to update the custom properties of this channel with
     *
     * @return {type} The server response
     */

  }, {
    key: "acceptInvite",
    value: function () {
      var _acceptInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
        var options,
            data,
            _args10 = arguments;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};
                _context10.next = 3;
                return this.getClient().post(this._channelURL(), _objectSpread({
                  accept_invite: true
                }, options));

              case 3:
                data = _context10.sent;
                this.data = data.channel;
                return _context10.abrupt("return", data);

              case 6:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function acceptInvite() {
        return _acceptInvite.apply(this, arguments);
      }

      return acceptInvite;
    }()
    /**
     * acceptInvite - reject invitation to the channel
     *
     * @param {object} options The object to update the custom properties of this channel with
     *
     * @return {type} The server response
     */

  }, {
    key: "rejectInvite",
    value: function () {
      var _rejectInvite = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
        var options,
            data,
            _args11 = arguments;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};
                _context11.next = 3;
                return this.getClient().post(this._channelURL(), _objectSpread({
                  reject_invite: true
                }, options));

              case 3:
                data = _context11.sent;
                this.data = data.channel;
                return _context11.abrupt("return", data);

              case 6:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function rejectInvite() {
        return _rejectInvite.apply(this, arguments);
      }

      return rejectInvite;
    }()
    /**
     * addMembers - add members to the channel
     *
     * @param {array} members An array of member identifiers
     * @param {object} message Optional message object for channel members notification
     * @return {type} The server response
     */

  }, {
    key: "addMembers",
    value: function () {
      var _addMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(members, message) {
        var data;
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.getClient().post(this._channelURL(), {
                  add_members: members,
                  message: message
                });

              case 2:
                data = _context12.sent;
                this.data = data.channel;
                return _context12.abrupt("return", data);

              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function addMembers(_x10, _x11) {
        return _addMembers.apply(this, arguments);
      }

      return addMembers;
    }()
    /**
     * addModerators - add moderators to the channel
     *
     * @param {array} members An array of member identifiers
     * @param {object} message Optional message object for channel members notification
     * @return {type} The server response
     */

  }, {
    key: "addModerators",
    value: function () {
      var _addModerators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(members, message) {
        var data;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this.getClient().post(this._channelURL(), {
                  add_moderators: members,
                  message: message
                });

              case 2:
                data = _context13.sent;
                this.data = data.channel;
                return _context13.abrupt("return", data);

              case 5:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function addModerators(_x12, _x13) {
        return _addModerators.apply(this, arguments);
      }

      return addModerators;
    }()
    /**
     * inviteMembers - invite members to the channel
     *
     * @param {array} members An array of member identifiers
     * @param {object} message Optional message object for channel members notification
     * @return {type} The server response
     */

  }, {
    key: "inviteMembers",
    value: function () {
      var _inviteMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(members, message) {
        var data;
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.getClient().post(this._channelURL(), {
                  invites: members,
                  message: message
                });

              case 2:
                data = _context14.sent;
                this.data = data.channel;
                return _context14.abrupt("return", data);

              case 5:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function inviteMembers(_x14, _x15) {
        return _inviteMembers.apply(this, arguments);
      }

      return inviteMembers;
    }()
    /**
     * removeMembers - remove members from channel
     *
     * @param {array} members An array of member identifiers
     * @param {object} message Optional message object for channel members notification
     * @return {type} The server response
     */

  }, {
    key: "removeMembers",
    value: function () {
      var _removeMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(members, message) {
        var data;
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.getClient().post(this._channelURL(), {
                  remove_members: members,
                  message: message
                });

              case 2:
                data = _context15.sent;
                this.data = data.channel;
                return _context15.abrupt("return", data);

              case 5:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function removeMembers(_x16, _x17) {
        return _removeMembers.apply(this, arguments);
      }

      return removeMembers;
    }()
    /**
     * demoteModerators - remove moderator role from channel members
     *
     * @param {array} members An array of member identifiers
     * @param {object} message Optional message object for channel members notification
     * @return {type} The server response
     */

  }, {
    key: "demoteModerators",
    value: function () {
      var _demoteModerators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(members, message) {
        var data;
        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return this.getClient().post(this._channelURL(), {
                  demote_moderators: members,
                  message: message
                });

              case 2:
                data = _context16.sent;
                this.data = data.channel;
                return _context16.abrupt("return", data);

              case 5:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function demoteModerators(_x18, _x19) {
        return _demoteModerators.apply(this, arguments);
      }

      return demoteModerators;
    }()
    /**
     * mute - mutes the current channel
     * @param {object} 				opts expiration or user_id
     * @return {object} 			The server response
     *
     * example with expiration:
     * await channel.mute({expiration: moment.duration(2, 'weeks')});
     *
     * example server side:
     * await channel.mute({user_id: userId});
     *
     */

  }, {
    key: "mute",
    value: function () {
      var _mute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {
        var opts,
            _args17 = arguments;
        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                opts = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};
                _context17.next = 3;
                return this.getClient().post(this.getClient().baseURL + '/moderation/mute/channel', _objectSpread({
                  channel_cid: this.cid
                }, opts));

              case 3:
                return _context17.abrupt("return", _context17.sent);

              case 4:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function mute() {
        return _mute.apply(this, arguments);
      }

      return mute;
    }()
    /**
     * unmute - mutes the current channel
     * @param {object} opts user_id
     * @return {object} 			The server response
     *
     * example server side:
     * await channel.unmute({user_id: userId});
     */

  }, {
    key: "unmute",
    value: function () {
      var _unmute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {
        var opts,
            _args18 = arguments;
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                opts = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};
                _context18.next = 3;
                return this.getClient().post(this.getClient().baseURL + '/moderation/unmute/channel', _objectSpread({
                  channel_cid: this.cid
                }, opts));

              case 3:
                return _context18.abrupt("return", _context18.sent);

              case 4:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function unmute() {
        return _unmute.apply(this, arguments);
      }

      return unmute;
    }()
    /**
     * muteStatus - returns the mute status for the current channel
     * @return {object} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}
     */

  }, {
    key: "muteStatus",
    value: function muteStatus() {
      this._checkInitialized();

      return this.getClient()._muteStatus(this.cid);
    }
  }, {
    key: "sendAction",
    value: function sendAction(messageID, formData) {
      this._checkInitialized();

      if (!messageID) {
        throw Error("Message id is missing");
      }

      return this.getClient().post(this.getClient().baseURL + "/messages/".concat(messageID, "/action"), {
        message_id: messageID,
        form_data: formData,
        id: this.id,
        type: this.type
      });
    }
    /**
     * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.
     *  Call this on every keystroke
     */

  }, {
    key: "keystroke",
    value: function () {
      var _keystroke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {
        var now, diff;
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (this.getConfig().typing_events) {
                  _context19.next = 2;
                  break;
                }

                return _context19.abrupt("return");

              case 2:
                now = new Date();
                diff = now - this.lastTypingEvent;
                this.lastKeyStroke = now;
                this.isTyping = true; // send a typing.start every 2 seconds

                if (!(diff > 2000)) {
                  _context19.next = 10;
                  break;
                }

                this.lastTypingEvent = new Date();
                _context19.next = 10;
                return this.sendEvent({
                  type: 'typing.start'
                });

              case 10:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function keystroke() {
        return _keystroke.apply(this, arguments);
      }

      return keystroke;
    }()
    /**
     * stopTyping - Sets last typing to null and sends the typing.stop event
     */

  }, {
    key: "stopTyping",
    value: function () {
      var _stopTyping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                if (this.getConfig().typing_events) {
                  _context20.next = 2;
                  break;
                }

                return _context20.abrupt("return");

              case 2:
                this.lastTypingEvent = null;
                this.isTyping = false;
                _context20.next = 6;
                return this.sendEvent({
                  type: 'typing.stop'
                });

              case 6:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function stopTyping() {
        return _stopTyping.apply(this, arguments);
      }

      return stopTyping;
    }()
    /**
     * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted
     *
     * @return {type} Description
     */

  }, {
    key: "lastMessage",
    value: function lastMessage() {
      // get last 5 messages, sort, return the latest
      // get a slice of the last 5
      var min = this.state.messages.length - 5;

      if (min < 0) {
        min = 0;
      }

      var max = this.state.messages.length + 1;
      var messageSlice = this.state.messages.slice(min, max).asMutable(); // sort by pk desc

      messageSlice.sort(function (a, b) {
        return b.created_at - a.created_at;
      });
      var lastMessage;

      if (messageSlice.length > 0) {
        lastMessage = messageSlice[0];
      }

      return lastMessage;
    }
    /**
     * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled
     *
     * @return {Promise} Description
     */

  }, {
    key: "markRead",
    value: function () {
      var _markRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {
        var data,
            _args21 = arguments;
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                data = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};

                this._checkInitialized();

                if (this.getConfig().read_events) {
                  _context21.next = 4;
                  break;
                }

                return _context21.abrupt("return", Promise.resolve(null));

              case 4:
                _context21.next = 6;
                return this.getClient().post(this._channelURL() + '/read', _objectSpread({}, data));

              case 6:
                return _context21.abrupt("return", _context21.sent);

              case 7:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function markRead() {
        return _markRead.apply(this, arguments);
      }

      return markRead;
    }()
    /**
     * clean - Cleans the channel state and fires stop typing if needed
     */

  }, {
    key: "clean",
    value: function clean() {
      if (this.lastKeyStroke) {
        var now = new Date();
        var diff = now - this.lastKeyStroke;

        if (diff > 1000 && this.isTyping) {
          logChatPromiseExecution(this.stopTyping(), 'stop typing event');
        }
      }

      this.state.clean();
    }
    /**
     * watch - Loads the initial channel state and watches for changes
     *
     * @param {object} options additional options for the query endpoint
     *
     * @return {object} The server response
     */

  }, {
    key: "watch",
    value: function () {
      var _watch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(options) {
        var defaultOptions, combined, state;
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context22.next = 3;
                return this.getClient().wsPromise;

              case 3:
                if (!this.getClient()._hasConnectionID()) {
                  defaultOptions.watch = false;
                }

                combined = _objectSpread(_objectSpread({}, defaultOptions), options);
                _context22.next = 7;
                return this.query(combined);

              case 7:
                state = _context22.sent;
                this.initialized = true;

                this._initializeState(state);

                this.data = state.channel;

                this._client.logger('info', "channel:watch() - started watching channel ".concat(this.cid), {
                  tags: ['channel'],
                  channel: this
                });

                return _context22.abrupt("return", state);

              case 13:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function watch(_x20) {
        return _watch.apply(this, arguments);
      }

      return watch;
    }()
    /**
     * stopwatching - Stops watching the channel
     *
     * @return {object} The server response
     */

  }, {
    key: "stopWatching",
    value: function () {
      var _stopWatching = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {
        var response;
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.getClient().post(this._channelURL() + '/stop-watching', {});

              case 2:
                response = _context23.sent;

                this._client.logger('info', "channel:watch() - stopped watching channel ".concat(this.cid), {
                  tags: ['channel'],
                  channel: this
                });

                return _context23.abrupt("return", response);

              case 5:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function stopWatching() {
        return _stopWatching.apply(this, arguments);
      }

      return stopWatching;
    }()
    /**
     * getReplies - List the message replies for a parent message
     *
     * @param {type} parent_id The message parent id, ie the top of the thread
     * @param {type} options   Pagination params, ie {limit:10, idlte: 10}
     *
     * @return {type} A response with a list of messages
     */

  }, {
    key: "getReplies",
    value: function () {
      var _getReplies = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(parent_id, options) {
        var data;
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                _context24.next = 2;
                return this.getClient().get(this.getClient().baseURL + "/messages/".concat(parent_id, "/replies"), _objectSpread({}, options));

              case 2:
                data = _context24.sent;

                // add any messages to our thread state
                if (data.messages) {
                  this.state.addMessagesSorted(data.messages);
                }

                return _context24.abrupt("return", data);

              case 5:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function getReplies(_x21, _x22) {
        return _getReplies.apply(this, arguments);
      }

      return getReplies;
    }()
    /**
     * getReactions - List the reactions, supports pagination
     *
     * @param {string} message_id The message id
     * @param {object} options    The pagination options
     *
     * @return {object} Server response
     */

  }, {
    key: "getReactions",
    value: function getReactions(message_id, options) {
      return this.getClient().get(this.getClient().baseURL + "/messages/".concat(message_id, "/reactions"), _objectSpread({}, options));
    }
    /**
     * getMessagesById - Retrieves a list of messages by ID
     *
     * @param {string} messageIds The ids of the messages to retrieve from this channel
     *
     * @return {object} Server response
     */

  }, {
    key: "getMessagesById",
    value: function getMessagesById(messageIds) {
      return this.getClient().get(this._channelURL() + '/messages', {
        ids: messageIds.join(',')
      });
    }
    /**
     * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null
     * @return {date}
     */

  }, {
    key: "lastRead",
    value: function lastRead() {
      this._checkInitialized();

      return this.state.read[this.getClient().userID] ? this.state.read[this.getClient().userID].last_read : null;
    }
    /**
     * countUnread - Count the number of messages with a date thats newer than the last read timestamp
     *
     * @param [date] lastRead the time that the user read a message, defaults to current user's read state
     *
     * @return {int} Unread count
     */

  }, {
    key: "countUnread",
    value: function countUnread(lastRead) {
      if (lastRead == null) {
        lastRead = this.lastRead();
      }

      var count = 0;

      var _iterator = _createForOfIteratorHelper$1(this.state.messages),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var m = _step.value;

          if (this.getClient().userID === m.user.id) {
            continue;
          }

          if (m.silent) {
            continue;
          }

          if (lastRead == null) {
            count++;
            continue;
          }

          if (m.created_at > lastRead) {
            count++;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return count;
    }
    /**
     * countUnread - Count the number of unread messages mentioning the current user
     *
     * @return {int} Unread mentions count
     */

  }, {
    key: "countUnreadMentions",
    value: function countUnreadMentions() {
      var _this2 = this;

      var lastRead = this.lastRead();
      var count = 0;

      var _iterator2 = _createForOfIteratorHelper$1(this.state.messages),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var m = _step2.value;

          if (this.getClient().userID === m.user.id) {
            continue;
          }

          if (m.silent) {
            continue;
          }

          if (lastRead == null) {
            count++;
            continue;
          }

          if (m.created_at > lastRead) {
            (function () {
              var userID = _this2.getClient().userID;

              if (m.mentioned_users.findIndex(function (u) {
                return u.id === userID;
              }) !== -1) {
                count++;
              }
            })();
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return count;
    }
    /**
     * create - Creates a new channel
     *
     * @return {type} The Server Response
     */

  }, {
    key: "query",

    /**
     * query - Query the API, get messages, members or other channel fields
     *
     * @param {object} options The query options
     *
     * @return {object} Returns a query response
     */
    value: function () {
      var _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(options) {
        var queryURL, state;
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                _context25.next = 2;
                return this.getClient().wsPromise;

              case 2:
                queryURL = "".concat(this.getClient().baseURL, "/channels/").concat(this.type);

                if (this.id) {
                  queryURL += "/".concat(this.id);
                }

                _context25.next = 6;
                return this.getClient().post(queryURL + '/query', _objectSpread({
                  data: this._data,
                  state: true
                }, options));

              case 6:
                state = _context25.sent;

                // update the channel id if it was missing
                if (!this.id) {
                  this.id = state.channel.id;
                  this.cid = state.channel.cid; // set the channel as active...

                  if (!(this.cid in this.getClient().activeChannels)) {
                    this.getClient().activeChannels[this.cid] = this;
                  }
                }

                this.getClient()._addChannelConfig(state); // add any messages to our channel state


                this._initializeState(state);

                return _context25.abrupt("return", state);

              case 11:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function query(_x23) {
        return _query.apply(this, arguments);
      }

      return query;
    }()
    /**
     * banUser - Bans a user from a channel
     *
     * @param targetUserID
     * @param options
     * @returns {Promise<*>}
     */

  }, {
    key: "banUser",
    value: function () {
      var _banUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                this._checkInitialized();

                _context26.next = 3;
                return this.getClient().banUser(targetUserID, _objectSpread(_objectSpread({}, options), {}, {
                  type: this.type,
                  id: this.id
                }));

              case 3:
                return _context26.abrupt("return", _context26.sent);

              case 4:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function banUser(_x24, _x25) {
        return _banUser.apply(this, arguments);
      }

      return banUser;
    }()
    /**
     * hides the channel from queryChannels for the user until a message is added
     * If clearHistory is set to true - all messages will be removed for the user
     *
     * @param userId
     * @param clearHistory
     * @returns {Promise<*>}
     */

  }, {
    key: "hide",
    value: function () {
      var _hide = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {
        var userId,
            clearHistory,
            _args27 = arguments;
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                userId = _args27.length > 0 && _args27[0] !== undefined ? _args27[0] : null;
                clearHistory = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : false;

                this._checkInitialized();

                _context27.next = 5;
                return this.getClient().post("".concat(this._channelURL(), "/hide"), {
                  user_id: userId,
                  clear_history: clearHistory
                });

              case 5:
                return _context27.abrupt("return", _context27.sent);

              case 6:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function hide() {
        return _hide.apply(this, arguments);
      }

      return hide;
    }()
    /**
     * removes the hidden status for a channel
     *
     * @param userId
     * @returns {Promise<*>}
     */

  }, {
    key: "show",
    value: function () {
      var _show = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28() {
        var userId,
            _args28 = arguments;
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                userId = _args28.length > 0 && _args28[0] !== undefined ? _args28[0] : null;

                this._checkInitialized();

                _context28.next = 4;
                return this.getClient().post("".concat(this._channelURL(), "/show"), {
                  user_id: userId
                });

              case 4:
                return _context28.abrupt("return", _context28.sent);

              case 5:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function show() {
        return _show.apply(this, arguments);
      }

      return show;
    }()
    /**
     * banUser - Removes the bans for a user on a channel
     *
     * @param targetUserID
     * @returns {Promise<*>}
     */

  }, {
    key: "unbanUser",
    value: function () {
      var _unbanUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(targetUserID) {
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                this._checkInitialized();

                _context29.next = 3;
                return this.getClient().unbanUser(targetUserID, {
                  type: this.type,
                  id: this.id
                });

              case 3:
                return _context29.abrupt("return", _context29.sent);

              case 4:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function unbanUser(_x26) {
        return _unbanUser.apply(this, arguments);
      }

      return unbanUser;
    }()
    /**
     * on - Listen to events on this channel.
     *
     * channel.on('message.new', event => {console.log("my new message", event, channel.state.messages)})
     * or
     * channel.on(event => {console.log(event.type)})
     *
     * @param {string} callbackOrString  The event type to listen for (optional)
     * @param {function} callbackOrNothing The callback to call
     *
     * @return {type} Description
     */

  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : 'all';
      var valid = isValidEventType(key);

      if (!valid) {
        throw Error("Invalid event type ".concat(key));
      }

      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this._client.logger('info', "Attaching listener for ".concat(key, " event on channel ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      this.listeners[key].push(callback);
    }
    /**
     * off - Remove the event handler
     *
     */

  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : 'all';
      var valid = isValidEventType(key);

      if (!valid) {
        throw Error("Invalid event type ".concat(key));
      }

      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this._client.logger('info', "Removing listener for ".concat(key, " event from channel ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      this.listeners[key] = this.listeners[key].filter(function (value) {
        return value !== callback;
      });
    }
  }, {
    key: "_handleChannelEvent",
    value: function _handleChannelEvent(event) {
      var channel = this;

      this._client.logger('info', "channel:_handleChannelEvent - Received event of type { ".concat(event.type, " } on ").concat(this.cid), {
        tags: ['event', 'channel'],
        channel: this
      });

      var s = channel.state;

      switch (event.type) {
        case 'typing.start':
          s.typing = s.typing.set(event.user.id, Immutable(event));
          break;

        case 'typing.stop':
          s.typing = s.typing.without(event.user.id);
          break;

        case 'message.read':
          s.read = s.read.set(event.user.id, Immutable({
            user: _objectSpread({}, event.user),
            last_read: event.received_at
          }));
          break;

        case 'user.watching.start':
        case 'user.updated':
          s.watchers = s.watchers.set(event.user.id, Immutable(event.user));
          break;

        case 'user.watching.stop':
          s.watchers = s.watchers.without(event.user.id);
          break;

        case 'message.new':
        case 'message.updated':
        case 'message.deleted':
          s.addMessageSorted(event.message);
          break;

        case 'channel.truncated':
          s.clearMessages();
          break;

        case 'member.added':
        case 'member.updated':
          s.members = s.members.set(event.member.user_id, Immutable(event.member));
          break;

        case 'member.removed':
          s.members = s.members.without(event.user.id);
          break;

        case 'channel.updated':
          channel.data = Immutable(event.channel);
          break;

        case 'reaction.new':
          s.addReaction(event.reaction, event.message);
          break;

        case 'reaction.deleted':
          s.removeReaction(event.reaction, event.message);
          break;

        case 'channel.hidden':
          if (event.clear_history) {
            s.clearMessages();
          }

          break;

        default:
      } // any event can send over the online count


      if (event.watcher_count !== undefined) {
        channel.state.watcher_count = event.watcher_count;
      }
    }
  }, {
    key: "_checkInitialized",
    value: function _checkInitialized() {
      if (!this.initialized && !this.getClient()._isUsingServerAuth()) {
        throw Error("Channel ".concat(this.cid, " hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve"));
      }
    }
  }, {
    key: "_initializeState",
    value: function _initializeState(state) {
      // add the Users
      if (state.members) {
        var _iterator3 = _createForOfIteratorHelper$1(state.members),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var m = _step3.value;
            this.getClient().state.updateUserReference(m.user, this.cid);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }

      this.state.membership = Immutable(state.membership ? state.membership : {});

      if (state.watchers) {
        var _iterator4 = _createForOfIteratorHelper$1(state.watchers),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var w = _step4.value;
            this.getClient().state.updateUserReference(w.user, this.cid);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } // immutable list of maps


      var messages = state.messages || [];

      if (!this.state.messages) {
        this.state.messages = Immutable([]);
      }

      this.state.addMessagesSorted(messages, true);
      this.state.watcher_count = state.watcher_count; // convert the arrays into objects for easier syncing...

      if (state.watchers) {
        var _iterator5 = _createForOfIteratorHelper$1(state.watchers),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var watcher = _step5.value;
            this.state.watchers = this.state.watchers.set(watcher.id, watcher);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      } // initialize read state to last message or current time if the channel is empty
      // if the user is a member, this value will be overwritten later on otherwise this ensures
      // that eveything up to this point is not marked as unread


      if (this.getClient().userID != null) {
        var last_read = this.state.last_message_at != null ? this.state.last_message_at : new Date();
        this.state.read = this.state.read.set(this.getClient().user.id, {
          user: this.getClient().user,
          last_read: last_read
        });
      } // apply read state if part of the state


      if (state.read) {
        var _iterator6 = _createForOfIteratorHelper$1(state.read),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var read = _step6.value;

            var parsedRead = _extends(_objectSpread({}, read));

            parsedRead.last_read = new Date(read.last_read);
            this.state.read = this.state.read.set(read.user.id, parsedRead);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }

      if (state.members) {
        var _iterator7 = _createForOfIteratorHelper$1(state.members),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _m = _step7.value;
            this.state.members = this.state.members.set(_m.user.id, _m);
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      }
    }
  }, {
    key: "_disconnect",
    value: function _disconnect() {
      this._client.logger('info', "channel:disconnect() - Disconnecting the channel ".concat(this.cid), {
        tags: ['connection', 'channel'],
        channel: this
      });

      this.disconnected = true;
    }
  }]);

  return Channel;
}();

function _createForOfIteratorHelper$2(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray$2(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
/**
 * ClientState - A container class for the client state.
 */

var ClientState = /*#__PURE__*/function () {
  function ClientState() {
    _classCallCheck(this, ClientState);

    // show the status for a certain user...
    // ie online, offline etc
    this.users = Immutable({}); // store which channels contain references to the specified user...

    this.userChannelReferences = {};
  }

  _createClass(ClientState, [{
    key: "updateUsers",
    value: function updateUsers(users) {
      var _iterator = _createForOfIteratorHelper$2(users),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var user = _step.value;
          this.updateUser(user);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "updateUser",
    value: function updateUser(user) {
      if (user != null) {
        this.users = this.users.set(user.id, Immutable(user));
      }
    }
  }, {
    key: "updateUserReference",
    value: function updateUserReference(user, channelID) {
      if (user == null) {
        return;
      }

      this.updateUser(user);

      if (!this.userChannelReferences[user.id]) {
        this.userChannelReferences[user.id] = {};
      }

      this.userChannelReferences[user.id][channelID] = true;
    }
  }]);

  return ClientState;
}();

/**
 * StableWSConnection - A WS connection that reconnects upon failure.
 * - the browser will sometimes report that you're online or offline
 * - the WS connection can break and fail (there is a 30s health check)
 * - sometimes your WS connection will seem to work while the user is in fact offline
 * - to speed up online/offline detection you can use the window.addEventListener('offline');
 *
 * There are 4 ways in which a connection can become unhealthy:
 * - websocket.onerror is called
 * - websocket.onclose is called
 * - the health check fails and no event is received for ~40 seconds
 * - the browser indicates the connection is now offline
 *
 * There are 2 assumptions we make about the server:
 * - state can be recovered by querying the channel again
 * - if the servers fails to publish a message to the client, the WS connection is destroyed
 */

var StableWSConnection = /*#__PURE__*/function () {
  function StableWSConnection(_ref) {
    var _this = this;

    var wsBaseURL = _ref.wsBaseURL,
        clientID = _ref.clientID,
        userID = _ref.userID,
        user = _ref.user,
        userAgent = _ref.userAgent,
        apiKey = _ref.apiKey,
        tokenManager = _ref.tokenManager,
        authType = _ref.authType,
        messageCallback = _ref.messageCallback,
        recoverCallback = _ref.recoverCallback,
        eventCallback = _ref.eventCallback,
        logger = _ref.logger;

    _classCallCheck(this, StableWSConnection);

    _defineProperty(this, "_buildUrl", function () {
      var params = {
        user_id: _this.user.id,
        user_details: _this.user,
        user_token: _this.tokenManager.getToken(),
        server_determines_connection_id: true
      };
      var qs = encodeURIComponent(JSON.stringify(params));

      var token = _this.tokenManager.getToken();

      return "".concat(_this.wsBaseURL, "/connect?json=").concat(qs, "&api_key=").concat(_this.apiKey, "&authorization=").concat(token, "&stream-auth-type=").concat(_this.authType, "&x-stream-client=").concat(_this.userAgent);
    });

    _defineProperty(this, "onlineStatusChanged", function (event) {
      if (event.type === 'offline') {
        // mark the connection as down
        _this.logger('info', 'connection:onlineStatusChanged() - Status changing to offline', {
          tags: ['connection']
        });

        _this._setHealth(false);
      } else if (event.type === 'online') {
        // retry right now...
        // We check this.isHealthy, not sure if it's always
        // smart to create a new WS connection if the old one is still up and running.
        // it's possible we didnt miss any messages, so this process is just expensive and not needed.
        _this.logger('info', "connection:onlineStatusChanged() - Status changing to online. isHealthy: ".concat(_this.isHealthy), {
          tags: ['connection']
        });

        if (!_this.isHealthy) {
          _this._reconnect({
            interval: 10
          });
        }
      }
    });

    _defineProperty(this, "onopen", function (wsID) {
      if (_this.wsID !== wsID) return;

      _this.logger('info', 'connection:onopen() - onopen callback', {
        tags: ['connection'],
        wsID: wsID
      }); // set healthy..


      _this._setHealth(true);
    });

    _defineProperty(this, "onmessage", function (wsID, event) {
      if (_this.wsID !== wsID) return; // we wait till the first message before we consider the connection open..
      // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately
      // after that a ws.onclose..

      if (!_this.isResolved) {
        var data = JSON.parse(event.data);

        if (data.error != null) {
          _this.rejectPromise(_this._errorFromWSEvent(data.error, false));

          return;
        } else {
          _this.resolvePromise(event);
        }
      } // trigger the event..


      _this.lastEvent = new Date();

      _this.logger('info', 'connection:onmessage() - onmessage callback', {
        tags: ['connection'],
        event: event,
        wsID: wsID
      });

      _this.messageCallback(event);
    });

    _defineProperty(this, "onclose", function (wsID, event) {
      _this.logger('info', 'connection:onclose() - onclose callback - ' + event.code, {
        tags: ['connection'],
        event: event,
        wsID: wsID
      });

      if (_this.wsID !== wsID) return;

      if (event.code === chatCodes.WS_CLOSED_SUCCESS) {
        // this is a permanent error raised by stream..
        // usually caused by invalid auth details
        var error = new Error("WS connection reject with error ".concat(event.reason));
        error.reason = event.reason;

        _this.rejectPromise(error);

        _this.logger('info', "connection:onclose() - WS connection reject with error ".concat(event.reason), {
          tags: ['connection'],
          event: event
        });
      } else {
        _this.consecutiveFailures += 1;
        _this.totalFailures += 1;

        _this._setHealth(false);

        _this.rejectPromise(_this._errorFromWSEvent(event));

        _this.logger('info', "connection:onclose() - WS connection closed. Calling reconnect ...", {
          tags: ['connection'],
          event: event
        }); // reconnect if its an abnormal failure


        _this._reconnect();
      }
    });

    _defineProperty(this, "onerror", function (wsID, event) {
      if (_this.wsID !== wsID) return;
      _this.consecutiveFailures += 1;
      _this.totalFailures += 1;

      _this._setHealth(false);

      _this.rejectPromise(_this._errorFromWSEvent(event));

      _this.logger('info', "connection:onerror() - WS connection resulted into error", {
        tags: ['connection'],
        event: event
      });

      _this._reconnect();
    });

    _defineProperty(this, "_setHealth", function (healthy) {
      if (healthy && !_this.isHealthy) {
        // yee we are online:
        _this.isHealthy = true;

        _this.eventCallback({
          type: 'connection.changed',
          online: true
        });
      }

      if (!healthy && _this.isHealthy) {
        // bummer we are offline
        _this.isHealthy = false;
        setTimeout(function () {
          if (!_this.isHealthy) {
            _this.eventCallback({
              type: 'connection.changed',
              online: false
            });
          }
        }, 5000);
      }
    });

    _defineProperty(this, "_errorFromWSEvent", function (event) {
      var isWSFailure = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.
      _this.logger('warn', "connection:_errorFromWSEvent() - WS failed with code ".concat(event.code), {
        tags: ['connection'],
        event: event
      });

      var error = new Error("WS failed with code ".concat(event.code, " and reason - ").concat(event.message));
      error.code = event.code;
      error.StatusCode = event.StatusCode;
      error.isWSFailure = isWSFailure;
      return error;
    });

    _defineProperty(this, "_listenForConnectionChanges", function () {
      if (typeof window !== 'undefined' && window != null && window.addEventListener != null) {
        window.addEventListener('offline', _this.onlineStatusChanged);
        window.addEventListener('online', _this.onlineStatusChanged);
      }
    });

    _defineProperty(this, "_removeConnectionListeners", function () {
      if (typeof window !== 'undefined' && window != null && window.addEventListener != null) {
        window.removeEventListener('offline', _this.onlineStatusChanged);
        window.removeEventListener('online', _this.onlineStatusChanged);
      }
    });

    _defineProperty(this, "_retryInterval", function () {
      // try to reconnect in 0-5 seconds (random to spread out the load from failures)
      var max = Math.min(500 + _this.consecutiveFailures * 2000, 25000);
      var min = Math.min(Math.max(250, (_this.consecutiveFailures - 1) * 2000), 25000);
      return Math.floor(Math.random() * (max - min) + min);
    });

    _defineProperty(this, "_setupConnectionPromise", function () {
      var that = _this;
      _this.isResolved = false;
      /** a promise that is resolved once ws.open is called */

      _this.connectionOpen = new Promise(function (resolve, reject) {
        that.resolvePromise = resolve;
        that.rejectPromise = reject;
      }).then(function (e) {
        var data = JSON.parse(e.data);

        if (data.error != null) {
          throw new Error(JSON.stringify(data.error));
        }

        return data;
      }, function (error) {
        throw error;
      });
    });

    this.wsBaseURL = wsBaseURL;
    this.clientID = clientID;
    this.userID = userID;
    this.user = user;
    this.authType = authType;
    this.userAgent = userAgent;
    this.apiKey = apiKey;
    this.tokenManager = tokenManager;
    /** consecutive failures influence the duration of the timeout */

    this.consecutiveFailures = 0;
    /** keep track of the total number of failures */

    this.totalFailures = 0;
    /** We only make 1 attempt to reconnect at the same time.. */

    this.isConnecting = false;
    /** Boolean that indicates if we have a working connection to the server */

    this.isHealthy = false;
    /** Callback when the connection fails and recovers */

    this.recoverCallback = recoverCallback;
    this.messageCallback = messageCallback;
    this.eventCallback = eventCallback;
    this.logger = logger;
    /** Incremented when a new WS connection is made */

    this.wsID = 1;
    /** Store the last event time for health checks */

    this.lastEvent = null;
    /** Send a health check message every 30 seconds */

    this.healthCheckInterval = 30 * 1000;
    /** Every second we verify that we didn't miss any health checks */

    this.monitorInterval = 1 * 1000;

    this._listenForConnectionChanges();
  }
  /**
   * connect - Connect to the WS URL
   *
   * @return {promise} Promise that completes once the first health check message is received
   */


  _createClass(StableWSConnection, [{
    key: "connect",
    value: function () {
      var _connect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var healthCheck;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.isConnecting) {
                  _context.next = 2;
                  break;
                }

                throw Error("You've called connect twice, can only attempt 1 connection at the time");

              case 2:
                _context.prev = 2;
                this.isConnecting = true;
                _context.next = 6;
                return this._connect();

              case 6:
                healthCheck = _context.sent;
                this.isConnecting = false;
                this.consecutiveFailures = 0;

                this._startMonitor();

                this._startHealthCheck();

                this.logger('info', "connection:connect() - Established ws connection with healthcheck: ".concat(healthCheck), {
                  tags: ['connection']
                });
                return _context.abrupt("return", healthCheck);

              case 15:
                _context.prev = 15;
                _context.t0 = _context["catch"](2);
                this.isConnecting = false;
                this.isHealthy = false;
                this.consecutiveFailures += 1;

                if (!(_context.t0.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic())) {
                  _context.next = 23;
                  break;
                }

                this.logger('info', 'connection:connect() - WS failure due to expired token, so going to try to reload token and reconnect', {
                  tags: ['connection']
                });
                return _context.abrupt("return", this._reconnect({
                  refreshToken: true
                }));

              case 23:
                if (_context.t0.isWSFailure) {
                  _context.next = 25;
                  break;
                }

                throw new Error(JSON.stringify({
                  code: _context.t0.code,
                  StatusCode: _context.t0.StatusCode,
                  message: _context.t0.message,
                  isWSFailure: _context.t0.isWSFailure
                }));

              case 25:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 15]]);
      }));

      function connect() {
        return _connect2.apply(this, arguments);
      }

      return connect;
    }()
  }, {
    key: "disconnect",

    /**
     * disconnect - Disconnect the connection and doesn't recover...
     *
     */
    value: function disconnect(timeout) {
      var _this2 = this;

      this.logger('info', "connection:disconnect() - Closing the websocket connection for wsID ".concat(this.wsID), {
        tags: ['connection']
      });
      this.wsID += 1; // start by removing all the listeners

      if (this.healthCheckIntervalRef) {
        clearInterval(this.healthCheckIntervalRef);
      }

      if (this.monitorIntervalRef) {
        clearInterval(this.monitorIntervalRef);
      }

      this._removeConnectionListeners();

      this.isHealthy = false; // remove ws handlers...

      if (this.ws && this.ws.removeAllListeners) {
        this.ws.removeAllListeners();
      }

      var isClosedPromise; // and finally close...
      // Assigning to local here because we will remove it from this before the
      // promise resolves.

      var ws = this.ws;

      if (ws && ws.close && ws.readyState === ws.OPEN) {
        isClosedPromise = new Promise(function (resolve) {
          var onclose = function onclose(event) {
            _this2.logger('info', "connection:disconnect() - resolving isClosedPromise ".concat(event ? 'with' : 'without', " close frame"), {
              tags: ['connection'],
              event: event
            });

            resolve();
          };

          ws.onclose = onclose; // In case we don't receive close frame websocket server in time,
          // lets not wait for more than 1 seconds.

          setTimeout(onclose, timeout != null ? timeout : 1000);
        });
        this.logger('info', "connection:disconnect() - Manually closed connection by calling client.disconnect()", {
          tags: ['connection']
        });
        ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');
      } else {
        this.logger('info', "connection:disconnect() - ws connection doesn't exist or it is already closed.", {
          tags: ['connection']
        });
        isClosedPromise = Promise.resolve();
      }

      delete this.ws;
      return isClosedPromise;
    }
    /**
     * _connect - Connect to the WS endpoint
     *
     * @return {promise} Promise that completes once the first health check message is received
     */

  }, {
    key: "_connect",
    value: function () {
      var _connect3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var wsURL, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.tokenManager.tokenReady();

              case 2:
                this._setupConnectionPromise();

                wsURL = this._buildUrl();
                this.ws = new isoWS(wsURL);
                this.ws.onopen = this.onopen.bind(this, this.wsID);
                this.ws.onclose = this.onclose.bind(this, this.wsID);
                this.ws.onerror = this.onerror.bind(this, this.wsID);
                this.ws.onmessage = this.onmessage.bind(this, this.wsID);
                _context2.next = 11;
                return this.connectionOpen;

              case 11:
                response = _context2.sent;
                this.connectionID = response.connection_id;
                return _context2.abrupt("return", response);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _connect() {
        return _connect3.apply(this, arguments);
      }

      return _connect;
    }()
    /**
     * _reconnect - Retry the connection to WS endpoint
     *
     * @param {object} options Following options are available
     *
     * - `interval`	{int}			number of ms that function should wait before reconnecting
     * - `refreshToken` {boolean}	reload/refresh user token be refreshed before attempting reconnection.
     */

  }, {
    key: "_reconnect",
    value: function () {
      var _reconnect2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var options,
            interval,
            open,
            _args3 = arguments;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};
                this.logger('info', 'connection:_reconnect() - Initiating the reconnect', {
                  tags: ['connection']
                }); // only allow 1 connection at the time

                if (!(this.isConnecting || this.isHealthy)) {
                  _context3.next = 5;
                  break;
                }

                this.logger('info', 'connection:_reconnect() - Abort (1) since already connecting or healthy', {
                  tags: ['connection']
                });
                return _context3.abrupt("return");

              case 5:
                // reconnect in case of on error or on close
                // also reconnect if the health check cycle fails
                interval = options.interval;

                if (!interval) {
                  interval = this._retryInterval();
                } // reconnect, or try again after a little while...


                _context3.next = 9;
                return sleep(interval);

              case 9:
                if (!(this.isConnecting || this.isHealthy)) {
                  _context3.next = 12;
                  break;
                }

                this.logger('info', 'connection:_reconnect() - Abort (2) since already connecting or healthy', {
                  tags: ['connection']
                });
                return _context3.abrupt("return");

              case 12:
                this.isConnecting = true; // cleanup the old connection

                this.logger('info', 'connection:_reconnect() - Destroying current WS connection', {
                  tags: ['connection']
                });

                this._destroyCurrentWSConnection();

                if (!options.refreshToken) {
                  _context3.next = 18;
                  break;
                }

                _context3.next = 18;
                return this.tokenManager.loadToken();

              case 18:
                _context3.prev = 18;
                _context3.next = 21;
                return this._connect();

              case 21:
                open = _context3.sent;

                if (!this.recoverCallback) {
                  _context3.next = 27;
                  break;
                }

                this.logger('info', 'connection:_reconnect() - Waiting for recoverCallBack', {
                  tags: ['connection']
                });
                _context3.next = 26;
                return this.recoverCallback(open);

              case 26:
                this.logger('info', 'connection:_reconnect() - Finished recoverCallBack', {
                  tags: ['connection']
                });

              case 27:
                this.isConnecting = false;
                this.consecutiveFailures = 0;
                _context3.next = 40;
                break;

              case 31:
                _context3.prev = 31;
                _context3.t0 = _context3["catch"](18);
                this.isConnecting = false;
                this.isHealthy = false;
                this.consecutiveFailures += 1;

                if (!(_context3.t0.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic())) {
                  _context3.next = 39;
                  break;
                }

                this.logger('info', 'connection:_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect', {
                  tags: ['connection']
                });
                return _context3.abrupt("return", this._reconnect({
                  refreshToken: true
                }));

              case 39:
                // reconnect on WS failures, dont reconnect if there is a code bug
                if (_context3.t0.isWSFailure) {
                  this.logger('info', 'connection:_reconnect() - WS failure, so going to try to reconnect', {
                    tags: ['connection']
                  });

                  this._reconnect();
                }

              case 40:
                this.logger('info', 'connection:_reconnect() - == END ==', {
                  tags: ['connection']
                });

              case 41:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[18, 31]]);
      }));

      function _reconnect() {
        return _reconnect2.apply(this, arguments);
      }

      return _reconnect;
    }()
    /**
     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.
     *
     * @param {object} event Event with type online or offline
     *
     */

  }, {
    key: "_destroyCurrentWSConnection",

    /**
     * _destroyCurrentWSConnection - Removes the current WS connnection
     *
     */
    value: function _destroyCurrentWSConnection() {
      // increment the ID, meaning we will ignore all messages from the old
      // ws connection from now on.
      this.wsID += 1;

      try {
        if (this.ws && this.ws.removeAllListeners) {
          this.ws.removeAllListeners();
        }

        if (this.ws && this.ws.close) {
          this.ws.close();
        }
      } catch (e) {// we dont care
      }
    }
    /**
     * _retryInterval - A retry interval which increases after consecutive failures
     *
     * @return {int} Duration to wait in milliseconds
     */

  }, {
    key: "_startHealthCheck",

    /**
     * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works
     *
     */
    value: function _startHealthCheck() {
      var that = this; // 30 seconds is the recommended interval (messenger uses this)

      this.healthCheckIntervalRef = setInterval(function () {
        // send the healthcheck.., server replies with a health check event
        var data = [{
          type: 'health.check',
          client_id: that.clientID,
          user_id: that.userID
        }]; // try to send on the connection

        try {
          that.ws.send(JSON.stringify(data));
        } catch (e) {// error will already be detected elsewhere
        }
      }, that.healthCheckInterval);
    }
    /**
     * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.
     *
     */

  }, {
    key: "_startMonitor",
    value: function _startMonitor() {
      var _this3 = this;

      var that = this;
      this.monitorIntervalRef = setInterval(function () {
        var now = new Date(); // means we missed a health check

        if (now - that.lastEvent > _this3.healthCheckInterval + 10 * 1000) {
          _this3.logger('info', 'connection:_startMonitor - going to reconnect', {
            tags: ['connection']
          });

          that._setHealth(false);

          that._reconnect();
        }
      }, that.monitorInterval);
    }
  }]);

  return StableWSConnection;
}();

var jwt = null;

var crypto = null;

var map = function map(arr, callback) {
  var res = [];
  var kValue, mappedValue;

  for (var k = 0, len = arr.length; k < len; k++) {
    if (typeof arr === 'string' && !!arr.charAt(k)) {
      kValue = arr.charAt(k);
      mappedValue = callback(kValue, k, arr);
      res[k] = mappedValue;
    } else if (typeof arr !== 'string' && k in arr) {
      kValue = arr[k];
      mappedValue = callback(kValue, k, arr);
      res[k] = mappedValue;
    }
  }

  return res;
};

function encodeBase64(data) {
  return base64Js.fromByteArray(map(data, function (char) {
    return char.charCodeAt(0);
  }));
} // base-64 decoder throws exception if encoded string is not padded by '=' to make string length
// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility
// https://github.com/beatgammit/base64-js/blob/master/index.js#L26

function decodeBase64(s) {
  var e = {},
      w = String.fromCharCode,
      L = s.length;
  var i,
      b = 0,
      c,
      x,
      l = 0,
      a,
      r = '';
  var A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

  for (i = 0; i < 64; i++) {
    e[A.charAt(i)] = i;
  }

  for (x = 0; x < L; x++) {
    c = e[s.charAt(x)];
    b = (b << 6) + c;
    l += 6;

    while (l >= 8) {
      ((a = b >>> (l -= 8) & 0xff) || x < L - 2) && (r += w(a));
    }
  }

  return r;
}

function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
/**
 * Creates the JWT token that can be used for a UserSession
 * @method JWTUserSessionToken
 * @memberof signing
 * @private
 * @param {string} apiSecret - API Secret key
 * @param {string} userId - The user_id key in the JWT payload
 * @param {object} [extraData] - Extra that should be part of the JWT token
 * @param {object} [jwtOptions] - Options that can be past to jwt.sign
 * @return {string} JWT Token
 */

function JWTUserToken(apiSecret, userId) {
  var extraData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var jwtOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  if (typeof userId !== 'string') {
    throw new TypeError('userId should be a string');
  }

  var payload = _objectSpread$1({
    user_id: userId
  }, extraData); // make sure we return a clear error when jwt is shimmed (ie. browser build)


  {
    throw Error("Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.");
  }

  var opts = _extends({
    algorithm: 'HS256',
    noTimestamp: true
  }, jwtOptions);

  return jwt.sign(payload, apiSecret, opts);
}
function JWTServerToken(apiSecret) {
  var jwtOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var payload = {
    server: true
  };

  var opts = _extends({
    algorithm: 'HS256',
    noTimestamp: true
  }, jwtOptions);

  return jwt.sign(payload, apiSecret, opts);
}
/**
 * @return {string}
 */

function UserFromToken(token) {
  var fragments = token.split('.');

  if (fragments.length !== 3) {
    return '';
  }

  var b64Payload = fragments[1];
  var payload = decodeBase64(b64Payload);
  var data = JSON.parse(payload);
  return data.user_id;
}
/**
 *
 * @param userId {string} the id of the user
 * @return {string}
 */

function DevToken(userId) {
  return ['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{"alg": "HS256", "typ": "JWT"}
  encodeBase64(JSON.stringify({
    user_id: userId
  })), 'devtoken' // hardcoded signature
  ].join('.');
}
/**
 *
 * @param body {string} the signed message
 * @param secret {string} the shared secret used to generate the signature (Stream API secret)
 * @param signature {string} the signature to validate
 * @return {boolean}
 */

function CheckSignature(body, secret, signature) {
  var key = Buffer.from(secret, 'ascii');
  var hash = crypto.createHmac('sha256', key).update(body).digest('hex');
  return hash === signature;
}

var http = null;

var https = null;

var name = "stream-chat";
var version = "1.14.1";
var description = "JS SDK for the Stream Chat API";
var author = "GetStream";
var homepage = "https://getstream.io/chat/";
var repository = "https://github.com/GetStream/stream-chat-js.git";
var main = "./dist/index.js";
var module$1 = "./dist/index.es.js";
var types = "./types/stream-chat/index.d.ts";
var browser = {
	"./dist/index.es.js": "./dist/browser.es.js",
	"./dist/index.js": "./dist/browser.js"
};
var jsdelivr = "./dist/browser.full-bundle.min.js";
var license = "SEE LICENSE IN LICENSE";
var keywords = [
	"chat",
	"messaging",
	"conversation",
	"react",
	"stream",
	"getstream",
	"getstream.io"
];
var files = [
	"/dist",
	"/types/stream-chat/index.d.ts",
	"readme.md",
	"license"
];
var dependencies = {
	"@babel/runtime": "^7.3.1",
	"@types/seamless-immutable": "7.1.12",
	"@types/ws": "^6.0.3",
	axios: "^0.18.1",
	"base64-js": "^1.3.1",
	"chai-arrays": "^2.0.0",
	"form-data": "^2.3.3",
	"isomorphic-ws": "^4.0.1",
	jsonwebtoken: "^8.3.0",
	"seamless-immutable": "^7.1.4",
	uuid: "^3.3.2",
	ws: "^6.1.3"
};
var devDependencies = {
	"@babel/cli": "^7.6.0",
	"@babel/core": "^7.6.0",
	"@babel/node": "^7.2.2",
	"@babel/plugin-proposal-class-properties": "^7.1.0",
	"@babel/plugin-transform-async-to-generator": "^7.2.0",
	"@babel/plugin-transform-object-assign": "^7.2.0",
	"@babel/plugin-transform-runtime": "^7.2.0",
	"@babel/preset-env": "^7.1.6",
	"@babel/register": "^7.0.0",
	"@types/babel__core": "^7.1.3",
	"@types/bluebird": "^3.5.29",
	"@types/chai": "^4.2.5",
	"@types/chai-arrays": "^1.0.3",
	"@types/chai-as-promised": "^7.1.2",
	"@types/chai-like": "^1.1.0",
	"@types/eslint": "6.1.3",
	"@types/faker": "^4.1.7",
	"@types/jsonwebtoken": "^8.3.5",
	"@types/mocha": "^5.2.7",
	"@types/node": "^13.13.0",
	"@types/prettier": "^1.18.4",
	"@types/rollup-plugin-json": "^3.0.2",
	"@types/rollup-plugin-peer-deps-external": "^2.2.0",
	"@types/rollup-plugin-url": "^2.2.0",
	"@types/sinon": "^7.5.1",
	"@types/uuid": "^3.4.5",
	"babel-eslint": "^10.0.1",
	bluebird: "^3.5.3",
	chai: "^4.2.0",
	"chai-as-promised": "^7.1.1",
	"chai-like": "^1.1.1",
	"chai-sorted": "^0.2.0",
	dotenv: "^8.2.0",
	dtslint: "^2.0.5",
	eslint: "5.6.0",
	"eslint-plugin-babel": "^5.3.0",
	"eslint-plugin-markdown": "^1.0.0",
	"eslint-plugin-sonarjs": "^0.5.0",
	faker: "^4.1.0",
	husky: "^1.3.1",
	"lint-staged": "^8.1.0",
	longjohn: "^0.2.12",
	mocha: "^5.2.0",
	mockttp: "^0.19.0",
	prettier: "^1.15.2",
	rollup: "^0.68.2",
	"rollup-plugin-babel": "^4.0.3",
	"rollup-plugin-commonjs": "^9.1.8",
	"rollup-plugin-json": "^3.1.0",
	"rollup-plugin-node-resolve": "^4.0.0",
	"rollup-plugin-peer-deps-external": "^2.2.0",
	"rollup-plugin-replace": "^2.1.0",
	"rollup-plugin-scss": "^0.4.0",
	"rollup-plugin-terser": "^4.0.4",
	"rollup-plugin-url": "^2.0.0",
	sinon: "^7.2.3"
};
var scripts = {
	start: "rollup -c -w",
	build: "rollup -c",
	prettier: "npx prettier --list-different '**/*.{js,ts,md,css,scss,json}' .eslintrc.json .prettierrc .babelrc",
	"prettier-fix": "npx prettier --write '**/*.{js,ts,md,css,scss,json}' .eslintrc.json .prettierrc .babelrc",
	"test-api-dts": "node types/stream-chat/api-response-tests/index.js && npx prettier --write 'types/stream-chat/api-response-tests/data.ts' .eslintrc.json .prettierrc .babelrc && tsc types/stream-chat/api-response-tests/data.ts && rm types/stream-chat/api-response-tests/data.js && dtslint types/stream-chat",
	eslint: "npx eslint '**/*.{js,md}' --max-warnings 0",
	test: "NODE_ENV=test mocha --exit --bail --timeout 15000 --require @babel/register test/*.js --async-stack-traces",
	"test-local": "STREAM_LOCAL_TEST_RUN=true NODE_ENV=test mocha --exit --bail --timeout 15000 --require @babel/register test/*.js --async-stack-traces",
	testall: "NODE_ENV=test mocha --exit --timeout 3000 --require @babel/register test/*.js --async-stack-traces",
	testwatch: "NODE_ENV=test nodemon ./node_modules/.bin/mocha --timeout 15000 --require test-entry.js test/test.js",
	lint: "npx prettier --list-different '**/*.{js,ts,css,scss,json}' .eslintrc.json .prettierrc .babelrc && npx eslint 'src/*.js' --max-warnings 0",
	"lint-fix": "npx prettier --write '**/*.{js,ts,css,scss,json}' .eslintrc.json .prettierrc .babelrc && npx eslint --fix 'src/*.js' --max-warnings 0",
	prepare: "rm -rf dist && yarn run build",
	preversion: "yarn && yarn lint",
	version: "git add yarn.lock",
	postversion: "git push && git push --tags && npm publish"
};
var husky = {
	hooks: {
		"pre-commit": "./dotgit/hooks/pre-commit-format.sh && dotgit/hooks/pre-commit-reject-binaries.py"
	}
};
var engines = {
	node: "10 || 12 || >=14"
};
var pkg = {
	name: name,
	version: version,
	description: description,
	author: author,
	homepage: homepage,
	repository: repository,
	main: main,
	module: module$1,
	"jsnext:main": "./dist/index.es.js",
	types: types,
	browser: browser,
	"react-native": {
	"./dist/index.es.js": "./dist/browser.es.js",
	"./dist/index.js": "./dist/browser.js"
},
	jsdelivr: jsdelivr,
	license: license,
	keywords: keywords,
	files: files,
	dependencies: dependencies,
	devDependencies: devDependencies,
	scripts: scripts,
	husky: husky,
	engines: engines
};

/**
 * TokenManager
 *
 * Handles all the operations around user token.
 */

var TokenManager =
/**
 * Constructor
 *
 * @param {object} secret
 */
function TokenManager(secret) {
  var _this = this;

  _classCallCheck(this, TokenManager);

  _defineProperty(this, "setTokenOrProvider", /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tokenOrProvider, user) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _this.validateToken(tokenOrProvider, user);

              _this.user = user;

              if (isFunction(tokenOrProvider)) {
                _this.tokenProvider = tokenOrProvider;
                _this.type = 'provider';
              }

              if (typeof tokenOrProvider === 'string') {
                _this.token = tokenOrProvider;
                _this.type = 'static';
              }

              if (!tokenOrProvider && _this.user && _this.secret) {
                _this.token = JWTUserToken(_this.secret, user.id, {}, {});
                _this.type = 'static';
              }

              _context.next = 7;
              return _this.loadToken();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());

  _defineProperty(this, "reset", function () {
    _this.token = null;
    _this.user = null;
    _this.loadTokenPromise = null;
  });

  _defineProperty(this, "validateToken", function (tokenOrProvider, user) {
    // allow empty token for anon user
    if (user && user.anon && !tokenOrProvider) return; // Don't allow empty token for non-server side client.

    if (!_this.secret && !tokenOrProvider) {
      throw new Error('User token can not be empty');
    }

    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {
      throw new Error('user token should either be a string or a function');
    }

    if (typeof tokenOrProvider === 'string') {
      // Allow empty token for anonymous users
      if (user.anon && tokenOrProvider === '') return;
      var tokenUserId = UserFromToken(tokenOrProvider);

      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {
        throw new Error('userToken does not have a user_id or is not matching with user.id');
      }
    }
  });

  _defineProperty(this, "tokenReady", function () {
    return _this.loadTokenPromise;
  });

  _defineProperty(this, "loadToken", function () {
    _this.loadTokenPromise = new Promise( /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(_this.type === 'static')) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", resolve(_this.token));

              case 2:
                _context2.next = 4;
                return _this.tokenProvider();

              case 4:
                _this.token = _context2.sent;
                resolve(_this.token);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function (_x3) {
        return _ref2.apply(this, arguments);
      };
    }());
    return _this.loadTokenPromise;
  });

  _defineProperty(this, "getToken", function () {
    if (_this.token) {
      return _this.token;
    }

    if (_this.user && _this.user.anon && !_this.token) {
      return _this.token;
    }

    if (_this.secret) {
      return JWTServerToken(_this.secret);
    }

    throw new Error("Both secret and user tokens are not set. Either client.setUser wasn't called or client.disconnect was called");
  });

  _defineProperty(this, "isStatic", function () {
    return _this.type === 'static';
  });

  this.loadTokenPromise = null;

  if (secret) {
    this.secret = secret;
  }

  this.type = 'static';

  if (this.secret) {
    this.token = JWTServerToken(this.secret);
  }
}
/**
 * Set the static string token or token provider.
 * Token provider should return a token string or a promise which resolves to string token.
 *
 * @param {string | function} tokenOrProvider
 */
;

function _createForOfIteratorHelper$3(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray$3(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function isReadableStream(obj) {
  return obj !== null && _typeof(obj) === 'object' && typeof obj._read === 'function' && _typeof(obj._readableState) === 'object';
}

var StreamChat = /*#__PURE__*/function () {
  function StreamChat(key, secretOrOptions, _options) {
    var _this = this;

    _classCallCheck(this, StreamChat);

    _defineProperty(this, "_setupConnection", function () {
      _this.UUID = uuidv4();
      _this.clientID = "".concat(_this.userID, "--").concat(_this.UUID);
      _this.wsPromise = _this.connect();

      _this._startCleaning();

      return _this.wsPromise;
    });

    _defineProperty(this, "_hasConnectionID", function () {
      return Boolean(_this.connectionID);
    });

    _defineProperty(this, "setUser", function (user, userTokenOrProvider) {
      if (_this.userID) {
        throw new Error('Use client.disconnect() before trying to connect as a different user. setUser was called twice.');
      } // we generate the client id client side


      _this.userID = user.id;

      if (!_this.userID) {
        throw new Error('The "id" field on the user is missing');
      }

      var setTokenPromise = _this._setToken(user, userTokenOrProvider);

      _this._setUser(user);

      var wsPromise = _this._setupConnection();

      _this.anonymous = false;
      _this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(function (result) {
        return (// We only return connection promise;
          result[1]
        );
      }).catch(function (e) {
        throw e;
      });
      return _this.setUserPromise;
    });

    _defineProperty(this, "_setToken", function (user, userTokenOrProvider) {
      return _this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);
    });

    _defineProperty(this, "setAnonymousUser", function () {
      _this.anonymous = true;
      _this.userID = uuidv4();
      var anonymousUser = {
        id: _this.userID,
        anon: true
      };

      _this._setToken(anonymousUser, '');

      _this._setUser(anonymousUser);

      return _this._setupConnection();
    });

    _defineProperty(this, "doAxiosRequest", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, url, data) {
        var options,
            requestConfig,
            response,
            _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = _args.length > 3 && _args[3] !== undefined ? _args[3] : {};
                _context.next = 3;
                return _this.tokenManager.tokenReady();

              case 3:
                requestConfig = _this._enrichAxiosOptions(options);
                _context.prev = 4;

                _this._logApiRequest(type, url, data, requestConfig);

                _context.t0 = type;
                _context.next = _context.t0 === 'get' ? 9 : _context.t0 === 'delete' ? 13 : _context.t0 === 'post' ? 17 : _context.t0 === 'put' ? 21 : _context.t0 === 'patch' ? 25 : 29;
                break;

              case 9:
                _context.next = 11;
                return _this.axiosInstance.get(url, requestConfig);

              case 11:
                response = _context.sent;
                return _context.abrupt("break", 30);

              case 13:
                _context.next = 15;
                return _this.axiosInstance.delete(url, requestConfig);

              case 15:
                response = _context.sent;
                return _context.abrupt("break", 30);

              case 17:
                _context.next = 19;
                return _this.axiosInstance.post(url, data, requestConfig);

              case 19:
                response = _context.sent;
                return _context.abrupt("break", 30);

              case 21:
                _context.next = 23;
                return _this.axiosInstance.put(url, data, requestConfig);

              case 23:
                response = _context.sent;
                return _context.abrupt("break", 30);

              case 25:
                _context.next = 27;
                return _this.axiosInstance.patch(url, data, requestConfig);

              case 27:
                response = _context.sent;
                return _context.abrupt("break", 30);

              case 29:
                return _context.abrupt("break", 30);

              case 30:
                _this._logApiResponse(type, url, response);

                return _context.abrupt("return", _this.handleResponse(response));

              case 34:
                _context.prev = 34;
                _context.t1 = _context["catch"](4);

                _this._logApiError(type, url, _context.t1);

                if (!_context.t1.response) {
                  _context.next = 46;
                  break;
                }

                if (!(_context.t1.response.data.code === chatCodes.TOKEN_EXPIRED && !_this.tokenManager.isStatic())) {
                  _context.next = 43;
                  break;
                }

                _this.tokenManager.loadToken();

                _context.next = 42;
                return _this.doAxiosRequest(type, url, data, options);

              case 42:
                return _context.abrupt("return", _context.sent);

              case 43:
                return _context.abrupt("return", _this.handleResponse(_context.t1.response));

              case 46:
                throw _context.t1;

              case 47:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[4, 34]]);
      }));

      return function (_x, _x2, _x3) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(this, "dispatchEvent", function (event) {
      // client event handlers
      _this._handleClientEvent(event); // channel event handlers


      var cid = event.cid;
      var channel = _this.activeChannels[cid];

      if (channel) {
        channel._handleChannelEvent(event);
      }

      _this._callClientListeners(event);

      if (channel) {
        channel._callChannelListeners(event);
      }
    });

    _defineProperty(this, "handleEvent", function (messageEvent) {
      // dispatch the event to the channel listeners
      var jsonString = messageEvent.data;
      var event = JSON.parse(jsonString);
      event.received_at = new Date();

      _this.dispatchEvent(event);
    });

    _defineProperty(this, "_callClientListeners", function (event) {
      var client = _this; // gather and call the listeners

      var listeners = [];

      if (client.listeners.all) {
        listeners.push.apply(listeners, _toConsumableArray(client.listeners.all));
      }

      if (client.listeners[event.type]) {
        listeners.push.apply(listeners, _toConsumableArray(client.listeners[event.type]));
      } // call the event and send it to the listeners


      for (var _i = 0, _listeners = listeners; _i < _listeners.length; _i++) {
        var listener = _listeners[_i];
        listener(event);
      }
    });

    _defineProperty(this, "recoverState", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var cids, lastMessageIDs, _i2, _Object$values, c, lastMessage, lastMessageId;

      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _this.logger('info', "client:recoverState() - Start of recoverState with connectionID ".concat(_this.wsConnection.connectionID), {
                tags: ['connection']
              });

              _this.connectionID = _this.wsConnection.connectionID;
              cids = Object.keys(_this.activeChannels);
              lastMessageIDs = {};

              for (_i2 = 0, _Object$values = Object.values(_this.activeChannels); _i2 < _Object$values.length; _i2++) {
                c = _Object$values[_i2];
                lastMessage = c.lastMessage();
                lastMessageId = void 0;

                if (lastMessage) {
                  lastMessageId = lastMessage.id;
                }

                lastMessageIDs[c.cid] = lastMessageId;
              }

              if (!cids.length) {
                _context2.next = 11;
                break;
              }

              _this.logger('info', "client:recoverState() - Start the querying of ".concat(cids.length, " channels"), {
                tags: ['connection', 'client']
              });

              _context2.next = 9;
              return _this.queryChannels({
                cid: {
                  $in: cids
                }
              }, {
                last_message_at: -1
              }, {
                limit: 30,
                recovery: true,
                last_message_ids: lastMessageIDs
              });

            case 9:
              _this.logger('info', 'client:recoverState() - Querying channels finished', {
                tags: ['connection', 'client']
              });

              _this.dispatchEvent({
                type: 'connection.recovered'
              });

            case 11:
              _this.wsPromise = Promise.resolve();
              _this.setUserPromise = Promise.resolve();

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));

    _defineProperty(this, "_isUsingServerAuth", function () {
      return !!_this.secret;
    });

    // set the key
    this.key = key;
    this.secret = null;
    this.listeners = {};
    this.state = new ClientState(); // a list of channels to hide ws events from

    this.mutedChannels = []; // set the secret

    if (secretOrOptions && secretOrOptions.indexOf) {
      this.secret = secretOrOptions;
    } // set the options... and figure out defaults...


    _options = _options || secretOrOptions;

    if (!_options) {
      _options = {};
    }

    this.browser = typeof _options.browser !== 'undefined' ? _options.browser : typeof window !== 'undefined';
    this.node = !this.browser;
    var defaultOptions = {
      timeout: 3000,
      withCredentials: false // making sure cookies are not sent

    };

    if (this.node) {
      var nodeOptions = {
        httpAgent: new http.Agent({
          keepAlive: 3000
        }),
        httpsAgent: new https.Agent({
          keepAlive: 3000
        })
      };
      this.options = _objectSpread$2(_objectSpread$2(_objectSpread$2({}, nodeOptions), defaultOptions), _options);
    } else {
      this.options = _objectSpread$2(_objectSpread$2({}, defaultOptions), _options);
      delete this.options.httpAgent;
      delete this.options.httpsAgent;
    }

    this.axiosInstance = axios.create(this.options);
    this.setBaseURL('https://chat-us-east-1.stream-io-api.com');

    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {
      this.setBaseURL('http://localhost:3030');
    } // WS connection is initialized when setUser is called


    this.wsConnection = null;
    this.wsPromise = null;
    this.setUserPromise = null; // keeps a reference to all the channels that are in use

    this.activeChannels = {}; // mapping between channel groups and configs

    this.configs = {};
    this.anonymous = false; // If its a server-side client, then lets initialize the tokenManager, since token will be
    // generated from secret.

    this.tokenManager = new TokenManager(this.secret);
    /**
     * logger function should accept 3 parameters:
     * @param logLevel string
     * @param message   string
     * @param extraData object
     *
     * e.g.,
     * const client = new StreamChat('api_key', {}, {
     * 		logger = (logLevel, message, extraData) => {
     * 			console.log(message);
     * 		}
     * })
     *
     * extraData contains tags array attached to log message. Tags can have one/many of following values:
     * 1. api
     * 2. api_request
     * 3. api_response
     * 4. client
     * 5. channel
     * 6. connection
     * 7. event
     *
     * It may also contains some extra data, some examples have been mentioned below:
     * 1. {
     * 		tags: ['api', 'api_request', 'client'],
     * 		url: string,
     * 		payload: object,
     * 		config: object
     * }
     * 2. {
     * 		tags: ['api', 'api_response', 'client'],
     * 		url: string,
     * 		response: object
     * }
     * 3. {
     * 		tags: ['api', 'api_response', 'client'],
     * 		url: string,
     * 		error: object
     * }
     * 4. {
     * 		tags: ['event', 'client'],
     * 		event: object
     * }
     * 5. {
     * 		tags: ['channel'],
     * 		channel: object
     * }
     */

    this.logger = isFunction(_options.logger) ? _options.logger : function () {};
  }

  _createClass(StreamChat, [{
    key: "devToken",
    value: function devToken(userID) {
      return DevToken(userID);
    }
  }, {
    key: "getAuthType",
    value: function getAuthType() {
      return this.anonymous ? 'anonymous' : 'jwt';
    }
  }, {
    key: "setBaseURL",
    value: function setBaseURL(baseURL) {
      this.baseURL = baseURL;
      this.wsBaseURL = this.baseURL.replace('http', 'ws');
    }
  }, {
    key: "_setUser",
    value: function _setUser(user) {
      // this one is used by the frontend
      this.user = user; // this one is actually used for requests...

      this._user = _objectSpread$2({}, user);
    }
    /**
     * updateAppSettings - updates application settings
     *
     * @param {object} options App settings.
     * 		IE: {
      			"apn_config": {
    				"auth_type": "token",
    				"auth_key": fs.readFileSync(
    					'./apn-push-auth-key.p8',
    					'utf-8',
    				),
    				"key_id": "keyid",
    				"team_id": "teamid", //either ALL these 3
    				"notification_template": "notification handlebars template",
    				"bundle_id": "com.apple.your.app",
    				"development": true
    			},
    			"firebase_config": {
    				"server_key": "server key from fcm",
    				"notification_template": "notification handlebars template"
    				"data_template": "data handlebars template"
    			},
    			"webhook_url": "https://acme.com/my/awesome/webhook/"
    		}
     */

  }, {
    key: "updateAppSettings",
    value: function () {
      var _updateAppSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (options.apn_config && options.apn_config.p12_cert) {
                  options.apn_config.p12_cert = Buffer.from(options.apn_config.p12_cert).toString('base64');
                }

                _context3.next = 3;
                return this.patch(this.baseURL + '/app', options);

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function updateAppSettings(_x4) {
        return _updateAppSettings.apply(this, arguments);
      }

      return updateAppSettings;
    }()
    /**
     * getAppSettings - retrieves application settings
     */

  }, {
    key: "getAppSettings",
    value: function () {
      var _getAppSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.get(this.baseURL + '/app');

              case 2:
                return _context4.abrupt("return", _context4.sent);

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getAppSettings() {
        return _getAppSettings.apply(this, arguments);
      }

      return getAppSettings;
    }()
    /**
     * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates
     *
     * @param {string} userID User ID. If user has no devices, it will error
     * @param {object} [data] Overrides for push templates/message used
     * 		IE: {
    			  messageID: 'id-of-message',//will error if message does not exist
    			  apnTemplate: '{}', //if app doesn't have apn configured it will error
    			  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error
    			  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error
    		}
     */

  }, {
    key: "testPushSettings",
    value: function () {
      var _testPushSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(userID) {
        var data,
            _args5 = arguments;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                data = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                _context5.next = 3;
                return this.post(this.baseURL + '/check_push', _objectSpread$2(_objectSpread$2(_objectSpread$2(_objectSpread$2({
                  user_id: userID
                }, data.messageID ? {
                  message_id: data.messageID
                } : {}), data.apnTemplate ? {
                  apn_template: data.apnTemplate
                } : {}), data.firebaseTemplate ? {
                  firebase_template: data.firebaseTemplate
                } : {}), data.firebaseDataTemplate ? {
                  firebase_data_template: data.firebaseDataTemplate
                } : {}));

              case 3:
                return _context5.abrupt("return", _context5.sent);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function testPushSettings(_x5) {
        return _testPushSettings.apply(this, arguments);
      }

      return testPushSettings;
    }()
    /**
     * disconnect - closes the WS connection
     */

  }, {
    key: "disconnect",
    value: function disconnect(timeout) {
      this.logger('info', 'client:disconnect() - Disconnecting the client', {
        tags: ['connection', 'client']
      }); // remove the user specific fields

      delete this.user;
      delete this._user;
      delete this.userID;

      if (this.cleaningIntervalRef != null) {
        clearInterval(this.cleaningIntervalRef);
        this.cleaningIntervalRef = null;
      }

      this.anonymous = false;
      this.connectionEstablishedCount = 0;

      for (var _i3 = 0, _Object$values2 = Object.values(this.activeChannels); _i3 < _Object$values2.length; _i3++) {
        var channel = _Object$values2[_i3];

        channel._disconnect();
      } // ensure we no longer return inactive channels


      this.activeChannels = {}; // reset client state

      this.state = new ClientState(); // reset token manager

      this.tokenManager.reset(); // close the WS connection

      if (this.wsConnection) {
        return this.wsConnection.disconnect(timeout);
      }

      return Promise.resolve();
    }
  }, {
    key: "setGuestUser",

    /**
     * setGuestUser - Setup a temporary guest user
     *
     * @param {object} user Data about this user. IE {name: "john"}
     *
     * @return {promise} Returns a promise that resolves when the connection is setup
     */
    value: function () {
      var _setGuestUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(user) {
        var response, _response$user, created_at, updated_at, last_active, online, guestUser;

        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.anonymous = true;
                _context6.prev = 1;
                _context6.next = 4;
                return this.post(this.baseURL + '/guest', {
                  user: user
                });

              case 4:
                response = _context6.sent;
                _context6.next = 11;
                break;

              case 7:
                _context6.prev = 7;
                _context6.t0 = _context6["catch"](1);
                this.anonymous = false;
                throw _context6.t0;

              case 11:
                this.anonymous = false;
                _response$user = response.user, created_at = _response$user.created_at, updated_at = _response$user.updated_at, last_active = _response$user.last_active, online = _response$user.online, guestUser = _objectWithoutProperties(_response$user, ["created_at", "updated_at", "last_active", "online"]);
                _context6.next = 15;
                return this.setUser(guestUser, response.access_token);

              case 15:
                return _context6.abrupt("return", _context6.sent);

              case 16:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[1, 7]]);
      }));

      function setGuestUser(_x6) {
        return _setGuestUser.apply(this, arguments);
      }

      return setGuestUser;
    }()
    /**
     * createToken - Creates a token to authenticate this user. This function is used server side.
     * The resulting token should be passed to the client side when the users registers or logs in
     *
     * @param {string}   userID         The User ID
     * @param {string}   exp            The expiration time for the token expressed in the number of seconds since the epoch
     *
     * @return {string} Returns a token
     */

  }, {
    key: "createToken",
    value: function createToken(userID, exp) {
      if (this.secret == null) {
        throw Error("tokens can only be created server-side using the API Secret");
      }

      var extra = {};

      if (exp) {
        extra.exp = exp;
      }

      return JWTUserToken(this.secret, userID, extra, {});
    }
    /**
     * on - Listen to events on all channels and users your watching
     *
     * client.on('message.new', event => {console.log("my new message", event, channel.state.messages)})
     * or
     * client.on(event => {console.log(event.type)})
     *
     * @param {string} callbackOrString  The event type to listen for (optional)
     * @param {function} callbackOrNothing The callback to call
     *
     * @return {type} Description
     */

  }, {
    key: "on",
    value: function on(callbackOrString, callbackOrNothing) {
      var _this2 = this;

      var key = callbackOrNothing ? callbackOrString : 'all';
      var valid = isValidEventType(key);

      if (!valid) {
        throw Error("Invalid event type ".concat(key));
      }

      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this.logger('info', "Attaching listener for ".concat(key, " event"), {
        tags: ['event', 'client']
      });
      this.listeners[key].push(callback);
      return {
        unsubscribe: function unsubscribe() {
          _this2.listeners[key] = _this2.listeners[key].filter(function (el) {
            return el !== callback;
          });
        }
      };
    }
    /**
     * off - Remove the event handler
     *
     */

  }, {
    key: "off",
    value: function off(callbackOrString, callbackOrNothing) {
      var key = callbackOrNothing ? callbackOrString : 'all';
      var valid = isValidEventType(key);

      if (!valid) {
        throw Error("Invalid event type ".concat(key));
      }

      var callback = callbackOrNothing ? callbackOrNothing : callbackOrString;

      if (!(key in this.listeners)) {
        this.listeners[key] = [];
      }

      this.logger('info', "Removing listener for ".concat(key, " event"), {
        tags: ['event', 'client']
      });
      this.listeners[key] = this.listeners[key].filter(function (value) {
        return value !== callback;
      });
    }
  }, {
    key: "_logApiRequest",
    value: function _logApiRequest(type, url, data, config) {
      this.logger('info', "client: ".concat(type, " - Request - ").concat(url), {
        tags: ['api', 'api_request', 'client'],
        url: url,
        payload: data,
        config: config
      });
    }
  }, {
    key: "_logApiResponse",
    value: function _logApiResponse(type, url, response) {
      this.logger('info', "client:".concat(type, " - Response - url: ").concat(url, " > status ").concat(response.status), {
        tags: ['api', 'api_response', 'client'],
        url: url,
        response: response
      });
    }
  }, {
    key: "_logApiError",
    value: function _logApiError(type, url, error) {
      this.logger('error', "client:".concat(type, " - Error - url: ").concat(url), {
        tags: ['api', 'api_response', 'client'],
        url: url,
        error: error
      });
    }
  }, {
    key: "get",
    value: function get(url, params) {
      return this.doAxiosRequest('get', url, null, {
        params: params
      });
    }
  }, {
    key: "put",
    value: function put(url, data) {
      return this.doAxiosRequest('put', url, data);
    }
  }, {
    key: "post",
    value: function post(url, data) {
      return this.doAxiosRequest('post', url, data);
    }
  }, {
    key: "patch",
    value: function patch(url, data) {
      return this.doAxiosRequest('patch', url, data);
    }
  }, {
    key: "delete",
    value: function _delete(url, params) {
      return this.doAxiosRequest('delete', url, null, {
        params: params
      });
    }
  }, {
    key: "sendFile",
    value: function sendFile(url, uri, name$$1, contentType, user) {
      var data = new FormData();
      var fileField;

      if (isReadableStream(uri) || uri instanceof File) {
        fileField = uri;
      } else {
        fileField = {
          uri: uri,
          name: name$$1 || uri.split('/').reverse()[0]
        };

        if (contentType != null) {
          fileField.type = contentType;
        }
      }

      if (user != null) {
        data.append('user', JSON.stringify(user));
      }

      data.append('file', fileField);
      return this.doAxiosRequest('post', url, data, {
        headers: data.getHeaders ? data.getHeaders() : {},
        // node vs browser
        config: {
          timeout: 0,
          maxContentLength: Infinity,
          maxBodyLength: Infinity
        }
      });
    }
  }, {
    key: "errorFromResponse",
    value: function errorFromResponse(response) {
      var err;
      err = new Error("StreamChat error HTTP code: ".concat(response.status));

      if (response.data && response.data.code) {
        err = new Error("StreamChat error code ".concat(response.data.code, ": ").concat(response.data.message));
        err.code = response.data.code;
      }

      err.response = response;
      err.status = response.status;
      return err;
    }
  }, {
    key: "handleResponse",
    value: function handleResponse(response) {
      var data = response.data;

      if ((response.status + '')[0] !== '2') {
        throw this.errorFromResponse(response);
      }

      return data;
    }
  }, {
    key: "_handleClientEvent",
    value: function _handleClientEvent(event) {
      var client = this;
      this.logger('info', "client:_handleClientEvent - Received event of type { ".concat(event.type, " }"), {
        tags: ['event', 'client'],
        event: event
      }); // update the client.state with any changes to users

      if (event.type === 'user.presence.changed' || event.type === 'user.updated') {
        if (event.user.id === this.userID) {
          this.user = _objectSpread$2(_objectSpread$2({}, this.user), event.user); // Updating only available properties in _user object.

          Object.keys(event.user).forEach(function (key) {
            if (key in client._user) {
              client._user[key] = event.user[key];
            }
          });
        }

        client.state.updateUser(event.user);

        client._updateUserReferences(event.user);
      }

      if (event.type === 'health.check' && event.me) {
        client.user = event.me;
        client.state.updateUser(event.me);
        client.mutedChannels = event.me.channel_mutes;
      }

      if (event.type === 'notification.message_new') {
        this.configs[event.channel.type] = event.channel.config;
      }

      if (event.type === 'notification.channel_mutes_updated') {
        this.mutedChannels = event.me.channel_mutes;
      }
    }
  }, {
    key: "_muteStatus",
    value: function _muteStatus(cid) {
      var muteStatus;
      this.mutedChannels.forEach(function (mute) {
        if (mute.channel.cid === cid) {
          var muted = true;

          if (mute.expires) {
            muted = new Date(mute.expires).getTime() > new Date().getTime();
          }

          muteStatus = {
            muted: muted,
            createdAt: new Date(mute.created_at),
            expiresAt: mute.expires ? new Date(mute.expires) : null
          };
        }
      });

      if (muteStatus) {
        return muteStatus;
      }

      return {
        muted: false,
        createdAt: null,
        expiresAt: null
      };
    }
  }, {
    key: "_updateUserReferences",

    /*
    _updateUserReferences updates the members and watchers of the currently active channels
    that contain this user
    */
    value: function _updateUserReferences(user) {
      var refMap = this.state.userChannelReferences[user.id] || {};
      var refs = Object.keys(refMap);

      for (var _i4 = 0, _refs = refs; _i4 < _refs.length; _i4++) {
        var channelID = _refs[_i4];
        var c = this.activeChannels[channelID]; // search the members and watchers and update as needed...

        if (c && c.state) {
          if (c.state.members[user.id]) {
            c.state.members = c.state.members.setIn([user.id, 'user'], user);
          }

          if (c.state.watchers[user.id]) {
            c.state.watchers = c.state.watchers.setIn([user.id, 'user'], user);
          }
        }
      }
    }
  }, {
    key: "connect",
    value: function () {
      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var client, handshake;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.connecting = true;
                client = this;
                this.failures = 0;

                if (!(client.userID == null)) {
                  _context7.next = 5;
                  break;
                }

                throw Error('Call setUser or setAnonymousUser before starting the connection');

              case 5:
                // The StableWSConnection handles all the reconnection logic.
                this.wsConnection = new StableWSConnection({
                  wsBaseURL: client.wsBaseURL,
                  tokenManager: client.tokenManager,
                  user: this._user,
                  authType: this.getAuthType(),
                  userAgent: this._userAgent(),
                  apiKey: this.key,
                  recoverCallback: this.recoverState,
                  messageCallback: this.handleEvent,
                  eventCallback: this.dispatchEvent,
                  logger: this.logger
                });
                _context7.next = 8;
                return this.wsConnection.connect();

              case 8:
                handshake = _context7.sent;
                this.connectionID = this.wsConnection.connectionID;
                return _context7.abrupt("return", handshake);

              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function connect() {
        return _connect.apply(this, arguments);
      }

      return connect;
    }()
    /**
     * queryUsers - Query users and watch user presence
     *
     * @param {object} filterConditions MongoDB style filter conditions
     * @param {object} sort             Sort options, for instance {last_active: -1}
     * @param {object} options          Option object, {presence: true}
     *
     * @return {object} User Query Response
     */

  }, {
    key: "queryUsers",
    value: function () {
      var _queryUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(filterConditions, sort, options) {
        var sortFields, _i5, _Object$entries, _Object$entries$_i, k, v, defaultOptions, data;

        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!sort) {
                  sort = {};
                }

                if (!options) {
                  options = {};
                }

                sortFields = [];

                for (_i5 = 0, _Object$entries = Object.entries(sort); _i5 < _Object$entries.length; _i5++) {
                  _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2), k = _Object$entries$_i[0], v = _Object$entries$_i[1];
                  sortFields.push({
                    field: k,
                    direction: v
                  });
                }

                defaultOptions = {
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context8.next = 7;
                return this.setUserPromise;

              case 7:
                if (!this._hasConnectionID()) {
                  defaultOptions.presence = false;
                } // Return a list of users


                _context8.next = 10;
                return this.get(this.baseURL + '/users', {
                  payload: _objectSpread$2(_objectSpread$2({
                    filter_conditions: filterConditions,
                    sort: sortFields
                  }, defaultOptions), options)
                });

              case 10:
                data = _context8.sent;
                this.state.updateUsers(data.users);
                return _context8.abrupt("return", data);

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function queryUsers(_x7, _x8, _x9) {
        return _queryUsers.apply(this, arguments);
      }

      return queryUsers;
    }()
  }, {
    key: "queryChannels",
    value: function () {
      var _queryChannels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(filterConditions) {
        var sort,
            options,
            sortFields,
            _i6,
            _Object$entries2,
            _Object$entries2$_i,
            k,
            v,
            defaultOptions,
            payload,
            data,
            channels,
            _iterator,
            _step,
            channelState,
            _iterator2,
            _step2,
            _channelState,
            c,
            _args9 = arguments;

        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                sort = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};
                options = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};
                sortFields = [];

                for (_i6 = 0, _Object$entries2 = Object.entries(sort); _i6 < _Object$entries2.length; _i6++) {
                  _Object$entries2$_i = _slicedToArray(_Object$entries2[_i6], 2), k = _Object$entries2$_i[0], v = _Object$entries2$_i[1];
                  sortFields.push({
                    field: k,
                    direction: v
                  });
                }

                defaultOptions = {
                  state: true,
                  watch: true,
                  presence: false
                }; // Make sure we wait for the connect promise if there is a pending one

                _context9.next = 7;
                return this.setUserPromise;

              case 7:
                if (!this._hasConnectionID()) {
                  defaultOptions.watch = false;
                } // Return a list of channels


                payload = _objectSpread$2(_objectSpread$2({
                  filter_conditions: filterConditions,
                  sort: sortFields,
                  user_details: this._user
                }, defaultOptions), options);
                _context9.next = 11;
                return this.get(this.baseURL + '/channels', {
                  payload: payload
                });

              case 11:
                data = _context9.sent;
                channels = []; // update our cache of the configs

                _iterator = _createForOfIteratorHelper$3(data.channels);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    channelState = _step.value;

                    this._addChannelConfig(channelState);
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                _iterator2 = _createForOfIteratorHelper$3(data.channels);

                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    _channelState = _step2.value;
                    c = this.channel(_channelState.channel.type, _channelState.channel.id);
                    c.data = _channelState.channel;
                    c.initialized = true;

                    c._initializeState(_channelState);

                    channels.push(c);
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

                return _context9.abrupt("return", channels);

              case 18:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function queryChannels(_x10) {
        return _queryChannels.apply(this, arguments);
      }

      return queryChannels;
    }()
    /**
     * search - Query messages
     *
     * @param {object} channels MongoDB style filter conditions
     * @param {object|string}  message search query or object MongoDB style filters
     * @param {object} options       Option object, {user_id: 'tommaso'}
     *
     * @return {object} search messages response
     */

  }, {
    key: "search",
    value: function () {
      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(filterConditions, query) {
        var options,
            payload,
            _args10 = arguments;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                options = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : {};
                // Return a list of channels
                payload = _objectSpread$2({
                  filter_conditions: filterConditions
                }, options);

                if (!(typeof query === 'string')) {
                  _context10.next = 6;
                  break;
                }

                payload.query = query;
                _context10.next = 11;
                break;

              case 6:
                if (!(_typeof(query) === 'object')) {
                  _context10.next = 10;
                  break;
                }

                payload.message_filter_conditions = query;
                _context10.next = 11;
                break;

              case 10:
                throw Error("Invalid type ".concat(_typeof(query), " for query parameter"));

              case 11:
                _context10.next = 13;
                return this.setUserPromise;

              case 13:
                _context10.next = 15;
                return this.get(this.baseURL + '/search', {
                  payload: payload
                });

              case 15:
                return _context10.abrupt("return", _context10.sent);

              case 16:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function search(_x11, _x12) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
    /**
     * addDevice - Adds a push device for a user.
     *
     * @param {string} id the device id
     * @param {string} push_provider the push provider (apn or firebase)
     * @param {string} [userID] the user id (defaults to current user)
     *
     */

  }, {
    key: "addDevice",
    value: function () {
      var _addDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(id, push_provider) {
        var userID,
            _args11 = arguments;
        return _regeneratorRuntime.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                userID = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : null;
                _context11.next = 3;
                return this.post(this.baseURL + '/devices', _objectSpread$2({
                  id: id,
                  push_provider: push_provider
                }, userID != null ? {
                  user_id: userID
                } : {}));

              case 3:
                return _context11.abrupt("return", _context11.sent);

              case 4:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function addDevice(_x13, _x14) {
        return _addDevice.apply(this, arguments);
      }

      return addDevice;
    }()
    /**
     * getDevices - Returns the devices associated with a current user
     *
     * @param {string} [userID] User ID. Only works on serversidex
     *
     * @return {devices} Array of devices
     */

  }, {
    key: "getDevices",
    value: function () {
      var _getDevices = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(userID) {
        return _regeneratorRuntime.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this.get(this.baseURL + '/devices', userID ? {
                  user_id: userID
                } : {});

              case 2:
                return _context12.abrupt("return", _context12.sent);

              case 3:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function getDevices(_x15) {
        return _getDevices.apply(this, arguments);
      }

      return getDevices;
    }()
    /**
     * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices
     *
     * @param {string} id The device id
     * @param {string} [userID] The user id. Only specify this for serverside requests
     *
     */

  }, {
    key: "removeDevice",
    value: function () {
      var _removeDevice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(id) {
        var userID,
            _args13 = arguments;
        return _regeneratorRuntime.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                userID = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : null;
                _context13.next = 3;
                return this.delete(this.baseURL + '/devices', _objectSpread$2({
                  id: id
                }, userID ? {
                  user_id: userID
                } : {}));

              case 3:
                return _context13.abrupt("return", _context13.sent);

              case 4:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function removeDevice(_x16) {
        return _removeDevice.apply(this, arguments);
      }

      return removeDevice;
    }()
  }, {
    key: "_addChannelConfig",
    value: function _addChannelConfig(channelState) {
      this.configs[channelState.channel.type] = channelState.channel.config;
    }
    /**
     * channel - Returns a new channel with the given type, id and custom data
     *
     * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter
     * and only provide ID and the list of members
     *
     * ie. client.channel("messaging", {members: ["tommaso", "thierry"]})
     *
     * @param {string} channelType The channel type
     * @param {string} channelID   The channel ID, you can leave this out if you want to create a conversation channel
     * @param {object} [custom]    Custom data to attach to the channel
     *
     * @return {channel} The channel object, initialize it using channel.watch()
     */

  }, {
    key: "channel",
    value: function channel(channelType, channelID) {
      var custom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (!this.userID && !this._isUsingServerAuth()) {
        throw Error('Call setUser or setAnonymousUser before creating a channel');
      }

      if (~channelType.indexOf(':')) {
        throw Error("Invalid channel group ".concat(channelType, ", can't contain the : character"));
      } // support channel("messaging", null, {options})
      // support channel("messaging", undefined, {options})
      // support channel("messaging", "", {options})


      if (channelID == null || channelID === '') {
        return new Channel(this, channelType, undefined, custom || {});
      } // support channel("messaging", {options})


      if (_typeof(channelID) === 'object' && arguments.length === 2) {
        return new Channel(this, channelType, undefined, channelID);
      }

      if (typeof channelID === 'string' && ~channelID.indexOf(':')) {
        throw Error("Invalid channel id ".concat(channelID, ", can't contain the : character"));
      } // only allow 1 channel object per cid


      var cid = "".concat(channelType, ":").concat(channelID);

      if (cid in this.activeChannels) {
        var _channel = this.activeChannels[cid];

        if (Object.keys(custom).length > 0) {
          _channel.data = custom;
          _channel._data = custom;
        }

        return _channel;
      }

      var channel = new Channel(this, channelType, channelID, custom);
      this.activeChannels[channel.cid] = channel;
      return channel;
    }
    /**
     * @deprecated Please use upsertUser() function instead.
     *
     * updateUser - Update or Create the given user object
     *
     * @param {object} A user object, the only required field is the user id. IE {id: "myuser"} is valid
     *
     * @return {object}
     */

  }, {
    key: "updateUser",
    value: function () {
      var _updateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(userObject) {
        return _regeneratorRuntime.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                _context14.next = 2;
                return this.upsertUsers([userObject]);

              case 2:
                return _context14.abrupt("return", _context14.sent);

              case 3:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function updateUser(_x17) {
        return _updateUser.apply(this, arguments);
      }

      return updateUser;
    }()
    /**
     * partialUpdateUser - Update the given user object
     *
     * @param {object} Object which should contain id and any of "set" or "unset" params;
     * example: {id: "user1", set:{field: value}, unset:["field2"]}
     *
     * @return {object} list of updated users
     */

  }, {
    key: "partialUpdateUser",
    value: function () {
      var _partialUpdateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(userObject) {
        return _regeneratorRuntime.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this.partialUpdateUsers([userObject]);

              case 2:
                return _context15.abrupt("return", _context15.sent);

              case 3:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function partialUpdateUser(_x18) {
        return _partialUpdateUser.apply(this, arguments);
      }

      return partialUpdateUser;
    }()
    /**
     * upsertUsers - Batch upsert the list of users
     *
     * @param {array} A list of users
     *
     * @return {object}
     */

  }, {
    key: "upsertUsers",
    value: function () {
      var _upsertUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(users) {
        var userMap, _iterator3, _step3, userObject;

        return _regeneratorRuntime.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                userMap = {};
                _iterator3 = _createForOfIteratorHelper$3(users);
                _context16.prev = 2;

                _iterator3.s();

              case 4:
                if ((_step3 = _iterator3.n()).done) {
                  _context16.next = 11;
                  break;
                }

                userObject = _step3.value;

                if (userObject.id) {
                  _context16.next = 8;
                  break;
                }

                throw Error('User ID is required when updating a user');

              case 8:
                userMap[userObject.id] = userObject;

              case 9:
                _context16.next = 4;
                break;

              case 11:
                _context16.next = 16;
                break;

              case 13:
                _context16.prev = 13;
                _context16.t0 = _context16["catch"](2);

                _iterator3.e(_context16.t0);

              case 16:
                _context16.prev = 16;

                _iterator3.f();

                return _context16.finish(16);

              case 19:
                _context16.next = 21;
                return this.post(this.baseURL + '/users', {
                  users: userMap
                });

              case 21:
                return _context16.abrupt("return", _context16.sent);

              case 22:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[2, 13, 16, 19]]);
      }));

      function upsertUsers(_x19) {
        return _upsertUsers.apply(this, arguments);
      }

      return upsertUsers;
    }()
    /**
     * upsertUser - Update or Create the given user object
     *
     * @param {object} A user object, the only required field is the user id. IE {id: "myuser"} is valid
     *
     * @return {object}
     */

  }, {
    key: "upsertUser",
    value: function upsertUser(userObject) {
      return this.upsertUsers([userObject]);
    }
    /**
     * @deprecated Please use upsertUsers() function instead.
     *
     * updateUsers - Batch update the list of users
     *
     * @param {array} A list of users
     *
     * @return {object}
     */

  }, {
    key: "updateUsers",
    value: function updateUsers(users) {
      return this.upsertUsers(users);
    }
    /**
     * updateUsers - Batch partial update of users
     *
     * @param {array} A list of partial update requests
     *
     * @return {object}
     */

  }, {
    key: "partialUpdateUsers",
    value: function () {
      var _partialUpdateUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(users) {
        var _iterator4, _step4, userObject;

        return _regeneratorRuntime.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _iterator4 = _createForOfIteratorHelper$3(users);
                _context17.prev = 1;

                _iterator4.s();

              case 3:
                if ((_step4 = _iterator4.n()).done) {
                  _context17.next = 9;
                  break;
                }

                userObject = _step4.value;

                if (userObject.id) {
                  _context17.next = 7;
                  break;
                }

                throw Error('User ID is required when updating a user');

              case 7:
                _context17.next = 3;
                break;

              case 9:
                _context17.next = 14;
                break;

              case 11:
                _context17.prev = 11;
                _context17.t0 = _context17["catch"](1);

                _iterator4.e(_context17.t0);

              case 14:
                _context17.prev = 14;

                _iterator4.f();

                return _context17.finish(14);

              case 17:
                _context17.next = 19;
                return this.patch(this.baseURL + '/users', {
                  users: users
                });

              case 19:
                return _context17.abrupt("return", _context17.sent);

              case 20:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this, [[1, 11, 14, 17]]);
      }));

      function partialUpdateUsers(_x20) {
        return _partialUpdateUsers.apply(this, arguments);
      }

      return partialUpdateUsers;
    }()
  }, {
    key: "deleteUser",
    value: function () {
      var _deleteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(userID, params) {
        return _regeneratorRuntime.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _context18.next = 2;
                return this.delete(this.baseURL + "/users/".concat(userID), params);

              case 2:
                return _context18.abrupt("return", _context18.sent);

              case 3:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function deleteUser(_x21, _x22) {
        return _deleteUser.apply(this, arguments);
      }

      return deleteUser;
    }()
  }, {
    key: "reactivateUser",
    value: function () {
      var _reactivateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(userID, options) {
        return _regeneratorRuntime.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                _context19.next = 2;
                return this.post(this.baseURL + "/users/".concat(userID, "/reactivate"), _objectSpread$2({}, options));

              case 2:
                return _context19.abrupt("return", _context19.sent);

              case 3:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function reactivateUser(_x23, _x24) {
        return _reactivateUser.apply(this, arguments);
      }

      return reactivateUser;
    }()
  }, {
    key: "deactivateUser",
    value: function () {
      var _deactivateUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(userID, options) {
        return _regeneratorRuntime.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                _context20.next = 2;
                return this.post(this.baseURL + "/users/".concat(userID, "/deactivate"), _objectSpread$2({}, options));

              case 2:
                return _context20.abrupt("return", _context20.sent);

              case 3:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function deactivateUser(_x25, _x26) {
        return _deactivateUser.apply(this, arguments);
      }

      return deactivateUser;
    }()
  }, {
    key: "exportUser",
    value: function () {
      var _exportUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(userID, options) {
        return _regeneratorRuntime.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return this.get(this.baseURL + "/users/".concat(userID, "/export"), _objectSpread$2({}, options));

              case 2:
                return _context21.abrupt("return", _context21.sent);

              case 3:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function exportUser(_x27, _x28) {
        return _exportUser.apply(this, arguments);
      }

      return exportUser;
    }()
    /** banUser - bans a user from all channels
     *
     * @param targetUserID
     * @param options
     * @returns {Promise<*>}
     */

  }, {
    key: "banUser",
    value: function () {
      var _banUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return this.post(this.baseURL + '/moderation/ban', _objectSpread$2({
                  target_user_id: targetUserID
                }, options));

              case 2:
                return _context22.abrupt("return", _context22.sent);

              case 3:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));

      function banUser(_x29, _x30) {
        return _banUser.apply(this, arguments);
      }

      return banUser;
    }()
    /** unbanUser - revoke global ban for a user
     *
     * @param targetUserID
     * @returns {Promise<*>}
     */

  }, {
    key: "unbanUser",
    value: function () {
      var _unbanUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(targetUserID, options) {
        return _regeneratorRuntime.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                _context23.next = 2;
                return this.delete(this.baseURL + '/moderation/ban', _objectSpread$2({
                  target_user_id: targetUserID
                }, options));

              case 2:
                return _context23.abrupt("return", _context23.sent);

              case 3:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));

      function unbanUser(_x31, _x32) {
        return _unbanUser.apply(this, arguments);
      }

      return unbanUser;
    }()
    /** muteUser - mutes a user
     *
     * @param targetUserID
     * @param [userID] Only used with serverside auth
     * @param options
     * @returns {Promise<*>}
     */

  }, {
    key: "muteUser",
    value: function () {
      var _muteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(targetUserID) {
        var userID,
            options,
            _args24 = arguments;
        return _regeneratorRuntime.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                userID = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : null;
                options = _args24.length > 2 && _args24[2] !== undefined ? _args24[2] : {};
                _context24.next = 4;
                return this.post(this.baseURL + '/moderation/mute', _objectSpread$2(_objectSpread$2({
                  target_id: targetUserID
                }, userID ? {
                  user_id: userID
                } : {}), options));

              case 4:
                return _context24.abrupt("return", _context24.sent);

              case 5:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));

      function muteUser(_x33) {
        return _muteUser.apply(this, arguments);
      }

      return muteUser;
    }()
    /** unmuteUser - unmutes a user
     *
     * @param targetID
     * @param [currentUserID] Only used with serverside auth
     * @returns {Promise<*>}
     */

  }, {
    key: "unmuteUser",
    value: function () {
      var _unmuteUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(targetID) {
        var currentUserID,
            _args25 = arguments;
        return _regeneratorRuntime.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                currentUserID = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : null;
                _context25.next = 3;
                return this.post(this.baseURL + '/moderation/unmute', _objectSpread$2({
                  target_id: targetID
                }, currentUserID ? {
                  user_id: currentUserID
                } : {}));

              case 3:
                return _context25.abrupt("return", _context25.sent);

              case 4:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));

      function unmuteUser(_x34) {
        return _unmuteUser.apply(this, arguments);
      }

      return unmuteUser;
    }()
  }, {
    key: "flagMessage",
    value: function () {
      var _flagMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(messageID) {
        var options,
            _args26 = arguments;
        return _regeneratorRuntime.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                options = _args26.length > 1 && _args26[1] !== undefined ? _args26[1] : {};
                _context26.next = 3;
                return this.post(this.baseURL + '/moderation/flag', _objectSpread$2({
                  target_message_id: messageID
                }, options));

              case 3:
                return _context26.abrupt("return", _context26.sent);

              case 4:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));

      function flagMessage(_x35) {
        return _flagMessage.apply(this, arguments);
      }

      return flagMessage;
    }()
  }, {
    key: "flagUser",
    value: function () {
      var _flagUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(userID) {
        var options,
            _args27 = arguments;
        return _regeneratorRuntime.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                options = _args27.length > 1 && _args27[1] !== undefined ? _args27[1] : {};
                _context27.next = 3;
                return this.post(this.baseURL + '/moderation/flag', _objectSpread$2({
                  target_user_id: userID
                }, options));

              case 3:
                return _context27.abrupt("return", _context27.sent);

              case 4:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));

      function flagUser(_x36) {
        return _flagUser.apply(this, arguments);
      }

      return flagUser;
    }()
  }, {
    key: "unflagMessage",
    value: function () {
      var _unflagMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(messageID) {
        var options,
            _args28 = arguments;
        return _regeneratorRuntime.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                options = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};
                _context28.next = 3;
                return this.post(this.baseURL + '/moderation/unflag', _objectSpread$2({
                  target_message_id: messageID
                }, options));

              case 3:
                return _context28.abrupt("return", _context28.sent);

              case 4:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));

      function unflagMessage(_x37) {
        return _unflagMessage.apply(this, arguments);
      }

      return unflagMessage;
    }()
  }, {
    key: "unflagUser",
    value: function () {
      var _unflagUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(userID) {
        var options,
            _args29 = arguments;
        return _regeneratorRuntime.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                options = _args29.length > 1 && _args29[1] !== undefined ? _args29[1] : {};
                _context29.next = 3;
                return this.post(this.baseURL + '/moderation/unflag', _objectSpread$2({
                  target_user_id: userID
                }, options));

              case 3:
                return _context29.abrupt("return", _context29.sent);

              case 4:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));

      function unflagUser(_x38) {
        return _unflagUser.apply(this, arguments);
      }

      return unflagUser;
    }()
    /**
     * markAllRead - marks all channels for this user as read
     *
     * @return {Promise} Description
     */

  }, {
    key: "markAllRead",
    value: function () {
      var _markAllRead = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {
        var data,
            response,
            _args30 = arguments;
        return _regeneratorRuntime.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                data = _args30.length > 0 && _args30[0] !== undefined ? _args30[0] : {};
                _context30.next = 3;
                return this.post(this.baseURL + '/channels/read', _objectSpread$2({}, data));

              case 3:
                response = _context30.sent;

              case 4:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));

      function markAllRead() {
        return _markAllRead.apply(this, arguments);
      }

      return markAllRead;
    }()
  }, {
    key: "createChannelType",
    value: function createChannelType(data) {
      var channelData = _extends({}, {
        commands: ['all']
      }, data);

      return this.post(this.baseURL + '/channeltypes', channelData);
    }
  }, {
    key: "getChannelType",
    value: function getChannelType(channelType) {
      return this.get(this.baseURL + "/channeltypes/".concat(channelType));
    }
  }, {
    key: "updateChannelType",
    value: function updateChannelType(channelType, data) {
      return this.put(this.baseURL + "/channeltypes/".concat(channelType), data);
    }
  }, {
    key: "deleteChannelType",
    value: function deleteChannelType(channelType) {
      return this.delete(this.baseURL + "/channeltypes/".concat(channelType));
    }
  }, {
    key: "listChannelTypes",
    value: function listChannelTypes() {
      return this.get(this.baseURL + "/channeltypes");
    }
    /**
     * translateMessage - adds the translation to the message
     *
     * @param {string} messageId
     *
     * @return {object} Response that includes the message
     */

  }, {
    key: "translateMessage",
    value: function () {
      var _translateMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(messageId, language) {
        return _regeneratorRuntime.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                _context31.next = 2;
                return this.post(this.baseURL + "/messages/".concat(messageId, "/translate"), {
                  language: language
                });

              case 2:
                return _context31.abrupt("return", _context31.sent);

              case 3:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));

      function translateMessage(_x39, _x40) {
        return _translateMessage.apply(this, arguments);
      }

      return translateMessage;
    }()
    /**
     * updateMessage - Update the given message
     *
     * @param {object} message object, id needs to be specified
     *
     * @return {object} Response that includes the message
     */

  }, {
    key: "updateMessage",
    value: function () {
      var _updateMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(message, userId) {
        var clonedMessage, reservedMessageFields;
        return _regeneratorRuntime.wrap(function _callee32$(_context32) {
          while (1) {
            switch (_context32.prev = _context32.next) {
              case 0:
                if (message.id) {
                  _context32.next = 2;
                  break;
                }

                throw Error('Please specify the message id when calling updateMesssage');

              case 2:
                clonedMessage = _extends({}, message);
                delete clonedMessage.id;
                reservedMessageFields = ['latest_reactions', 'own_reactions', 'reply_count', 'reaction_counts', 'created_at', 'updated_at', 'html', 'command', 'type', 'user'];
                reservedMessageFields.forEach(function (item) {
                  if (clonedMessage[item] != null) {
                    delete clonedMessage[item];
                  }
                });

                if (userId != null) {
                  if (typeof userId == 'string' || userId instanceof String) {
                    clonedMessage.user_id = userId;
                  } else {
                    clonedMessage.user = {
                      id: userId.id
                    };
                  }
                }

                _context32.next = 9;
                return this.post(this.baseURL + "/messages/".concat(message.id), {
                  message: clonedMessage
                });

              case 9:
                return _context32.abrupt("return", _context32.sent);

              case 10:
              case "end":
                return _context32.stop();
            }
          }
        }, _callee32, this);
      }));

      function updateMessage(_x41, _x42) {
        return _updateMessage.apply(this, arguments);
      }

      return updateMessage;
    }()
  }, {
    key: "deleteMessage",
    value: function () {
      var _deleteMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(messageID, hardDelete) {
        var params;
        return _regeneratorRuntime.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                params = {};

                if (hardDelete) {
                  params = {
                    hard: true
                  };
                }

                _context33.next = 4;
                return this.delete(this.baseURL + "/messages/".concat(messageID), params);

              case 4:
                return _context33.abrupt("return", _context33.sent);

              case 5:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));

      function deleteMessage(_x43, _x44) {
        return _deleteMessage.apply(this, arguments);
      }

      return deleteMessage;
    }()
  }, {
    key: "getMessage",
    value: function () {
      var _getMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(messageID) {
        return _regeneratorRuntime.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                _context34.next = 2;
                return this.get(this.baseURL + "/messages/".concat(messageID));

              case 2:
                return _context34.abrupt("return", _context34.sent);

              case 3:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));

      function getMessage(_x45) {
        return _getMessage.apply(this, arguments);
      }

      return getMessage;
    }()
    /**
     * @deprecated Please use getUserAgent instead
     */

  }, {
    key: "_userAgent",
    value: function _userAgent() {
      return this.getUserAgent();
    }
  }, {
    key: "getUserAgent",
    value: function getUserAgent() {
      return this.userAgent || "stream-chat-javascript-client-".concat(this.node ? 'node' : 'browser', "-").concat(pkg.version);
    }
  }, {
    key: "setUserAgent",
    value: function setUserAgent(userAgent) {
      this.userAgent = userAgent;
    }
    /**
     * _isUsingServerAuth - Returns true if we're using server side auth
     */

  }, {
    key: "_enrichAxiosOptions",
    value: function _enrichAxiosOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        params: {},
        headers: {},
        config: {}
      };

      var token = this._getToken();

      return _objectSpread$2({
        params: _objectSpread$2(_objectSpread$2({
          user_id: this.userID
        }, options.params), {}, {
          api_key: this.key,
          connection_id: this.connectionID
        }),
        headers: _objectSpread$2({
          Authorization: token,
          'stream-auth-type': this.getAuthType(),
          'x-stream-client': this._userAgent()
        }, options.headers)
      }, options.config);
    }
  }, {
    key: "_getToken",
    value: function _getToken() {
      if (!this.tokenManager || this.anonymous) return null;
      return this.tokenManager.getToken();
    }
  }, {
    key: "_startCleaning",
    value: function _startCleaning() {
      var that = this;

      if (this.cleaningIntervalRef != null) {
        return;
      }

      this.cleaningIntervalRef = setInterval(function () {
        // call clean on the channel, used for calling the stop.typing event etc.
        for (var _i7 = 0, _Object$values3 = Object.values(that.activeChannels); _i7 < _Object$values3.length; _i7++) {
          var channel = _Object$values3[_i7];
          channel.clean();
        }
      }, 500);
    }
  }, {
    key: "verifyWebhook",
    value: function verifyWebhook(requestBody, xSignature) {
      return CheckSignature(requestBody, this.secret, xSignature);
    }
    /** getPermission - gets the definition for a permission
     *
     * @param {string} name
     * @returns {Promise<*>}
     */

  }, {
    key: "getPermission",
    value: function getPermission(name$$1) {
      return this.get("".concat(this.baseURL, "/custom_permission/").concat(name$$1));
    }
    /** createPermission - creates a custom permission
     *
     * @param {object} permissionData the permission data
     * @returns {Promise<*>}
     */

  }, {
    key: "createPermission",
    value: function createPermission(permissionData) {
      return this.post("".concat(this.baseURL, "/custom_permission"), _objectSpread$2({}, permissionData));
    }
    /** updatePermission - updates an existing custom permission
     *
     * @param {string} name
     * @param {object} permissionData the permission data
     * @returns {Promise<*>}
     */

  }, {
    key: "updatePermission",
    value: function updatePermission(name$$1, permissionData) {
      return this.post("".concat(this.baseURL, "/custom_permission/").concat(name$$1), _objectSpread$2({}, permissionData));
    }
    /** deletePermission - deletes a custom permission
     *
     * @param {name}
     * @returns {Promise<*>}
     */

  }, {
    key: "deletePermission",
    value: function deletePermission(name$$1) {
      return this.delete("".concat(this.baseURL, "/custom_permission/").concat(name$$1));
    }
    /** listPermissions - returns the list of custom permissions for this application
     *
     * @returns {Promise<*>}
     */

  }, {
    key: "listPermissions",
    value: function listPermissions() {
      return this.get("".concat(this.baseURL, "/custom_permission"));
    }
    /** createRole - creates a custom role
     *
     * @param {string} name the new role name
     * @returns {Promise<*>}
     */

  }, {
    key: "createRole",
    value: function createRole(name$$1) {
      return this.post("".concat(this.baseURL, "/custom_role"), {
        name: name$$1
      });
    }
    /** listRoles - returns the list of custom roles for this application
     *
     * @returns {Promise<*>}
     */

  }, {
    key: "listRoles",
    value: function listRoles() {
      return this.get("".concat(this.baseURL, "/custom_role"));
    }
    /** deleteRole - deletes a custom role
     *
     * @param {string} name the role name
     * @returns {Promise<*>}
     */

  }, {
    key: "deleteRole",
    value: function deleteRole(name$$1) {
      return this.delete("".concat(this.baseURL, "/custom_role/").concat(name$$1));
    }
    /** sync - returns all events that happened for a list of channels since last sync
     * @param {array} channel_cids list of channel CIDs
     * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. "2020-05-06T15:05:01.207Z"
     */

  }, {
    key: "sync",
    value: function sync(channel_cids, last_sync_at) {
      return this.post("".concat(this.baseURL, "/sync"), {
        channel_cids: channel_cids,
        last_sync_at: last_sync_at
      });
    }
  }]);

  return StreamChat;
}();

var Allow = 'Allow';
var Deny = 'Deny';
var AnyResource = ['*'];
var AnyRole = ['*'];
var MaxPriority = 999;
var MinPriority = 1; // deprecated permission object class, you should use the new permission system v2 and use permissions
// defined in BuiltinPermissions to configure your channel types

var Permission = function Permission(name, priority) {
  var resources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : AnyResource;
  var roles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : AnyRole;
  var owner = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Allow;

  _classCallCheck(this, Permission);

  this.name = name;
  this.action = action;
  this.owner = owner;
  this.priority = priority;
  this.resources = resources;
  this.roles = roles;
}; // deprecated

var AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow); // deprecated

var DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);
var BuiltinRoles = {
  Anonymous: 'anonymous',
  Guest: 'guest',
  User: 'user',
  Admin: 'admin',
  ChannelModerator: 'channel_moderator',
  ChannelMember: 'channel_member'
};
var BuiltinPermissions = {
  CreateMessage: 'Create Message',
  UpdateAnyMessage: 'Update Any Message',
  UpdateOwnMessage: 'Update Own Message',
  DeleteAnyMessage: 'Delete Any Message',
  DeleteOwnMessage: 'Delete Own Message',
  CreateChannel: 'Create Channel',
  ReadAnyChannel: 'Read Any Channel',
  ReadOwnChannel: 'Read Own Channel',
  UpdateMembersAnyChannel: 'Update Members Any Channel',
  UpdateMembersOwnChannel: 'Update Members Own Channel',
  UpdateAnyChannel: 'Update Any Channel',
  UpdateOwnChannel: 'Update Own Channel',
  DeleteAnyChannel: 'Delete Any Channel',
  DeleteOwnChannel: 'Delete Own Channel',
  RunMessageAction: 'Run Message Action',
  BanUser: 'Ban User',
  UploadAttachment: 'Upload Attachment',
  DeleteAnyAttachment: 'Delete Any Attachment',
  DeleteOwnAttachment: 'Delete Own Attachment',
  AddLinks: 'Add Links',
  CreateReaction: 'Create Reaction',
  DeleteAnyReaction: 'Delete Any Reaction',
  DeleteOwnReaction: 'Delete Own Reaction'
};

exports.StreamChat = StreamChat;
exports.logChatPromiseExecution = logChatPromiseExecution;
exports.ClientState = ClientState;
exports.Channel = Channel;
exports.ChannelState = ChannelState;
exports.StableWSConnection = StableWSConnection;
exports.Allow = Allow;
exports.Deny = Deny;
exports.AnyResource = AnyResource;
exports.AnyRole = AnyRole;
exports.MaxPriority = MaxPriority;
exports.MinPriority = MinPriority;
exports.Permission = Permission;
exports.AllowAll = AllowAll;
exports.DenyAll = DenyAll;
exports.BuiltinRoles = BuiltinRoles;
exports.BuiltinPermissions = BuiltinPermissions;
exports.EVENT_MAP = EVENT_MAP;
exports.isValidEventType = isValidEventType;
exports.JWTUserToken = JWTUserToken;
exports.JWTServerToken = JWTServerToken;
exports.UserFromToken = UserFromToken;
exports.DevToken = DevToken;
exports.CheckSignature = CheckSignature;
exports.encodeBase64 = encodeBase64;
exports.decodeBase64 = decodeBase64;
exports.TokenManager = TokenManager;
//# sourceMappingURL=browser.js.map
